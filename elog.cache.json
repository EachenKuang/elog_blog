{
  "docs": [
    {
      "id": "87f02b71-13f2-4c9c-a648-34dcf7b5a0bd",
      "doc_id": "87f02b71-13f2-4c9c-a648-34dcf7b5a0bd",
      "updated": 1700717640000,
      "body_original": "\n# 前言\n\n\n> 😄 作为MySQL5.6之后的默认存储引擎，InnoDB因其支持事务、外键等特性可是风靡一时，现在也是数据库理论中的面试必备要素，知其然还须知其所以然，那么掌握其架构当然也是至关重要。\n\n\n# 整理定义\n\n\n![MySQL 5.7 InnoDB 存储引擎架构图](https://image.kuangyichen.com/image/innodb-architecture-5-7.png)\n\n\n![MySQL 8.0 InnoDB 存储引擎架构图](https://image.kuangyichen.com/image/innodb-architecture-8-0.png)\n\n\n**左边是InnoDB的**[**内存数据架构**](https://dev.mysql.com/doc/refman/8.0/en/innodb-in-memory-structures.html)**（In-Memory Structure），右边是**[**磁盘数据架构**](https://dev.mysql.com/doc/refman/8.0/en/innodb-on-disk-structures.html)**（On-disk Structure）**\n\n\n# 复述展开\n\n\n## InnoDB 内存结构设计\n\n\nInnoDB作为MySQL的一个存储引擎，它的内存结构设计用于优化数据处理性能。InnoDB的内存结构主要包括以下几个部分：\n\n1. **Buffer Pool**：<u>这是InnoDB最重要的内存结构之一，用于缓存表数据和索引</u>。当MySQL需要读取或写入数据时，它首先会查看这些数据是否已经在Buffer Pool中。如果在，那么就可以直接从内存中读取或写入，避免了磁盘I/O操作，从而大大提高了性能。\n2. **Change Buffer**：Change Buffer是Buffer Pool的一部分，用于缓存对二级索引的修改操作。当MySQL需要修改二级索引时，它可以先将修改操作写入Change Buffer，然后在后台慢慢地将这些修改应用到磁盘上的索引，这样可以减少磁盘I/O操作，提高性能。\n3. **Adaptive Hash Index**：这是InnoDB的一个优化特性，用于加速对Buffer Pool中数据的访问。当MySQL反复访问同一数据时，InnoDB会自动创建一个哈希索引，使得MySQL可以更快地找到这些数据。\n4. **Log Buffer**：这是InnoDB的另一个重要内存结构，用于缓存事务日志。当MySQL执行一个事务时，它会先将事务日志写入Log Buffer，然后在适当的时机将这些日志刷新到磁盘上，这样可以减少磁盘I/O操作，提高性能。\n5. **InnoDB内部数据字典**：InnoDB有一个内部的数据字典，用于存储表的元数据，如表的结构信息、索引信息等。\n\n## InnoDB 磁盘结构\n\n\nInnoDB的磁盘结构是其如何在磁盘上存储数据和索引的方式。以下是InnoDB磁盘结构的主要组成部分：\n\n1. **表（Tables）**：InnoDB存储引擎中的表是行式存储的，每个表都有一个或多个聚簇索引或非聚簇索引。表中的数据按主键顺序存储在聚簇索引中。\n2. **索引（Indexes）**：InnoDB使用B+树数据结构来实现索引，以加快数据访问速度。每个表至少有一个聚簇索引（主键索引），也可以有一个或多个二级索引。\n3. **表空间（Tablespaces）**：表空间是InnoDB存储数据和索引的地方。默认情况下，所有的InnoDB表都存储在一个名为ibdata1的系统表空间中，但用户也可以配置InnoDB使用多个或单独的表空间。\n4. **双写缓冲区（Doublewrite Buffer）**：双写缓冲区是InnoDB用来保护数据完整性的一种机制。在将数据页写入磁盘之前，InnoDB会先将其写入双写缓冲区。如果在写入过程中发生系统崩溃，InnoDB可以使用双写缓冲区中的数据恢复损坏的页。\n5. **重做日志（Redo Log）**：重做日志是InnoDB用来保证事务的持久性的一种机制。在事务提交时，InnoDB会先将事务的修改记录到重做日志，并确保重做日志被写入磁盘。如果在事务提交后发生系统崩溃，InnoDB可以使用重做日志恢复未完成的事务。\n6. **回滚日志（Undo Logs）**：回滚日志是InnoDB用来实现多版本并发控制（MVCC）和事务回滚的一种机制。当事务修改数据时，InnoDB会在回滚日志中保存修改前的数据。如果事务需要回滚，或者其他事务需要读取修改前的数据，InnoDB可以使用回滚日志来获取这些数据。\n\n# 理解体会\n\n\n理解InnoDB的结构是非常重要的，主要有以下几个原因：\n\n1. 性能优化：理解InnoDB的内存和磁盘结构可以帮助你更好地理解MySQL的性能瓶颈，并进行有效的优化。例如，理解Buffer Pool和Redo Log的工作原理可以帮助你更好地配置这些参数，以提高MySQL的性能。\n2. 数据恢复：当数据库发生故障时，理解InnoDB的结构可以帮助你更好地进行数据恢复。例如，理解Doublewrite Buffer和Redo Log的工作原理可以帮助你恢复因系统崩溃而损坏的数据。\n3. 事务管理：理解InnoDB的事务管理机制，如Undo Logs和MVCC，可以帮助你更好地理解事务的行为，如何处理并发控制和事务隔离。\n\n> 💡 **如何学习呢？**  \n> - 阅读官方文档，这是第一手资料，也是最原始的资料：[MySQL :: MySQL 8.0 Reference Manual :: 15.4 InnoDB Architecture](https://dev.mysql.com/doc/refman/8.0/en/innodb-architecture.html)  \n>   \n> - 阅读相关书籍，最好是英文版，中文版的话一则需要翻译过程，可能过时，二则翻译过程中没有办法原汁原味，可能会失去一些干货，如果有能力的话最好还是阅读英文。如果英文基础确实不好，那还是读中文版本的。  \n>   \n> - 实践操作，除了理论学习之外，还是需要实践操作的。”实践是检验真理的唯一标准“。在实际过程中，可能能够发现更多纸上找不到的东西。  \n>   \n> - 源码学习，这是最难的一点，也是最直接的一点，`show me code` 。结合源码，更能够体会设计的实际含义在内的。\n\n\n# 参考：\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 15.4 InnoDB Architecture](https://dev.mysql.com/doc/refman/8.0/en/innodb-architecture.html)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-18",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day58",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL",
          "数据库"
        ],
        "summary": "",
        "title": "Day58【概念解析】InnoDB架构设计",
        "status": "Published",
        "urlname": "87f02b71-13f2-4c9c-a648-34dcf7b5a0bd",
        "updated": "2023-11-23 05:34:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "87f02b71-13f2-4c9c-a648-34dcf7b5a0bd"
        }
      ],
      "body": "",
      "realName": "Day58【概念解析】InnoDB架构设计",
      "relativePath": "/行业概念/Day58【概念解析】InnoDB架构设计.md"
    },
    {
      "id": "9d0ce237-43af-4dce-8f99-4f86a900b26e",
      "doc_id": "9d0ce237-43af-4dce-8f99-4f86a900b26e",
      "updated": 1700482200000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-20",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day60",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day60【概念解析】InnoDB Change Buffer",
        "status": "Published",
        "cover": "https://image.kuangyichen.com/image/innodb%20change%20buffer.webp",
        "urlname": "9d0ce237-43af-4dce-8f99-4f86a900b26e",
        "updated": "2023-11-20 20:10:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "9d0ce237-43af-4dce-8f99-4f86a900b26e"
        }
      ],
      "body": "",
      "realName": "Day60【概念解析】InnoDB Change Buffer",
      "relativePath": "/行业概念/Day60【概念解析】InnoDB Change Buffer.md"
    },
    {
      "id": "eee550ce-866f-41ee-a83c-387ac8b72c92",
      "doc_id": "eee550ce-866f-41ee-a83c-387ac8b72c92",
      "updated": 1700463660000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-19",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day59",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day59【概念解析】InnoDB Buffer Pool",
        "status": "Published",
        "cover": "https://image.kuangyichen.com/image/innodb%20buffer%20pool.webp",
        "urlname": "eee550ce-866f-41ee-a83c-387ac8b72c92",
        "updated": "2023-11-20 15:01:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "eee550ce-866f-41ee-a83c-387ac8b72c92"
        }
      ],
      "body": "",
      "realName": "Day59【概念解析】InnoDB Buffer Pool",
      "relativePath": "/行业概念/Day59【概念解析】InnoDB Buffer Pool.md"
    },
    {
      "id": "e1fbca6a-fd99-46db-9c24-58ef0864224a",
      "doc_id": "e1fbca6a-fd99-46db-9c24-58ef0864224a",
      "updated": 1700364660000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-17",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day57",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "数据库"
        ],
        "summary": "",
        "title": "Day57 【概念解析】 MVCC",
        "status": "Published",
        "cover": "https://image.kuangyichen.com/image/mvcc.webp",
        "urlname": "e1fbca6a-fd99-46db-9c24-58ef0864224a",
        "updated": "2023-11-19 11:31:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "e1fbca6a-fd99-46db-9c24-58ef0864224a"
        }
      ],
      "body": "",
      "realName": "Day57 【概念解析】 MVCC",
      "relativePath": "/行业概念/Day57 【概念解析】 MVCC.md"
    },
    {
      "id": "f563fe3c-8ecd-43ec-9b3a-3ebe17239f8e",
      "doc_id": "f563fe3c-8ecd-43ec-9b3a-3ebe17239f8e",
      "updated": 1700018940000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-15",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day55",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day55 【概念解析】InnoDB",
        "status": "Published",
        "cover": "https://image.kuangyichen.com/image/innodb.jpeg",
        "urlname": "f563fe3c-8ecd-43ec-9b3a-3ebe17239f8e",
        "updated": "2023-11-15 11:29:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "f563fe3c-8ecd-43ec-9b3a-3ebe17239f8e"
        }
      ],
      "body": "",
      "realName": "Day55 【概念解析】InnoDB",
      "relativePath": "/行业概念/Day55 【概念解析】InnoDB.md"
    },
    {
      "id": "b8166475-7087-42de-ae6d-0322521b323a",
      "doc_id": "b8166475-7087-42de-ae6d-0322521b323a",
      "updated": 1700119080000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-16",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day56",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "数据库",
          "MySQL"
        ],
        "summary": "",
        "title": "Day56 【概念解析】 数据库事务",
        "status": "Published",
        "cover": "https://image.kuangyichen.com/image/db_tx.webp",
        "urlname": "b8166475-7087-42de-ae6d-0322521b323a",
        "updated": "2023-11-16 15:18:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "b8166475-7087-42de-ae6d-0322521b323a"
        }
      ],
      "body": "",
      "realName": "Day56 【概念解析】 数据库事务",
      "relativePath": "/行业概念/Day56 【概念解析】 数据库事务.md"
    },
    {
      "id": "7fdb0733-a3f1-42dc-bc74-0a3421a3c5a3",
      "doc_id": "7fdb0733-a3f1-42dc-bc74-0a3421a3c5a3",
      "updated": 1700029140000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-12",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day52",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL",
          "SQL"
        ],
        "summary": "",
        "title": "Day52【概念解析】MySQL架构",
        "status": "Published",
        "cover": "https://image.kuangyichen.com/image/mysql-arch.webp",
        "urlname": "7fdb0733-a3f1-42dc-bc74-0a3421a3c5a3",
        "updated": "2023-11-15 14:19:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "7fdb0733-a3f1-42dc-bc74-0a3421a3c5a3"
        }
      ],
      "body": "",
      "realName": "Day52【概念解析】MySQL架构",
      "relativePath": "/行业概念/Day52【概念解析】MySQL架构.md"
    },
    {
      "id": "39aff7c0-c412-4bd0-a309-8739a1542c17",
      "doc_id": "39aff7c0-c412-4bd0-a309-8739a1542c17",
      "updated": 1700018820000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-13",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day53",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day53 【概念解析】MySQL存储引擎",
        "status": "Published",
        "cover": "https://image.kuangyichen.com/image/database-engines.webp",
        "urlname": "39aff7c0-c412-4bd0-a309-8739a1542c17",
        "updated": "2023-11-15 11:27:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "39aff7c0-c412-4bd0-a309-8739a1542c17"
        }
      ],
      "body": "",
      "realName": "Day53 【概念解析】MySQL存储引擎",
      "relativePath": "/行业概念/Day53 【概念解析】MySQL存储引擎.md"
    },
    {
      "id": "e1225d6a-d281-440a-918d-b165e0dfac69",
      "doc_id": "e1225d6a-d281-440a-918d-b165e0dfac69",
      "updated": 1700144400000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-14",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day54",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day54 【概念解析】MyISAM",
        "status": "Published",
        "cover": "https://image.kuangyichen.com/image/MyISAM.jpg",
        "urlname": "e1225d6a-d281-440a-918d-b165e0dfac69",
        "updated": "2023-11-16 22:20:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "e1225d6a-d281-440a-918d-b165e0dfac69"
        }
      ],
      "body": "",
      "realName": "Day54 【概念解析】MyISAM",
      "relativePath": "/行业概念/Day54 【概念解析】MyISAM.md"
    },
    {
      "id": "62986b24-a3f1-4b6e-a44a-f18d332c8644",
      "doc_id": "62986b24-a3f1-4b6e-a44a-f18d332c8644",
      "updated": 1699761300000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-11",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day51",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL",
          "SQL"
        ],
        "summary": "",
        "title": "Day51【概念解析】 MySQL",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1662026911591-335639b11db6?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "62986b24-a3f1-4b6e-a44a-f18d332c8644",
        "updated": "2023-11-12 11:55:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "62986b24-a3f1-4b6e-a44a-f18d332c8644"
        }
      ],
      "body": "",
      "realName": "Day51【概念解析】 MySQL",
      "relativePath": "/行业概念/Day51【概念解析】 MySQL.md"
    },
    {
      "id": "bacdfe9c-3249-4ccd-ae5a-73feadf296d5",
      "doc_id": "bacdfe9c-3249-4ccd-ae5a-73feadf296d5",
      "updated": 1699757640000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-10",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day50",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "SQL"
        ],
        "summary": "",
        "title": "Day50【概念解析】SQL",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1662027044921-6febc57a0c53?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "bacdfe9c-3249-4ccd-ae5a-73feadf296d5",
        "updated": "2023-11-12 10:54:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "bacdfe9c-3249-4ccd-ae5a-73feadf296d5"
        }
      ],
      "body": "",
      "realName": "Day50【概念解析】SQL",
      "relativePath": "/行业概念/Day50【概念解析】SQL.md"
    },
    {
      "id": "c366b1ea-ae10-4b95-b3b8-bc49b517487b",
      "doc_id": "c366b1ea-ae10-4b95-b3b8-bc49b517487b",
      "updated": 1740052800000,
      "body_original": "\n# 前言\n\n\n截止到现在，已经持续使用了Notion近两年，也基本上将之前在Typora上写的Markdown文章搬运过来了。但是，有个问题，**极端一点思考，如果Notion突然不维护了，那么我的这些数据该怎么办？**\n\n\n尽管，Notion 也提供了导出Markdown格式的功能，但是，只能一个一个导出，后期文档数量上去的话，导出都挺折腾时间的。\n\n\n于是，寻求一种能够批量、快速、自动化导出Notion文章的方法就成了最近关心的事情。好在，在[Matrixcore](https://matrixcore.top/) 的帮助下，发现一件神器 —— [Elog](https://elog.1874.cool/)。\n\n\n使用 Notion+Elog+Slack+Pipedream 这一套组合拳就解决了持续集成的方式来自动化更新Notion文档。\n\n\n# 本地实践开始\n\n\n因为我的主要目的是能够使用 Elog 定时备份 NotionNext下的文档，并且定期归档，所以实践这块以完成持续集成部署为结果展开流程。\n\n\n## 安装依赖\n\n\n参考[快速开始](https://elog.1874.cool/notion/start)\n\n\n前置依赖，需要安装好 [node](https://nodejs.org/en) \n\n\n```shell\n# 使用 npm 安装 CLI\nnpm install @elog/cli -g\n\n# 使用 yarn 安装 CLI\nyarn global add @elog/cli\n\n# 使用 pnpm 安装 CLI\npnpm install @elog/cli -g\n\n# 安装指定版本\nnpm install @elog/cli@0.9.0 -g\n```\n\n\n## 配置Elog\n\n\n在本地目录执行初始化，我这边是在云服务器上，地址为： `/data/server/Myblog_backup`\n\n\n```shell\ncd /data/server/Myblog_backup\nelog init\n```\n\n\n根据提示初始化成功后，会在根目录生成一份 `elog.config.js` 配置文件和本地调试用的`.elog.env`环境变量配置文件。\n\n\n其中 `elog.config.js` 是关键的配置文件，而 `.elog.env` 是用于保存本地关键配置的文件。\n\n\n关于具体参考 [目录结构 | Elog (1874.cool)](https://elog.1874.cool/notion/config-catalog)\n\n\n主要关注以下三个字段的内容：\n\n- write  写作平台详细配置\n- deploy  博客平台详细配置\n- image  图床平台详情配置\n\n我本地的配置是：\n\n\n```javascript\nmodule.exports = {\n\twrite: {\n\t\tplatform: 'notion',\n\t\tnotion: {\n\t\t    token: process.env.NOTION_TOKEN,\n\t\t    databaseId: process.env.NOTION_DATABASE_ID,\n\t\t    filter:  {\n\t\t      property: 'type',\n\t\t      select: {\n\t\t        equals: 'Post'\n\t\t      }\n\t\t    }, \n\t\t    sorts: true, \n\t\t    catalog: {\n\t\t      enable: true,\n\t\t      property: \"category\",\n\t\t    }\n\t\t},\n\t\tdeploy: {\n\t    platform: 'local',\n\t    local: {\n\t      outputDir: './docs',\n\t      filename: 'title',\n\t      format: 'matter-markdown',\n\t      catalog: true,\n\t      formatExt: '',\n\t    },\n\t\t}\n\t\timage: {\n\t    enable: true,\n\t    platform: 'local',\n\t    local: {\n\t      outputDir: './docs/images',\n\t      prefixKey: '/docs/images',\n\t      pathFollowDoc: true,\n\t      imagePathExt: '',\n\t    },\n\t\t}\n}\n```\n\n\n我这边就是需要将 notion 数据库中的 `type` 字段 为 `Post` 的文章导出到 ./docs目录下，Markdown名称以 `title` 字段作为名称，按照 `catalog` 进行文件夹归类。文章的图片下载到本地 `./docs/images` 目录下，并使用相对路径替换掉原始的图片。\n\n\n## 同步\n\n\n```shell\nelog sync -e .elog.env\n```\n\n\n**本地效果**【左边为Notion数据库部分截图，右边为生成的MD文档】：\n\n\n\n![](https://image.kuangyichen.com/image/202311162036134.webp)\n\n\n\n\n![](https://image.kuangyichen.com/image/202311162034131.png)\n\n\n\n\n# 持续集成部署\n\n\n> 🎈 **说了这么多，一直都是本地在操作，如何实现自动化持续集成呢？**\n\n\n需要借助Notion+Slack+Pipedream+GitHub了\n\n\nnotion ⇒ slack ⇒ pipedream ⇒ github action\n\n\n## slack 设置\n\n\n### 1、注册好之后，创建频道（channel）\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/d57cceec-abea-4500-b629-1f699baed808/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=cc2ad85ae8d472029b1fb7f6eb4bbcd59bbf6613931c26f487e86217b9c31a8a&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n### 2、添加应用 Notion\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/d59711a2-85d7-4c0d-9db5-e3cabdd024e1/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=c5fb6633f04a9c3e4b5f539fcbb0c4efdef373711b36275d84a9af9fe0d50099&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/da136fb8-4852-46fe-94e9-13a367699e7c/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=248ec49d02149205b432b8c85c14a534a4db08246404ebb6b065ded7fdb41ae0&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n## notion 设置\n\n\n### 1、创建 automation\n\n\n在数据库页面点击闪电按钮，可以创建 `automation` ，增加触发器以及执行器\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/361acabd-7c2b-4a9e-a26c-ee109bf480cf/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=b7ca141d9455f56b370043b97f3b8efde186371c6c3d338cf6b2662e006323bc&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n触发器设置为 状态变为 `Published`  触发。因为在slack上设置添加了应用Notion，所以可以在执行器中看到 推送消息至频道，选择好在Slack中创建的频道，这里是 notion\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/41e958bc-8b6d-4950-96d0-4dc5981dbc3b/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=bc7a0947c1418f98da377c714048fff2ab42090acad95514d5dd0428d119a0b0&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n## pipedream 设置\n\n\n### 1、注册\n\n\n### 2、创建 project \n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/b435a34b-dead-41a8-967f-28fc7affff2f/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=3f0eb658fd8e024174023b4581f2d4607e822c1a48f88b18bd83c0a7955b79c2&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n### 3、在 project 下创建 workflow\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/9228da9e-1e24-4aed-9cdf-dfbd67e0a74a/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=6d94a765abf6becd08f37ef158c09ebf9c455f17237759caad116459107fc029&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n### 4、设置 workflow\n\n\ntrigger 触发器选择 Slack\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/10cfdbce-2d41-4bea-8fdd-ceee79321d59/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=7ff99f95b9e1330fe1d0b2e8fe75cf0558c4ee0953751891ea853b4229ac711d&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n选择 `New Message In Channels`\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/5c1250e0-809d-430b-80cc-25c3deffc073/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=e67d77b9fc603ee123d96dabfa58d675064c29a3cfb99815c059db834237774c&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n按照如下设置\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/94e1fd3b-5637-40fb-927c-6436b782035b/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=ac78dd6afc5009083188eca6bbc586e04eeac404a110fe6ad89f173be409337a&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n增加一个Step Python\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/2c83c076-600f-4af0-98af-ae0de5297964/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=6fb7f4149af5de532c25dcbd34e2f454cecb465bdfaa0f4c96bc2dad37910d9b&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n按照如下编写即可：\n\n\n```python\nimport os\nimport requests\nimport json\n\n\ndef handler(pd: \"pidedream\"):\n    try:\n\n        token = os.environ['GITHUB_TOKEN']\n        user = \"github_username\"\n        repo = \"github_repo\"\n        event_type = \"deploy\"\n        headers = {\n            \"User-Agent\": \"@elog/serverless-api\",\n            \"Accept\": '*/*',\n            \"Authorization\": f\"token {token}\",\n        }\n        response = requests.post(\n            f\"https://api.github.com/repos/{user}/{repo}/dispatches\",\n            headers=headers,\n            data=json.dumps({\"event_type\": event_type})\n        )\n        # response.raise_for_status()\n        print(response.text, response.json())\n        return {\"message\": response.json() or 'Success!'}\n    except Exception as e:\n        print(e)\n```\n\n\n配置环境变量，用于 code 中使用，在环境中通过 `os.environ['your_token']`来使用\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/bcc75a11-13bf-47f2-9922-e88ea235d9f0/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=87850a5f419de35509906970c96ed19e2ed9cb4401e62200fa1e6b503da7ccbb&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n至此，已完成一半的设置。\n\n\n注意：\n\n\n> ✅ **以下三个变量需要在 GitHub 获取**  \n> **github_username**: 你的github账户名称  \n> **github_repo**：你需要同步的 github 仓库，后续会将生成的markdown推送到这个仓库  \n> **token**：github token \n\n\n## github设置\n\n\n在Github上新建一个仓库，将本地与远程仓库链接上。\n\n\n在 `.github/workflows/`**`main.yaml`** **添加如下**\n\n\n```javascript\nname: Deplo To Github Pages\n\non:\n  # 允许手动push触发\n  push:\n    branches:\n      - master\n  # 允许外部仓库事件触发\n  repository_dispatch:\n    types:\n  # api中的event_type就是这个\n      - deploy\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: 检查分支\n        uses: actions/checkout@master\n\n      - name: 安装node环境\n        uses: actions/setup-node@master\n        with:\n          node-version: \"16.x\"\n\n      - name: 安装依赖\n        run: |\n          export TZ='Asia/Shanghai'\n          npm install --prod\n\n      - name: 拉取语雀/Notion的文章\n        env:\n          # 语雀相关环境变量\n          YUQUE_TOKEN: ${{ secrets.YUQUE_TOKEN }}\n          YUQUE_LOGIN: ${{ secrets.YUQUE_LOGIN }}\n          YUQUE_REPO: ${{ secrets.YUQUE_REPO }}\n          # Notion相关环境变量\n          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}\n          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}\n          # 图床相关环境变量，以腾讯云COS为例\n          COS_SECRET_ID: ${{ secrets.COS_SECRET_ID }}\n          COS_SECRET_KEY: ${{ secrets.COS_SECRET_KEY }}\n          COS_IMAGE_BUCKET: ${{ secrets.COS_IMAGE_BUCKET }}\n          COS_IMAGE_REGION: ${{ secrets.COS_IMAGE_REGION }}\n        run: |\n          # 对应package.json中的script.sync\n          npm run sync\n\n      - name: 配置Git用户名邮箱\n        run: |\n          git config --global user.name \"Eachen\"\n          git config --global user.email \"695089605@qq.com\"\n\n      - name: 提交yuque拉取的文章到GitHub仓库\n        run: |\n          echo `date +\"%Y-%m-%d %H:%M:%S\"` begin > time.txt\n          git add .\n          git commit -m \"更新文档\" -a\n\n      - name: 推送文章到仓库\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: 生成静态文件\n        run: |\n          # 对应package.json中的script.build\n          npm run build\n```\n\n\n**添加环境变量**：\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/4fee4106-f3b5-49d0-a1b8-8a0d4e679bd0/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=4d6b157e425c6b915a3847ba4d5540704950b522ab283b8d2067317eadf4c300&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n**增加执行权限：**\n\n\n`Setting` 下 `Actions` Tab 的 Workflow permissions 需要选中 `Read and write permissions`,否则会报错，没有权限更新。\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/0c2ecb6d-fbb8-44de-8f67-b10fbbabfe7e/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=5c3739bb541dcdfd1ea1bc3c5f536cd6f9801c8387bf9e48a683cdfe69ab2011&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n## 执行效果：\n\n\n当在Notion数据库中，将文章的状态从 `Draft` 转为 `Published` ，随即触发执行\n\n\n**Slack:**\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/e5efc5a5-132c-4a20-b64b-ce308723cefc/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=5f8d5bdecbb3e31417189cab176686ee048b1466f35d3325820c28498522e290&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n**Pipedream:**\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/aaa638ce-ea8a-4213-b940-4fa90e513e47/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=b426f877e711f86484fa4c1496a1fbffd730aed883464d5adaaa53a18ceaf927&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n**Github:**\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/2985fb3d-08cc-4617-be3f-5db47f2f298a/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=8e3a4ca36ee42a4c73fc538b076eaa5eecfa54a628b05fb8bdcaff8155dd8d0c&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/949dbf46-9a8d-4637-8c60-e05ef9d3114a/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMKUVEZ5%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122041Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBRLl4EPNVKzA%2FV8Z4g5XQ3FrfOcRTDNWq0wkF0G7xkyAiEA3zq5FyUlejmejPReO%2FCzk2Lc67dH%2FlajSyA4i3z2%2BDEqiAQIvf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDJLW11pfTLWi1ScTpSrcA9MYGsXUt5vXqGecTfGGKevhdCK4mW48y9NNFhd3Kbdp0%2BdypwStdGzyYRA8%2BF5syF6zEavfRrU4L493Js9JS%2BQ35TJYABg1aUDFMLaUF0SsP2NSUahl83bXZ7loSYAqjNICbiR6GjAhzRxdLYge%2FvbdxbyMuNeq9MniCrelHLGMQAOrVgmwc%2BWN%2FUUNCFzCEe6th5iq%2FnUps%2Ftf48F8C13Nh801TrQEqqYkaOvEZ8%2FaQK5MXSaGYru2dxlApHU5PXu94iF7QlqVbjMs8AqGr9bNqG3OD9W1TfmTG99RgJe%2F28FMWxj7Q7Ag1Q5IP9lYvX%2BtpWKha2uTkd3zkYz6aSMTWWDCPJQDrO82mfEXgFXZ0Lbr25ZkvgPgqgtHeK7%2F78GqroIhnDw6dl1617TXVDkgo6mDF4N3nmJ%2BLRcOukm3GGG%2FJ1uX4%2F%2BLmBFqVSPr1qBdK1tJL41f%2Bf5rymiLTPmQrIn7nQgNfAqHGeKDk6787bUmEQ252Du7XYzkfq%2BgR0%2Bcd%2BJM0EJfc9HP8qgWybqZwjSY9FDrjzFurrcgn%2FocM9OiVFPL41he50GCA6QW%2BECrMsSxMp26cE0RYUAWSKo7kTjxZQ%2BHpxAplkYUAJlRqOXmPXqWP0iKjHMoMOys3L0GOqUB2YPfLxwf0pmGv4VEZALJR01DUQk49z6w2GL%2B%2FupDlWEQTb1GyCjr7CUvk5q5ESbIgDOgpe%2BvatCgfIGM7iExCAUQ56y1BfBYcNpMQHn2mAJbnfJg4colU%2F%2F%2Bo%2FVFTUIjNKd8h49WS0C6Jbsa9Gur9oWs2u3%2FkH1GldJTfh6IGCDysvU03pJ5uopCI1MeiRgbjxaFuKaVzEbAQvAwlB9x35UiANzE&X-Amz-Signature=e13ca0f5d7790448333ca8561ccffe8d699cdc9a790a432d4fd131b15b15c3ff&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n# 关于Elog\n\n\n## 什么是Elog\n\n\n> `Elog`名为 `Easy Blogging`，简单、轻松的书写&部署博客  \n> 它是一种开放式跨端博客解决方案，随意组合写作平台（语雀/飞书/Notion/FlowUs）和博客平台（Hexo/Vitepress/Confluence/WordPress）等\n\n\n用我的话来说，就是Elog支持从多个**写作平台**中导出Markdown文件格式，然后生成不同**博客平台**的静态博客文件部署。就是方便不懂技术的小伙伴也能在不同的写作平台以及博客平台自由切换，体验一条龙服务。\n\n\n> 💡 Elog支持的写作平台与博客平台  \n> **写作平台：**  \n>   \n> - Notion  \n>   \n> - 语雀  \n>   \n> - FlowUs  \n>   \n> - 飞书云文档  \n>   \n> **博客平台：**  \n>   \n> - Hexo  \n>   \n> - Vitepress  \n>   \n> - HuGo  \n>   \n> - Docusaurus  \n>   \n> - Docz  \n>   \n> - Confluence  \n>   \n> - WordPress  \n>   \n> **支持图床**  \n>   \n> - 本地  \n>   \n> - 腾讯云COS  \n>   \n> - 阿里云OSS  \n>   \n> - Github图床  \n>   \n> - 七牛云  \n>   \n> - 又拍云\n\n\n# 注意事项：\n\n\n> ❓ 【github】如何将本地仓库与远程仓库建立连接\n\n- 【**空仓库】创建完空仓库就将本地项目关联到远程**\n\t1. **如果本地项目已经通过git管理：**\n\n\t\t```shell\n\t\tgit remote add origin\n\t\tgit push -u origin master\n\t\t```\n\n\t2. **本地项目未通过git管理：**\n\n\t\t```shell\n\t\t# (将项目通过git初始化)\n\t\tgit init\n\t\t# (添加所有修改到暂存区)\n\t\tgit add .\n\t\t# (提交commit)\n\t\tgit commit -m \"first commit remark\"\n\t\t# 与远程仓库地址建立连接\n\t\tgit remote add origin [仓库地址]\n\t\t# (推送到远程github)\n\t\tgit push -u origin master\n\t\t```\n\n- 【**非空仓库】创建完非空仓库就将本地项目关联到远程**\n\t1. 远程非空仓库的关联，就要涉及到2个不同项目的关联了；得先将远程的代码合并下来，才能提交；我们先假设项目已经通过git管理了。缺少关联push远程仓库的步骤讲：\n\n\t\t```shell\n\t\t# 与远程仓库地址建立连接\n\t\tgit remote add origin [仓库地址]\n\t\t# 让两个不同项目的没关联提交允许拉取合并\n\t\tgit pull origin master --allow-unrelated-histories\n\t\t```\n\n\n> ❓ 【github】如何获取 github token\n\n\n在页面下设置 [Personal Access Tokens (Classic) (github.com)](https://github.com/settings/tokens)\n\n\n![](https://image.kuangyichen.com/image/202311171004131.png)\n\n\n![](https://image.kuangyichen.com/image/202311171006864.png)\n\n\n# 参考：\n\n\n[Elog 介绍 | Elog 文档 (1874.cool)](https://elog.1874.cool/)\n\n\n[[跨域协同] elog+notion实现md优雅备份 | MatrixCore](https://matrixcore.top/article/elog)\n\n\n[https://pipedream.com/](https://pipedream.com/)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-16",
        "type": "Post",
        "category": "技术分享",
        "slug": "elog",
        "tags": [
          "建站",
          "工具",
          "必看精选"
        ],
        "summary": "",
        "title": "Elog+notion持续集成导出MD文件",
        "status": "Published",
        "urlname": "c366b1ea-ae10-4b95-b3b8-bc49b517487b",
        "updated": "2025-02-20 12:00:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "c366b1ea-ae10-4b95-b3b8-bc49b517487b"
        }
      ],
      "body": "",
      "realName": "Elog+notion持续集成导出MD文件",
      "relativePath": "/技术分享/Elog+notion持续集成导出MD文件.md"
    },
    {
      "id": "c2f5659b-6463-4491-83fd-3d48a26330ec",
      "doc_id": "c2f5659b-6463-4491-83fd-3d48a26330ec",
      "updated": 1699791000000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-09",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day49",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day49 【概念解析】访问者模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1569547033055-1379ab87d439?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "c2f5659b-6463-4491-83fd-3d48a26330ec",
        "updated": "2023-11-12 20:10:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "c2f5659b-6463-4491-83fd-3d48a26330ec"
        }
      ],
      "body": "",
      "realName": "Day49 【概念解析】访问者模式",
      "relativePath": "/行业概念/Day49 【概念解析】访问者模式.md"
    },
    {
      "id": "1aaaa6d6-26d0-498d-a4f6-95bcacac8f57",
      "doc_id": "1aaaa6d6-26d0-498d-a4f6-95bcacac8f57",
      "updated": 1699326360000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-07",
        "type": "Post",
        "category": "技术分享",
        "slug": "parametrize",
        "tags": [
          "推荐",
          "必看精选",
          "Python"
        ],
        "summary": "Parametrize是pytest测试框架中的一个强大特性，它允许我们为测试函数提供多组参数和预期结果，从而轻松地创建多个测试用例。这种方法提高了代码的可读性和可维护性，提高了测试覆盖率和测试效率。然而，参数过多时可能会导致测试函数的复杂性增加，且参数之间的依赖关系可能需要额外处理。Parametrize非常适用于测试同一个函数或方法在不同参数下的行为、创建大量相似的测试用例以及进行参数化的并行测试。",
        "title": "Pytest中的Parametrize：妙用与实践",
        "status": "Published",
        "cover": "https://source.unsplash.com/random/720x480/?encryption",
        "urlname": "1aaaa6d6-26d0-498d-a4f6-95bcacac8f57",
        "updated": "2023-11-07 11:06:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "1aaaa6d6-26d0-498d-a4f6-95bcacac8f57"
        }
      ],
      "body": "",
      "realName": "Pytest中的Parametrize：妙用与实践",
      "relativePath": "/技术分享/Pytest中的Parametrize：妙用与实践.md"
    },
    {
      "id": "387b2c0d-afc4-4c75-b4f1-7844b7ffeacc",
      "doc_id": "387b2c0d-afc4-4c75-b4f1-7844b7ffeacc",
      "updated": 1699450020000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-08",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day48",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day48【概念解析】模板方法",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1626544827763-d516dce335e2?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "387b2c0d-afc4-4c75-b4f1-7844b7ffeacc",
        "updated": "2023-11-08 21:27:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "387b2c0d-afc4-4c75-b4f1-7844b7ffeacc"
        }
      ],
      "body": "",
      "realName": "Day48【概念解析】模板方法",
      "relativePath": "/行业概念/Day48【概念解析】模板方法.md"
    },
    {
      "id": "7ab7e26a-2540-402d-870c-dab572759979",
      "doc_id": "7ab7e26a-2540-402d-870c-dab572759979",
      "updated": 1699257240000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-06",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day46",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day46 【概念解析】状态模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1547016148-13c0aa169865?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "7ab7e26a-2540-402d-870c-dab572759979",
        "updated": "2023-11-06 15:54:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "7ab7e26a-2540-402d-870c-dab572759979"
        }
      ],
      "body": "",
      "realName": "Day46 【概念解析】状态模式",
      "relativePath": "/行业概念/Day46 【概念解析】状态模式.md"
    },
    {
      "id": "d89272f7-2653-4485-acd9-2d0da738545c",
      "doc_id": "d89272f7-2653-4485-acd9-2d0da738545c",
      "updated": 1699346820000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-07",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day47",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day47 【概念解析】策略模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1523875194681-bedd468c58bf?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "d89272f7-2653-4485-acd9-2d0da738545c",
        "updated": "2023-11-07 16:47:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "d89272f7-2653-4485-acd9-2d0da738545c"
        }
      ],
      "body": "",
      "realName": "Day47 【概念解析】策略模式",
      "relativePath": "/行业概念/Day47 【概念解析】策略模式.md"
    },
    {
      "id": "74ad67a9-8873-469e-990a-1c80663b9fb6",
      "doc_id": "74ad67a9-8873-469e-990a-1c80663b9fb6",
      "updated": 1699194360000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-05",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day45",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day45【概念解析】观察者模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1619884889432-b242fdee532a?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "74ad67a9-8873-469e-990a-1c80663b9fb6",
        "updated": "2023-11-05 22:26:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "74ad67a9-8873-469e-990a-1c80663b9fb6"
        }
      ],
      "body": "",
      "realName": "Day45【概念解析】观察者模式",
      "relativePath": "/行业概念/Day45【概念解析】观察者模式.md"
    },
    {
      "id": "c971b9ef-29ed-4efc-a5cb-3ec44df3ecf1",
      "doc_id": "c971b9ef-29ed-4efc-a5cb-3ec44df3ecf1",
      "updated": 1698979740000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-03",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day43",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day43【概念解析】中介者模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1572879023364-ab4f53e9d5fa?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "c971b9ef-29ed-4efc-a5cb-3ec44df3ecf1",
        "updated": "2023-11-03 10:49:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "c971b9ef-29ed-4efc-a5cb-3ec44df3ecf1"
        }
      ],
      "body": "",
      "realName": "Day43【概念解析】中介者模式",
      "relativePath": "/行业概念/Day43【概念解析】中介者模式.md"
    },
    {
      "id": "73f7c318-abd7-459f-9446-b86f408742a3",
      "doc_id": "73f7c318-abd7-459f-9446-b86f408742a3",
      "updated": 1740400920000,
      "body_original": "\n> 📌 **仅以此信献给吾妻柯廷，贺上，生日快乐！！！🎂🎂🎂**\n\n\n> 爱妻柯廷：\n\n\n\t   展信佳！\n\n\n\t   臣者，吾之名也，谨以此书，向汝表达深切敬意及爱恋。今日乃仲冬首日，翌日乃汝之诞辰，臣以此信，为汝献上至真祝福。\n\n\n\t   汝如春之花，盛开于四季；汝之笑容汝夏日暖阳，温暖吾心；汝之智慧如秋收之果，丰满而甜美；汝善良如冬之雪，洁白无暇。每一日与汝相处，皆为臣之幸福。\n\n\n\t   汝之诞辰，乃天地至美之日。愿汝之生活如春花灿烂，如夏日明媚，如秋果丰满，如冬雪洁白。愿汝之笑恒扬于脸颊，愿汝之人生溢满欢乐幸福。\n\n\n\t   吾与汝相恋于丙申年新历仲冬一十八日，届时吾研学于厦门大学，汝不远千里从杭至厦，与吾相见，吾感汝情之深，爱之切。在厦期间，与汝在漫步于厦大湖畔，相约于演武场，游览于情人谷，自习于厦大学生公寓，跑步于公寓足球场。观音山、会展中心、环岛路、厦大西村、中华城、吕厝、鼓浪屿、中山街，每每都是汝与吾的足迹，点点滴滴，历历在目。\n\n\n\t   己亥年间，吾与汝步入婚姻殿堂。吾与汝山盟海誓，一诺千金，白头偕老，共度此生。而来四年有余，生活中，有过喜悦，有过悲伤，有过争吵，也有过感动，有过冷战，也有过和好如初，有过喜怒哀乐，有过柴米油盐。相恋至今，迩来七年之久。有人云：七年之痒。吾道是，然七年又七年，吾初心如旧，厦大湖畔纵有三千尺，不及吾之爱汝情。得妻如此，幸甚至哉，歌以咏志。得妻如此，夫复何求？\n\n\n\t   今朝，乃吾而立之年，赴深亦四年有余。吾与汝安居于平峦山旁，共筑爱巢于桃花源。无论春夏，乃至秋冬，吾欲与汝共享天地之灵气，日月之精华，有汝，足矣。\n\n\n\t   在此，向汝献上至深之敬意，至热烈之祝福。愿汝之生日充满欢乐，愿汝之人生如诗如画。\n\n\n\t👨🏻‍⚕️臣字\n\n\n\t写于二零二三年十一月一日晚\n\n\n使用deepseek润色下：\n\n\n\n\n> 【Deepseek 润色后】\n\n\n\t爱妻柯廷妆次：\n\t展楮如晤，情长笺短。余今秉烛作书，值仲冬初肃，适逢卿芳诞在迩，乃以寸管书胸臆，聊表赤忱。\n\n\n\t卿之仪态，若春棠含露，四时皆芳；卿之笑靥，似夏云出岫，温煦盈怀；卿之慧心，如秋月映潭，澄明可鉴；卿之素德，若冬梅覆雪，皎洁无瑕。与卿晨昏相守，实乃三生之幸。\n\n\n\t忆昔丙申仲冬既望，余负笈鹭岛，卿自武林涉千里烟波来会。曾记芙蓉湖畔执手徜徉，演武场上并肩观星，情人谷中听松品茗，勤业斋内红袖添香。更踏遍鼓浪琴屿、环岛烟堤、中山闾巷，处处皆印同心之迹。己亥嘉月，共结朱陈之好，盟誓犹在耳畔：\"死生契阔，与子成说\"。迩来七载，历寒暑而情愈笃，经风雨而意弥坚。世人常道\"七年之痒\"，然吾辈之情，恰似南普陀古榕，盘根虬结，愈久愈深。\n\n\n\t今寓居鹏城四载，筑巢平峦山下。每值晨昏，观卿对镜理云鬓，临窗调素琴，便觉陶然忘机。纵无金谷之奢，兰亭之雅，然得与卿\"赌书消得泼茶香\"，已胜却人间无数。\n\n\n\t值此芳辰，愿卿：\n\t朱颜长似菡萏新，慧质恒如明月皎。\n\t琴瑟和鸣春永驻，芝兰并茂岁常安。\n\t更祈天赐麟儿绕膝，白发簪花共斜阳。\n\n\n\t临楮神驰，不尽所怀。惟愿结发之情，可通碧落黄泉；连理之约，能贯沧海桑田。\n\n\n\t夫君 臣 谨奉\n\t癸卯年孟冬朔日夜\n\n\n\t注：此文润色着重以下方面：\n\n\t1. 称谓调整：以\"余\"代\"臣\"，更合古时夫妻称谓；增\"妆次\"等书信用语\n\t2. 意象升华：将具体景点转化为诗意表达（如\"芙蓉湖畔\"代\"厦大湖畔\"）\n\t3. 典故化用：融入《诗经》《金石录后序》等经典意象\n\t4. 对仗工整：祝词部分采用七言对仗句式\n\t5. 情感递进：通过时间脉络展现感情升华，结尾深化永恒之约\n\t6. 去除冗余：合并重复叙事，提炼核心场景\n\t7. 韵律调整：关键段落押\"ang\"韵，增强诵读美感\n\n\n\n\n",
      "properties": {
        "password": "190521",
        "icon": "",
        "date": "2023-11-01",
        "type": "Post",
        "category": "心情随笔",
        "slug": "love-you-20231102",
        "tags": [
          "随笔"
        ],
        "summary": "写于吾妻诞辰日之贺信，密码为相恋纪念日",
        "title": "与妻书-癸卯年 壬戌月 癸亥日",
        "status": "Published",
        "urlname": "73f7c318-abd7-459f-9446-b86f408742a3",
        "updated": "2025-02-24 12:42:00"
      },
      "catalog": [
        {
          "title": "心情随笔",
          "doc_id": "73f7c318-abd7-459f-9446-b86f408742a3"
        }
      ],
      "body": "",
      "realName": "与妻书-癸卯年 壬戌月 癸亥日",
      "relativePath": "/心情随笔/与妻书-癸卯年 壬戌月 癸亥日.md"
    },
    {
      "id": "5f32a5ce-5e61-4bf9-b6c9-467536cd6795",
      "doc_id": "5f32a5ce-5e61-4bf9-b6c9-467536cd6795",
      "updated": 1704072960000,
      "body_original": "\n# 10月小结\n\n\n整个10月，尽管包含了中秋国庆假期，整体的目标完成度还是非常好的：\n\n\n数据如下：\n\n1. **运动：**运动次数19次，跑步13次，跑量 **87.59**km\n\n\t[bookmark](https://kuangyichen.com/running)\n\n2. **学习：坚持每天学习，参与概念打卡活动全勤，英语学习全勤**\n3. 体重控制在131左右，再接再厉\n4. 做饭次数10次\n\n![](https://image.kuangyichen.com/image/202311011602866.png)\n\n\n[bookmark](https://kuangyichen.com/)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-01",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202310",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2023年10月",
        "status": "Published",
        "urlname": "5f32a5ce-5e61-4bf9-b6c9-467536cd6795",
        "updated": "2024-01-01 01:36:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "5f32a5ce-5e61-4bf9-b6c9-467536cd6795"
        }
      ],
      "body": "",
      "realName": "[阶段小结]2023年10月",
      "relativePath": "/三省吾身/[阶段小结]2023年10月.md"
    },
    {
      "id": "bcb84456-5b0d-4bf3-8cd1-040bbcfe3505",
      "doc_id": "bcb84456-5b0d-4bf3-8cd1-040bbcfe3505",
      "updated": 1699063740000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-04",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day44",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day44【概念解析】备忘录模式",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/86f96968-f617-4740-a539-e383d7d7f980/jon-tyson-P2aOvMMUJnY-unsplash.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=21e3e7ede9289ce7551d5db4344101c489f818dae962c8e06b2475a25f80027e&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "bcb84456-5b0d-4bf3-8cd1-040bbcfe3505",
        "updated": "2023-11-04 10:09:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "bcb84456-5b0d-4bf3-8cd1-040bbcfe3505"
        }
      ],
      "body": "",
      "realName": "Day44【概念解析】备忘录模式",
      "relativePath": "/行业概念/Day44【概念解析】备忘录模式.md"
    },
    {
      "id": "9262dea6-2976-46b6-b232-fde19c95db3c",
      "doc_id": "9262dea6-2976-46b6-b232-fde19c95db3c",
      "updated": 1698895620000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-02",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day42",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day42【概念解析】迭代器模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1680357533402-def806337269?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "9262dea6-2976-46b6-b232-fde19c95db3c",
        "updated": "2023-11-02 11:27:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "9262dea6-2976-46b6-b232-fde19c95db3c"
        }
      ],
      "body": "",
      "realName": "Day42【概念解析】迭代器模式",
      "relativePath": "/行业概念/Day42【概念解析】迭代器模式.md"
    },
    {
      "id": "bab5d2df-faef-44e1-b1d8-bb3de013588b",
      "doc_id": "bab5d2df-faef-44e1-b1d8-bb3de013588b",
      "updated": 1698895620000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-01",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day41",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day41【概念解析】命令模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1524741978410-350ba91a70d7?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "bab5d2df-faef-44e1-b1d8-bb3de013588b",
        "updated": "2023-11-02 11:27:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "bab5d2df-faef-44e1-b1d8-bb3de013588b"
        }
      ],
      "body": "",
      "realName": "Day41【概念解析】命令模式",
      "relativePath": "/行业概念/Day41【概念解析】命令模式.md"
    },
    {
      "id": "99aba18c-c1a5-4159-bd80-31f91b704033",
      "doc_id": "99aba18c-c1a5-4159-bd80-31f91b704033",
      "updated": 1698675120000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-30",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day39",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day39【概念解析】代理模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1597915869221-a9eaaa1e7700?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "99aba18c-c1a5-4159-bd80-31f91b704033",
        "updated": "2023-10-30 22:12:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "99aba18c-c1a5-4159-bd80-31f91b704033"
        }
      ],
      "body": "",
      "realName": "Day39【概念解析】代理模式",
      "relativePath": "/行业概念/Day39【概念解析】代理模式.md"
    },
    {
      "id": "85ec7872-2079-4fc4-8ece-911ea8411034",
      "doc_id": "85ec7872-2079-4fc4-8ece-911ea8411034",
      "updated": 1698713100000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-31",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day40",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day40 【概念解析】责任链模式",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/met_william_morris_1875.jpg",
        "urlname": "85ec7872-2079-4fc4-8ece-911ea8411034",
        "updated": "2023-10-31 08:45:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "85ec7872-2079-4fc4-8ece-911ea8411034"
        }
      ],
      "body": "",
      "realName": "Day40 【概念解析】责任链模式",
      "relativePath": "/行业概念/Day40 【概念解析】责任链模式.md"
    },
    {
      "id": "1417f3a8-1e53-4a77-ab33-48eecc251e42",
      "doc_id": "1417f3a8-1e53-4a77-ab33-48eecc251e42",
      "updated": 1698549540000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-29",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day38",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day38 【概念解析】享元模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1585504198199-20277593b94f?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "1417f3a8-1e53-4a77-ab33-48eecc251e42",
        "updated": "2023-10-29 11:19:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "1417f3a8-1e53-4a77-ab33-48eecc251e42"
        }
      ],
      "body": "",
      "realName": "Day38 【概念解析】享元模式",
      "relativePath": "/行业概念/Day38 【概念解析】享元模式.md"
    },
    {
      "id": "bf82b3a4-6b39-455c-a42a-386e8158129b",
      "doc_id": "bf82b3a4-6b39-455c-a42a-386e8158129b",
      "updated": 1698499740000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-28",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day37",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day37【概念解析】外观模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1523350305669-8b45966e3e89?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "bf82b3a4-6b39-455c-a42a-386e8158129b",
        "updated": "2023-10-28 21:29:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "bf82b3a4-6b39-455c-a42a-386e8158129b"
        }
      ],
      "body": "",
      "realName": "Day37【概念解析】外观模式",
      "relativePath": "/行业概念/Day37【概念解析】外观模式.md"
    },
    {
      "id": "1a622523-99f1-40e3-aeae-ce93db356ceb",
      "doc_id": "1a622523-99f1-40e3-aeae-ce93db356ceb",
      "updated": 1698408840000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-27",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day36",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day36【概念解析】装饰模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1632119289059-793dd347950f?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "1a622523-99f1-40e3-aeae-ce93db356ceb",
        "updated": "2023-10-27 20:14:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "1a622523-99f1-40e3-aeae-ce93db356ceb"
        }
      ],
      "body": "",
      "realName": "Day36【概念解析】装饰模式",
      "relativePath": "/行业概念/Day36【概念解析】装饰模式.md"
    },
    {
      "id": "7815278a-17df-4bc7-97f0-e214b0c31fae",
      "doc_id": "7815278a-17df-4bc7-97f0-e214b0c31fae",
      "updated": 1698405960000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-26",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day35",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day35【概念解析】组合模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1635789145651-d5770bc33039?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "7815278a-17df-4bc7-97f0-e214b0c31fae",
        "updated": "2023-10-27 19:26:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "7815278a-17df-4bc7-97f0-e214b0c31fae"
        }
      ],
      "body": "",
      "realName": "Day35【概念解析】组合模式",
      "relativePath": "/行业概念/Day35【概念解析】组合模式.md"
    },
    {
      "id": "52d2faa6-7c68-48c0-83cc-9b25e55d8677",
      "doc_id": "52d2faa6-7c68-48c0-83cc-9b25e55d8677",
      "updated": 1698405900000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-25",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day34",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day34 【概念解析】适配器模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1564517945244-d371c925640b?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "52d2faa6-7c68-48c0-83cc-9b25e55d8677",
        "updated": "2023-10-27 19:25:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "52d2faa6-7c68-48c0-83cc-9b25e55d8677"
        }
      ],
      "body": "",
      "realName": "Day34 【概念解析】适配器模式",
      "relativePath": "/行业概念/Day34 【概念解析】适配器模式.md"
    },
    {
      "id": "806bfa79-55d9-4aa1-8be1-68f874e20a6b",
      "doc_id": "806bfa79-55d9-4aa1-8be1-68f874e20a6b",
      "updated": 1698405900000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-24",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day33",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day33【概念解析】桥接模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1476725994324-6f6833ea0631?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "806bfa79-55d9-4aa1-8be1-68f874e20a6b",
        "updated": "2023-10-27 19:25:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "806bfa79-55d9-4aa1-8be1-68f874e20a6b"
        }
      ],
      "body": "",
      "realName": "Day33【概念解析】桥接模式",
      "relativePath": "/行业概念/Day33【概念解析】桥接模式.md"
    },
    {
      "id": "ceb6329e-8aef-419b-86ef-1521eed6940b",
      "doc_id": "ceb6329e-8aef-419b-86ef-1521eed6940b",
      "updated": 1698405900000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-23",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day32",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day32【概念解析】原型模式",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/webb3.jpg",
        "urlname": "ceb6329e-8aef-419b-86ef-1521eed6940b",
        "updated": "2023-10-27 19:25:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "ceb6329e-8aef-419b-86ef-1521eed6940b"
        }
      ],
      "body": "",
      "realName": "Day32【概念解析】原型模式",
      "relativePath": "/行业概念/Day32【概念解析】原型模式.md"
    },
    {
      "id": "81f18f9b-bd50-4c7d-add1-5deb2cf9f805",
      "doc_id": "81f18f9b-bd50-4c7d-add1-5deb2cf9f805",
      "updated": 1698405900000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-22",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day31",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day31【概念解析】单例模式",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/nasa_space_shuttle_challenger.jpg",
        "urlname": "81f18f9b-bd50-4c7d-add1-5deb2cf9f805",
        "updated": "2023-10-27 19:25:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "81f18f9b-bd50-4c7d-add1-5deb2cf9f805"
        }
      ],
      "body": "",
      "realName": "Day31【概念解析】单例模式",
      "relativePath": "/行业概念/Day31【概念解析】单例模式.md"
    },
    {
      "id": "920702be-9cb2-471c-af7c-30cc884d5905",
      "doc_id": "920702be-9cb2-471c-af7c-30cc884d5905",
      "updated": 1698405900000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-20",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day29",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day29【概念解析】 抽象工厂方法",
        "status": "Published",
        "cover": "https://image.kuangyichen.com/image/202310201959847.webp",
        "urlname": "920702be-9cb2-471c-af7c-30cc884d5905",
        "updated": "2023-10-27 19:25:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "920702be-9cb2-471c-af7c-30cc884d5905"
        }
      ],
      "body": "",
      "realName": "Day29【概念解析】 抽象工厂方法",
      "relativePath": "/行业概念/Day29【概念解析】 抽象工厂方法.md"
    },
    {
      "id": "56de3f1f-0d9c-4f3a-ace8-0f528afebc8a",
      "doc_id": "56de3f1f-0d9c-4f3a-ace8-0f528afebc8a",
      "updated": 1698405900000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-21",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day30",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day30【概念解析】建造者模式",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/met_georges_seurat_1884.jpg",
        "urlname": "56de3f1f-0d9c-4f3a-ace8-0f528afebc8a",
        "updated": "2023-10-27 19:25:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "56de3f1f-0d9c-4f3a-ace8-0f528afebc8a"
        }
      ],
      "body": "",
      "realName": "Day30【概念解析】建造者模式",
      "relativePath": "/行业概念/Day30【概念解析】建造者模式.md"
    },
    {
      "id": "6aac3d5a-68a3-4b2f-8f26-174f57d4dc9a",
      "doc_id": "6aac3d5a-68a3-4b2f-8f26-174f57d4dc9a",
      "updated": 1699501620000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-18",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day27",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式",
          "必看精选"
        ],
        "summary": "",
        "title": "Day27【概念解析】设计模式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1491895200222-0fc4a4c35e18?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "6aac3d5a-68a3-4b2f-8f26-174f57d4dc9a",
        "updated": "2023-11-09 11:47:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "6aac3d5a-68a3-4b2f-8f26-174f57d4dc9a"
        }
      ],
      "body": "",
      "realName": "Day27【概念解析】设计模式",
      "relativePath": "/行业概念/Day27【概念解析】设计模式.md"
    },
    {
      "id": "ba62195d-3617-4d66-a455-a1121a638af0",
      "doc_id": "ba62195d-3617-4d66-a455-a1121a638af0",
      "updated": 1698405840000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-17",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day26",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day26 【概念解析】 WebP",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/gradients_11.jpg",
        "urlname": "ba62195d-3617-4d66-a455-a1121a638af0",
        "updated": "2023-10-27 19:24:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "ba62195d-3617-4d66-a455-a1121a638af0"
        }
      ],
      "body": "",
      "realName": "Day26 【概念解析】 WebP",
      "relativePath": "/行业概念/Day26 【概念解析】 WebP.md"
    },
    {
      "id": "0af3d43f-8aae-4c4a-b6c8-7266fccd6991",
      "doc_id": "0af3d43f-8aae-4c4a-b6c8-7266fccd6991",
      "updated": 1698405900000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-19",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day28",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day28 【概念解析】工厂方法模式",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/85f6c012-2895-49af-99a2-3e005710adbc/cover_%281%29.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=454a57b0c0901b6044ad80fa0229f49bf871780b9849ddb0184529cb0988c8ee&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "0af3d43f-8aae-4c4a-b6c8-7266fccd6991",
        "updated": "2023-10-27 19:25:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "0af3d43f-8aae-4c4a-b6c8-7266fccd6991"
        }
      ],
      "body": "",
      "realName": "Day28 【概念解析】工厂方法模式",
      "relativePath": "/行业概念/Day28 【概念解析】工厂方法模式.md"
    },
    {
      "id": "28dc31c1-ffaf-4153-b5f8-9b6f3bffae5c",
      "doc_id": "28dc31c1-ffaf-4153-b5f8-9b6f3bffae5c",
      "updated": 1698405840000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-16",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day25",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day25 【概念解析】 桶排序",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1606137039116-f771b914a6c7?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "28dc31c1-ffaf-4153-b5f8-9b6f3bffae5c",
        "updated": "2023-10-27 19:24:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "28dc31c1-ffaf-4153-b5f8-9b6f3bffae5c"
        }
      ],
      "body": "",
      "realName": "Day25 【概念解析】 桶排序",
      "relativePath": "/行业概念/Day25 【概念解析】 桶排序.md"
    },
    {
      "id": "c29c5ea6-2ceb-4d22-9dfe-f6f7ef8cedf8",
      "doc_id": "c29c5ea6-2ceb-4d22-9dfe-f6f7ef8cedf8",
      "updated": 1698405840000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-14",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day23",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day23【概念解析】基数排序",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/met_terracotta_funerary_plaque.jpg",
        "urlname": "c29c5ea6-2ceb-4d22-9dfe-f6f7ef8cedf8",
        "updated": "2023-10-27 19:24:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "c29c5ea6-2ceb-4d22-9dfe-f6f7ef8cedf8"
        }
      ],
      "body": "",
      "realName": "Day23【概念解析】基数排序",
      "relativePath": "/行业概念/Day23【概念解析】基数排序.md"
    },
    {
      "id": "ca17ab8f-41b8-491d-a472-918080e5da7b",
      "doc_id": "ca17ab8f-41b8-491d-a472-918080e5da7b",
      "updated": 1698405840000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-15",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day24",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day24 【概念解析】计数排序",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1523901839036-a3030662f220?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "ca17ab8f-41b8-491d-a472-918080e5da7b",
        "updated": "2023-10-27 19:24:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "ca17ab8f-41b8-491d-a472-918080e5da7b"
        }
      ],
      "body": "",
      "realName": "Day24 【概念解析】计数排序",
      "relativePath": "/行业概念/Day24 【概念解析】计数排序.md"
    },
    {
      "id": "5c3eaa22-d890-40db-b60b-722d40c42cf2",
      "doc_id": "5c3eaa22-d890-40db-b60b-722d40c42cf2",
      "updated": 1698405840000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-13",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day22",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day22【概念解析】归并排序 ",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/woodcuts_15.jpg",
        "urlname": "5c3eaa22-d890-40db-b60b-722d40c42cf2",
        "updated": "2023-10-27 19:24:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "5c3eaa22-d890-40db-b60b-722d40c42cf2"
        }
      ],
      "body": "",
      "realName": "Day22【概念解析】归并排序 ",
      "relativePath": "/行业概念/Day22【概念解析】归并排序 .md"
    },
    {
      "id": "e36f2a4b-93ff-4eb2-8fcc-8090a93501fa",
      "doc_id": "e36f2a4b-93ff-4eb2-8fcc-8090a93501fa",
      "updated": 1740055080000,
      "body_original": "\n`Using picgo/piclist server http://127.0.0.1:36677/upload`\n\n",
      "properties": {
        "password": "12345678",
        "icon": "",
        "date": "2025-02-20",
        "type": "Post",
        "category": "",
        "slug": "test",
        "tags": [],
        "summary": "",
        "title": "picgo使用",
        "status": "Draft",
        "urlname": "e36f2a4b-93ff-4eb2-8fcc-8090a93501fa",
        "updated": "2025-02-20 12:38:00"
      },
      "body": "",
      "realName": "picgo使用",
      "relativePath": "/picgo使用.md"
    },
    {
      "id": "65271d5d-d66e-4534-9bfd-71a8a7e871c0",
      "doc_id": "65271d5d-d66e-4534-9bfd-71a8a7e871c0",
      "updated": 1698405780000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-12",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day21",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day21【概念解析】堆排序",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1547637589-f54c34f5d7a4?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "65271d5d-d66e-4534-9bfd-71a8a7e871c0",
        "updated": "2023-10-27 19:23:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "65271d5d-d66e-4534-9bfd-71a8a7e871c0"
        }
      ],
      "body": "",
      "realName": "Day21【概念解析】堆排序",
      "relativePath": "/行业概念/Day21【概念解析】堆排序.md"
    },
    {
      "id": "56725f3d-b4b1-4e14-8253-d6b580ba850f",
      "doc_id": "56725f3d-b4b1-4e14-8253-d6b580ba850f",
      "updated": 1698405780000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-11",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day20",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day20【概念解析】希尔排序",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/met_the_unicorn_in_captivity.jpg",
        "urlname": "56725f3d-b4b1-4e14-8253-d6b580ba850f",
        "updated": "2023-10-27 19:23:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "56725f3d-b4b1-4e14-8253-d6b580ba850f"
        }
      ],
      "body": "",
      "realName": "Day20【概念解析】希尔排序",
      "relativePath": "/行业概念/Day20【概念解析】希尔排序.md"
    },
    {
      "id": "9ea65815-3473-42f7-a844-341198010d9d",
      "doc_id": "9ea65815-3473-42f7-a844-341198010d9d",
      "updated": 1701346440000,
      "body_original": "\n> 📌 **运动**：18日  \n> **学习**：14日  \n> **日记**：5篇  \n> **做饭**：4日  \n> 读书：两本\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/7db6bdf0-b785-484f-a1c0-e83e51612a61/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231130%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231130T121633Z&X-Amz-Expires=3600&X-Amz-Signature=16f81461e1484f910315e5a6c1aa5524b31edf492877ec05799409b75e36d5be&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n整体来看，9月的完成度还是不错的，在运动、学习、生活、自省上都完成的不错。另外，还开启了100日行业概念的打卡活动，值得表扬！！\n\n\n另外，博客从8月底开始，已经初步具备记录文章日志的功能的功能，各方面都齐全，继续加油。\n\n\n[bookmark](https://www.kuangyichen.com)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-08",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202309",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2023年9月",
        "status": "Published",
        "urlname": "9ea65815-3473-42f7-a844-341198010d9d",
        "updated": "2023-11-30 12:14:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "9ea65815-3473-42f7-a844-341198010d9d"
        }
      ],
      "body": "",
      "realName": "[阶段小结]2023年9月",
      "relativePath": "/三省吾身/[阶段小结]2023年9月.md"
    },
    {
      "id": "38552ee5-4e35-4caa-a61c-ebb87296bf05",
      "doc_id": "38552ee5-4e35-4caa-a61c-ebb87296bf05",
      "updated": 1698405780000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-10",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day19",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day19 【概念解析】选择排序",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1600074169098-16a54d791d0d?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "38552ee5-4e35-4caa-a61c-ebb87296bf05",
        "updated": "2023-10-27 19:23:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "38552ee5-4e35-4caa-a61c-ebb87296bf05"
        }
      ],
      "body": "",
      "realName": "Day19 【概念解析】选择排序",
      "relativePath": "/行业概念/Day19 【概念解析】选择排序.md"
    },
    {
      "id": "f1bbd1b1-e283-40f1-b1de-5ed1007f13ca",
      "doc_id": "f1bbd1b1-e283-40f1-b1de-5ed1007f13ca",
      "updated": 1698405780000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-09",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day18",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day18【概念解析】插入排序",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1544383835-bda2bc66a55d?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "f1bbd1b1-e283-40f1-b1de-5ed1007f13ca",
        "updated": "2023-10-27 19:23:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "f1bbd1b1-e283-40f1-b1de-5ed1007f13ca"
        }
      ],
      "body": "",
      "realName": "Day18【概念解析】插入排序",
      "relativePath": "/行业概念/Day18【概念解析】插入排序.md"
    },
    {
      "id": "08ccfe77-d87f-4674-b6bb-101e5b30a91b",
      "doc_id": "08ccfe77-d87f-4674-b6bb-101e5b30a91b",
      "updated": 1698405780000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-08",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day17",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day17【概念解析】快速排序",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/met_william_turner_1835.jpg",
        "urlname": "08ccfe77-d87f-4674-b6bb-101e5b30a91b",
        "updated": "2023-10-27 19:23:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "08ccfe77-d87f-4674-b6bb-101e5b30a91b"
        }
      ],
      "body": "",
      "realName": "Day17【概念解析】快速排序",
      "relativePath": "/行业概念/Day17【概念解析】快速排序.md"
    },
    {
      "id": "a0d4b94c-8e73-4eb0-872b-4a76f3fc18cf",
      "doc_id": "a0d4b94c-8e73-4eb0-872b-4a76f3fc18cf",
      "updated": 1698405780000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-07",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day16",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day16【概念解析】冒泡排序",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1612855190135-bdbacda2a2b5?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "a0d4b94c-8e73-4eb0-872b-4a76f3fc18cf",
        "updated": "2023-10-27 19:23:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "a0d4b94c-8e73-4eb0-872b-4a76f3fc18cf"
        }
      ],
      "body": "",
      "realName": "Day16【概念解析】冒泡排序",
      "relativePath": "/行业概念/Day16【概念解析】冒泡排序.md"
    },
    {
      "id": "a085ecb4-0199-4862-a75b-752996e2efd1",
      "doc_id": "a085ecb4-0199-4862-a75b-752996e2efd1",
      "updated": 1698405720000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-05",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day14",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day14【概念解析】数据库",
        "status": "Published",
        "cover": "https://source.unsplash.com/random/720x480/?encryption",
        "urlname": "a085ecb4-0199-4862-a75b-752996e2efd1",
        "updated": "2023-10-27 19:22:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "a085ecb4-0199-4862-a75b-752996e2efd1"
        }
      ],
      "body": "",
      "realName": "Day14【概念解析】数据库",
      "relativePath": "/行业概念/Day14【概念解析】数据库.md"
    },
    {
      "id": "c95a471b-d304-47cc-938c-c918d17ba275",
      "doc_id": "c95a471b-d304-47cc-938c-c918d17ba275",
      "updated": 1699501500000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-06",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day15",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法",
          "必看精选"
        ],
        "summary": "",
        "title": "Day15【概念解析】排序算法",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/woodcuts_4.jpg",
        "urlname": "c95a471b-d304-47cc-938c-c918d17ba275",
        "updated": "2023-11-09 11:45:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "c95a471b-d304-47cc-938c-c918d17ba275"
        }
      ],
      "body": "",
      "realName": "Day15【概念解析】排序算法",
      "relativePath": "/行业概念/Day15【概念解析】排序算法.md"
    },
    {
      "id": "20c14a1e-a7ae-4a74-832c-974cdd8c1032",
      "doc_id": "20c14a1e-a7ae-4a74-832c-974cdd8c1032",
      "updated": 1698405720000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-02",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day11",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day11【概念解析】算术表达式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1564867317243-9219c75d28cf?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "20c14a1e-a7ae-4a74-832c-974cdd8c1032",
        "updated": "2023-10-27 19:22:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "20c14a1e-a7ae-4a74-832c-974cdd8c1032"
        }
      ],
      "body": "",
      "realName": "Day11【概念解析】算术表达式",
      "relativePath": "/行业概念/Day11【概念解析】算术表达式.md"
    },
    {
      "id": "5ff18cd3-f26b-47a8-b675-2c057c3bf1f9",
      "doc_id": "5ff18cd3-f26b-47a8-b675-2c057c3bf1f9",
      "updated": 1698405720000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-04",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day13",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day13【概念解析】操作系统",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/met_john_singer_sargent_morocco.jpg",
        "urlname": "5ff18cd3-f26b-47a8-b675-2c057c3bf1f9",
        "updated": "2023-10-27 19:22:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "5ff18cd3-f26b-47a8-b675-2c057c3bf1f9"
        }
      ],
      "body": "",
      "realName": "Day13【概念解析】操作系统",
      "relativePath": "/行业概念/Day13【概念解析】操作系统.md"
    },
    {
      "id": "f30b2a8c-884f-4e2d-9e67-aa4342c76fce",
      "doc_id": "f30b2a8c-884f-4e2d-9e67-aa4342c76fce",
      "updated": 1740053820000,
      "body_original": "\n# 整理定义\n\n\n| 来源                                                                                                                                       | 定义                                                                                                                                 |\n| ---------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| [Project Management Institute (PMI)](https://www.pmi.org/learning/library/software-project-management-complexity-6770)                   | 软件项目管理包括了对软件开发过程中的资源、时间、质量和其他因素的计划、组织、监控和控制。这是为了实现特定的软件产品、服务或结果的成功交付。                                                              |\n| [Techopedia](https://www.techopedia.com/definition/14004/software-project-management)                                                    | 软件项目管理是使用软件应用程序来组织、计划和管理软件开发项目的过程。它包括了项目的估计、调度、需求和功能管理、资源分配、软件开发、项目风险管理等。                                                          |\n| [Association for Project Management (APM)](https://www.apm.org.uk/body-of-knowledge/delivery/contexts/programme-and-project-management/) | 软件项目管理是指在软件开发过程中，对项目的各个阶段进行计划、协调、领导和控制的过程，以实现满足用户需求的软件产品或服务的交付。                                                                    |\n| Wikipedia                                                                                                                                | 软件项目管理是软件工程的一个子领域，其中包括了对软件项目的计划、执行、监控和控制，以实现满足用户需求的软件产品或服务的交付。                                                                     |\n| [软件项目管理 - MBA智库百科 (mbalib.com)](https://wiki.mbalib.com/wiki/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86)                     | 所谓软件项目管理就是为了使软件项目能够按照预定的成本、进度、质量顺利完成，而对人员（People）、产品（Product）、过程（Process）和项目（Project）进行分析和管理的活动。软件项目管理先于任何技术活动之前开始，并且贯穿于软件的整个生命周期。 |\n\n\n以上定义可能会有所不同，但主要的概念是一致的：软件项目管理是对软件开发过程中的各个阶段进行计划、组织、监控和控制，以实现满足用户需求的软件产品或服务的交付。\n\n\n**使用ChatGPT进行介绍下**\n\n\n> 📌 **From ChatGPT**  \n> **问题：介绍下软件项目管理，按照1、什么是软件项目管理；2、历史发展情况；3、主要内容有哪些；4、为什么出现；5、总结**  \n>   \n> 1. 什么是软件项目管理：  \n> 软件项目管理是一种使用特定的管理技术和方法来计划、组织和控制软件开发过程的活动。它涉及到需求分析、资源分配、时间管理、风险管理、质量控制等多个方面，目标是在预定的时间、预算和质量标准内完成软件项目。  \n>   \n> 2. 历史发展情况：  \n> 软件项目管理的起源可以追溯到20世纪50年代和60年代，当时计算机技术开始兴起，人们开始意识到需要一种系统的方法来管理复杂的软件开发过程。随着时间的推移，软件项目管理已经发展成为一个成熟的领域，有许多已经被广泛接受的最佳实践，如敏捷开发、Scrum、极限编程等。  \n>   \n> 3. 主要内容有哪些：  \n> 软件项目管理主要包括以下几个方面：需求管理（明确软件需要做什么），项目计划（确定如何完成这些需求），风险管理（识别和应对可能影响项目的风险），质量管理（确保软件满足预定的质量标准），人力资源管理（组织和管理项目团队），以及沟通管理（确保信息在项目团队和利益相关者之间有效地传递）。  \n>   \n> 4. 为什么出现：  \n> 软件项目管理之所以出现，主要是因为软件开发是一个复杂的过程，涉及到许多不确定性和风险。没有有效的项目管理，软件项目可能会超出预算，延期，甚至失败。通过使用项目管理的方法和技术，我们可以更好地控制这些风险，提高软件项目的成功率。  \n>   \n> 5. 总结：  \n> 总的来说，软件项目管理是一个关键的领域，它帮助我们更有效地开发和交付高质量的软件。随着技术的发展，软件项目管理也在不断进化，以适应新的挑战和机遇。无论是在大型企业还是在小型创业公司，良好的软件项目管理都是成功的关键。\n\n\n# 复述展开\n\n\n## 软件项目管理相关的内容\n\n\n### 软件项目管理涉及的范围\n\n- 人员：人员是软件工程项日的基本要素和关键因素，在对人员进行组织时，有必要考虑参与软件过程 (及每一个软件项目)的人员类型。\n- 产品：在进行项日计划之前，应该首先进行项目定义，也就是定义项目范用，其中包括建立产品的目的和范围、 可选的解决方案、技术或管理的约束等\n- 过程：传统的项目管理有大项目、项目、活动、工作包、工作单元等多种分解层次，对于软件项目来说，强调的是对其进行**过程控制**，通常将项目分解为任务、子任务等，其分解准则是基于软件工程的过程\n- 项目：进行有计划和可控制的软件项日是管理复杂性的一种方式\n\n### 软件项目估算\n\n\n软体项目估算软件项目估算涉及人、技术、环境等多种因素，因此很难在项目完成前准确地估算出开发软件所需的成本、持续时间和工作量。因此，需要一些方法和技术来支持项目的佔算，常用的估算方法有下列3种：\n\n1. 基于己经完成的类似项目进行估算。这是一种常用的也是有效的估算方法。\n2. 基于分解技术进行估算。分解技术包括问题分解和过程分解。问题分解是将一个复杂问题分解成若干个小问题，通过对小问题的佔算得到复杂问题的佔算。过程分解是指先根据软件开发过程中的活动(分析、设计、编码、测试等)进行估算，然后得到整个项目的估算值。\n3. 基于经验估算模型的估算。典型的经验估算模型有IBM估算模型、CoCoMo模型和Putnam模型。\n\n### 进度管理\n\n\n软件项目进度管理的目的是确保软件项目在规定的时间内按期完成。\n\n\n**松弛时间** (Slack Time )，表示在不影响整个工期的前提下完成该任务有多少机动余地。\n\n\n**关键路径**：关键路径是从项目开始到结束，最早开始时间和最晚开始时间相同的任务序列。\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/fc6289aa-d1a6-4255-8a54-572db6f7ce40/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466XFWLPTHS%2F20250220%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250220T122040Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCfv4XHh5b3FVGGB8ysDwsthWQ%2FfSq2zphab%2FAwdoR3eQIhALeYDbZwjVaBCYyw4iUuQkilu%2BQckSxHKlO%2FZ5LitrQ9KogECL3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQABoMNjM3NDIzMTgzODA1IgwRG2G8kBkXlHht5u8q3AP8ZPph%2BevPKa1Yzaqx3K8jJUbzPD8Ws6WRPfPOWLbCY%2B%2BZtx1Rx56SkKdK15Ca5u3OGz%2BiqMKM9VSXm5NGqhHEny12pRNNZkHv450%2FT%2ByJ0vRs%2Fh%2Fxp2cIm9EW%2FommAKblkNzmtAcgzyqOMw22IGul9DYHt0vgkmK%2FDYdRKB1rFUepZfN0GEayT87MvSxZCg33LE8SEqg3jdaLh8OFf8kwP8gBPpMfU%2BL0LkxgTpV24a7qeDd2d8LhSZ2f8%2FMhtL7zx7HNRMf4nFGZRSe%2Bfy%2B9%2BMf4Gq%2BlHjWhllXTvURW8ZlqFbF%2BPUYF7gt7if3sqBpj%2BkRz5h60xNmIIwjTC6Mg4ein1A3%2FKteYM5aFZJPRwnac1VwukIMfixNKEDrbDegnR5Gc0PQj30emP6eJWrgO4tPrHnH2CtB3O1BBQsKnAegh5Dl3dfnuasufd8DIdKuw9R38Waerb4AHpvRiIH%2B6hD4lLA3dtK6IF8kT0L9i8uKVidHn9N7rcHpFlQePG8d%2BXOGpKG47awQdOtdtPkZxEdM6vmGYdDY9E5Q%2FzKmh5jyev2ETCPCQRoJ8CeFlvF08bzkzyaBeCPpwEu6cgbZ1DNcY2YWQV6I%2Fg4wfhhO6J%2BTy2N0lpu1nJoD6%2FTDsrNy9BjqkAXvRmhN4RMUAI2bdx2cWLHbP27EwGmCc9jYbsGbalL7xBJEiXDh7XCeFJF7hk%2BixrSeXKx%2F5JKbZkUcWc46flW%2BmpvVtk1wS1JbcKUQqyggTSV4NWfsAixZ%2FmOFHMBvOpUMbp97%2FE%2Bp88hfw0umjg4GgY5P7nT%2FwvDK5HqI7YGIeuFopumTTv%2Fu%2FGZiB77fdRtH2YQv8eIfc5M8L1E6dXKeGjIbS&X-Amz-Signature=ee8313e76d12af3b53d645db5c40fe7757cdd8506ec38c1cbba33d731382d462&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\nPERT 图不仅给出了每个任务的开始时间、结束时间和完成该任务所需的时间，还给出了任务之间的关系，即哪些任务完成后才能开始另外一些任务，以及如期完成整个工程的关键路 径。图中的松弛时间则反映了完成某些任务时可以推迟其开始时间或延长其所需完成的时间。 但是，PERT图不能反映任务之间的并行关系。\n\n\n### 软件项目的组织\n\n\n开发组织采用什么形式组织，不仅要考虑软件项目的特点，还需要考虑参与人员的素质\n\n\n### 软件配置管理\n\n\n軟件配置管理(Software Configure Management, SCM) 用于整个軟件工程辻程。其主要目标是标识变更;控制变更;确保变更正确地实现;报告有关变更。SCM是 一组管理整个软件生存周期中各阶段变更的活动。\n\n\n### 风险管理\n\n\n一般认为软件风险包含两个特性:不确定性和损失。不确定性是指风险可能发生也可能不发生；损失是指如果风险发生，就会产生悉性后果。在进行风险分析时，重要的是量化每个风险的不确定程度和损失程度。为了实现这一点，必须考虑不同类型的风险。\n项目风险威胁到项目计划。也就是说，如果项目风险发生，就有可能拖延项目的进度和增加项目的成本。项目风险是指预算、进度、人员(聘用职员及组织)、资源、利益相关者、需求等方面的潜在问题以及它们对软件项目的影响。项目复杂度、规模及结构不确定性也属于项目风险因素。\n技术风险威胁到要开发软件的质量及交付时间。如果技术风险发生，开发工作就可能变得很困难或根本不可能。技术风险是指设计、实现、接又、验证和维护等方面的潜在问题。此外，规格说明的歧义性、技术的不确定性、技术陈旧以及“前沿”技术也是技术风险因素。技术风险的发生是因为问题比我们所设想的更加难以解决。\n\n\n【上述内容摘自《软件设计师》（第5版）】\n\n\n# 理解体会\n\n\n1、软件项目管理是软件开发过程作为一个工作内容时，对其作为一个完整项目进行过程管理。软件项目管理的目的是为了规避风险，提高效率，完成软件过程开发。\n\n\n2、在软件工程中，项目管理也是一个非常关键的领域，在软件开发过程中，需要有一个项目经理（Project Manager）也就是PM来对整个开发流程进行管理，保障项目能够在预期过程中完成。PM在团队中的话语权还是比较大的，因为TA需要对整个项目的进度进行把控和负责，TA可以按照既定的计划进行人员、项目、过程、产品进行调整。例如，如果项目遇到难点，PM就可以调整人力来进行攻克；如果在开发过程中，面临延期的问题，那么PM有权在中期进行人员的增加或者通过加班的方式来加快进度。\n\n\n> 📌 **快速跳转链接**  \n> <details>  \n>   <summary>【概念解析】启动</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/start-industry-100-words)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 1 - 10</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day1)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day2)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day3)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day4)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day5)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day6)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day7)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day8)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day9)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day10)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 11 - 20</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day11)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day12)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day13)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day14)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day15)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day16)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day17)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day18)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day19)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day20)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 21 - 30</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day21)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day22)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day23)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day24)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day25)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day26)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day27)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day28)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day29)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day30)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 31 - 40</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day31)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day32)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day33)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day34)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day35)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day36)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day37)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day38)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day39)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day40)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 41 - 50</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day41)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day42)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day43)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day44)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day45)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day46)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day47)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day48)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day49)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day50)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 51 - 60</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day51)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day52)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day53)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day54)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day55)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day56)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day57)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day58)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day59)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day60)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 61 - 70</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day61)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day62)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day63)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day64)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day65)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day66)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day67)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day68)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day69)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day70)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 71 - 80</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day71)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day72)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day73)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day74)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day75)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day76)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day77)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day78)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day79)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day80)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 81 - 90</summary>  \n>   \n>   \n>   \n>   </details>\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-03",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day12",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day12【概念解析】软件项目管理",
        "status": "Published",
        "urlname": "f30b2a8c-884f-4e2d-9e67-aa4342c76fce",
        "updated": "2025-02-20 12:17:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "f30b2a8c-884f-4e2d-9e67-aa4342c76fce"
        }
      ],
      "body": "",
      "realName": "Day12【概念解析】软件项目管理",
      "relativePath": "/行业概念/Day12【概念解析】软件项目管理.md"
    },
    {
      "id": "c22e380b-44ad-4c07-a4ca-c61d0167be0e",
      "doc_id": "c22e380b-44ad-4c07-a4ca-c61d0167be0e",
      "updated": 1698405600000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-30",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day9",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day9 【概念解析】 系统测试",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1487058792275-0ad4aaf24ca7?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "c22e380b-44ad-4c07-a4ca-c61d0167be0e",
        "updated": "2023-10-27 19:20:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "c22e380b-44ad-4c07-a4ca-c61d0167be0e"
        }
      ],
      "body": "",
      "realName": "Day9 【概念解析】 系统测试",
      "relativePath": "/行业概念/Day9 【概念解析】 系统测试.md"
    },
    {
      "id": "bbad1c5d-2fe9-431e-92c3-5e93decd25e0",
      "doc_id": "bbad1c5d-2fe9-431e-92c3-5e93decd25e0",
      "updated": 1698405720000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-01",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day10",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day10【概念解析】数据结构",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/nasa_new_york_city_grid.jpg",
        "urlname": "bbad1c5d-2fe9-431e-92c3-5e93decd25e0",
        "updated": "2023-10-27 19:22:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "bbad1c5d-2fe9-431e-92c3-5e93decd25e0"
        }
      ],
      "body": "",
      "realName": "Day10【概念解析】数据结构",
      "relativePath": "/行业概念/Day10【概念解析】数据结构.md"
    },
    {
      "id": "1417da90-91b0-4d67-936d-3c41d7154689",
      "doc_id": "1417da90-91b0-4d67-936d-3c41d7154689",
      "updated": 1698395880000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-29",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day8",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day8 【概念解析】 敏捷开发",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/webb1.jpg",
        "urlname": "1417da90-91b0-4d67-936d-3c41d7154689",
        "updated": "2023-10-27 16:38:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "1417da90-91b0-4d67-936d-3c41d7154689"
        }
      ],
      "body": "",
      "realName": "Day8 【概念解析】 敏捷开发",
      "relativePath": "/行业概念/Day8 【概念解析】 敏捷开发.md"
    },
    {
      "id": "9bc2c552-6da8-4099-9a82-e3f0e680cb3c",
      "doc_id": "9bc2c552-6da8-4099-9a82-e3f0e680cb3c",
      "updated": 1698395880000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-27",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day6",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day6 【概念解析】 瀑布模型",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/woodcuts_1.jpg",
        "urlname": "9bc2c552-6da8-4099-9a82-e3f0e680cb3c",
        "updated": "2023-10-27 16:38:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "9bc2c552-6da8-4099-9a82-e3f0e680cb3c"
        }
      ],
      "body": "",
      "realName": "Day6 【概念解析】 瀑布模型",
      "relativePath": "/行业概念/Day6 【概念解析】 瀑布模型.md"
    },
    {
      "id": "5b80f37f-040b-457f-99c1-ea7d204f41b8",
      "doc_id": "5b80f37f-040b-457f-99c1-ea7d204f41b8",
      "updated": 1698395880000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-28",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day7",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day7 【概念解析】 需求分析",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1555929583-b78e544368d3?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "5b80f37f-040b-457f-99c1-ea7d204f41b8",
        "updated": "2023-10-27 16:38:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "5b80f37f-040b-457f-99c1-ea7d204f41b8"
        }
      ],
      "body": "",
      "realName": "Day7 【概念解析】 需求分析",
      "relativePath": "/行业概念/Day7 【概念解析】 需求分析.md"
    },
    {
      "id": "8fb390f9-0bd2-4b38-8716-3cd5c4438092",
      "doc_id": "8fb390f9-0bd2-4b38-8716-3cd5c4438092",
      "updated": 1698395820000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-25",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day4",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day4 【概念解析】 软件工程",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/met_vincent_van_gogh_oleanders.jpg",
        "urlname": "8fb390f9-0bd2-4b38-8716-3cd5c4438092",
        "updated": "2023-10-27 16:37:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "8fb390f9-0bd2-4b38-8716-3cd5c4438092"
        }
      ],
      "body": "",
      "realName": "Day4 【概念解析】 软件工程",
      "relativePath": "/行业概念/Day4 【概念解析】 软件工程.md"
    },
    {
      "id": "25d2c91d-60c4-4fc9-94e6-a8d405fb51f1",
      "doc_id": "25d2c91d-60c4-4fc9-94e6-a8d405fb51f1",
      "updated": 1698395820000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-23",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day2",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day2 【概念解析】软件",
        "status": "Published",
        "cover": "https://source.unsplash.com/random/720x480/?encryption",
        "urlname": "25d2c91d-60c4-4fc9-94e6-a8d405fb51f1",
        "updated": "2023-10-27 16:37:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "25d2c91d-60c4-4fc9-94e6-a8d405fb51f1"
        }
      ],
      "body": "",
      "realName": "Day2 【概念解析】软件",
      "relativePath": "/行业概念/Day2 【概念解析】软件.md"
    },
    {
      "id": "3d82901e-d200-40cf-a4fb-79470d54aa99",
      "doc_id": "3d82901e-d200-40cf-a4fb-79470d54aa99",
      "updated": 1698395820000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-24",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day3",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day3 【概念解析】软件开发",
        "status": "Published",
        "cover": "https://source.unsplash.com/random/720x480/?encryption",
        "urlname": "3d82901e-d200-40cf-a4fb-79470d54aa99",
        "updated": "2023-10-27 16:37:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "3d82901e-d200-40cf-a4fb-79470d54aa99"
        }
      ],
      "body": "",
      "realName": "Day3 【概念解析】软件开发",
      "relativePath": "/行业概念/Day3 【概念解析】软件开发.md"
    },
    {
      "id": "86f45b95-9bbe-49de-a196-b631f6e8f3f4",
      "doc_id": "86f45b95-9bbe-49de-a196-b631f6e8f3f4",
      "updated": 1698395820000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-26",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day5",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day5 【概念解析】软件过程模型",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/rijksmuseum_vermeer_the_milkmaid.jpg",
        "urlname": "86f45b95-9bbe-49de-a196-b631f6e8f3f4",
        "updated": "2023-10-27 16:37:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "86f45b95-9bbe-49de-a196-b631f6e8f3f4"
        }
      ],
      "body": "",
      "realName": "Day5 【概念解析】软件过程模型",
      "relativePath": "/行业概念/Day5 【概念解析】软件过程模型.md"
    },
    {
      "id": "228c4a77-7031-4d7b-9fbc-7197d972d716",
      "doc_id": "228c4a77-7031-4d7b-9fbc-7197d972d716",
      "updated": 1702347900000,
      "body_original": "\n# 😃说在前面\n\n\n> 本文记录”写100个行业概念“打卡活动。\n\n\n> 🏅 为什么要参加这个活动呢？起源于S老师的”写100个行业概念“活动。之前一直有关注Scalers老师的公众号，也阅读完了《学习的学问》这本书，感叹于S老师学习成长会的魅力，决定先让自己跟着这个活动坚持个一百天先。\n\n\n后续，本文将会与100个概念打卡持续滚动，更新活动的感受，加油💪🏻！！！\n\n\n# 🤔2023.09.21 \n\n\n在做这个决定时，也是思索甚久，终于在9.21日，也就是活动的前夕决定开始这个打卡活动。坚持100天，不论结果如何，都是一种胜利。另外，也可以借助这个机会，重新梳理自己所在行业的概念，以这个契机去加深对于行业的理解，从而突破瓶颈。再则，在活动过程中，也试着结交一些志同道合的好友，在打卡的坚持路上结伴砥砺前行。最后，预祝自己能够在2023年最后的**100天**内给自己写上一份完美的画卷。\n\n\n> **一、为什么要写100个行业概念？**\n\n\n\t**（1）短期内快速了解一个行业**\n\n\n\t了解一个行业，最快上手的方式是抓概念。如果你能抓住100个行业核心概念，那你能快速获得一个行业的认识。通过了解行业，建立商业认知，这是事业成功的关键因素。\n\n\n\t**（2）加深对已有行业的理解**\n\n\n\t如果你想在现有的行业里持续深耕，达到从一线到管理层的跃迁，那你需要把专业领域里的知识研究透彻。而梳理本专业领域的100个概念，就是一个好的开始。\n\n\n\t**（3）用“输出倒逼输入”训练表达力**\n\n\n\t有的概念你以前不太理解，但是写出来，就会倒逼自己去思考和确认。有的概念，你以为你理解，当你用自己的话写出来，会发现还有很多盲点。\n\n\n[bookmark](https://mp.weixin.qq.com/s/6IQ909ygIUTbBokovs6F2A)\n\n\n# 🤔2023.10.03 活动启动10天感悟\n\n\n> 💡 **10天启动感悟**  \n> 1、自律很重要，他律也很重要。坚持10天下来，一方面靠的是刚刚接触这个任务时的新鲜感，另一方面，还有很多一起的小伙伴在结伴前行。有每天早晨6点就发出打卡的叶袂同学，还有5天后才加入任务的小伙伴，每天两个，也是很有毅力啊。  \n>   \n> 2、一日之计在于晨。尝试过在早上、中午、晚上完成每日的任务。最终发现，在早上完成的话，一天都会比较轻松，不会纠结于是否完成任务，也不担心会被其他事情耽搁而只能熬到凌晨才打卡。另外，早起完成任务有助于养成早起习惯，一举多得。  \n>   \n> 3、这次100日行动，因为在8月的时候，刚刚搭建好自己的新博客，也迁移了不少之前的博文，这次也决定将打卡的所见所得沉淀到自己的博客网站中，作为对自己的鞭笞和激励。这两个结合后，慢慢摸索出一种比较有效的方式，几乎都能够很快地完成每日的任务并且在博客上自动更新内容，目前满满的成就感。  \n>   \n> 4、一个人走路，走得快；一群人一起走，走的远。除了在自己完成任务的过程中，也会抽空学习下其他小伙伴的打卡内容。比如像中医、瑜伽、法律等等概念，也是一种纵向拓展学习。\n\n\n# 快捷链接\n\n\n> 📌 **快速跳转链接**  \n> <details>  \n>   <summary>【概念解析】启动</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/start-industry-100-words)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 1 - 10</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day1)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day2)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day3)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day4)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day5)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day6)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day7)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day8)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day9)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day10)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 11 - 20</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day11)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day12)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day13)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day14)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day15)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day16)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day17)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day18)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day19)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day20)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 21 - 30</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day21)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day22)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day23)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day24)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day25)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day26)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day27)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day28)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day29)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day30)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 31 - 40</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day31)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day32)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day33)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day34)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day35)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day36)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day37)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day38)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day39)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day40)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 41 - 50</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day41)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day42)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day43)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day44)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day45)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day46)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day47)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day48)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day49)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day50)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 51 - 60</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day51)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day52)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day53)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day54)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day55)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day56)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day57)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day58)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day59)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day60)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 61 - 70</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day61)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day62)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day63)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day64)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day65)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day66)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day67)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day68)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day69)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day70)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 71 - 80</summary>  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day71)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day72)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day73)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day74)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day75)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day76)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day77)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day78)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day79)  \n>   \n>   \n> [bookmark](https://kuangyichen.com/article/industry-day80)  \n>   \n>   \n>   \n>   </details>  \n>   \n> <details>  \n>   <summary>【概念解析】Day 81 - 90</summary>  \n>   \n>   \n>   \n>   </details>\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-22",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "必看精选"
        ],
        "summary": "为什么要参加这个活动呢？起源于S老师的”写100个行业概念“活动。之前一直有关注Scalers老师的公众号，也阅读完了《学习的学问》这本书，感叹于S老师学习成长会的魅力，决定先让自己跟着这个活动坚持个一百天先。",
        "title": "【活动打卡】写100个行业概念",
        "status": "Published",
        "urlname": "228c4a77-7031-4d7b-9fbc-7197d972d716",
        "updated": "2023-12-12 02:25:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "228c4a77-7031-4d7b-9fbc-7197d972d716"
        }
      ],
      "body": "",
      "realName": "【活动打卡】写100个行业概念",
      "relativePath": "/行业概念/【活动打卡】写100个行业概念.md"
    },
    {
      "id": "1e7264cb-eba4-424d-821e-8b943412fb30",
      "doc_id": "1e7264cb-eba4-424d-821e-8b943412fb30",
      "updated": 1695699300000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-17",
        "type": "Post",
        "category": "心情随笔",
        "slug": "westlife-wide-dream-in-shenzhen",
        "tags": [
          "随笔"
        ],
        "summary": "9.17，19:30-21:15，西城男孩【四海逐梦】深圳站演唱会完美谢幕。Westlife，从青葱岁月的男孩到如今的【老男孩】，他们用激情与热爱点燃了整个深圳湾春茧体育中心，带给我们青春与美好的回忆。青春不老，我们不散。愿我们永远年轻，永远热泪盈眶。",
        "title": "Westlife深圳站演唱会记录",
        "status": "Published",
        "cover": "https://source.unsplash.com/random/720x480/?encryption",
        "urlname": "1e7264cb-eba4-424d-821e-8b943412fb30",
        "updated": "2023-09-26 11:35:00"
      },
      "catalog": [
        {
          "title": "心情随笔",
          "doc_id": "1e7264cb-eba4-424d-821e-8b943412fb30"
        }
      ],
      "body": "",
      "realName": "Westlife深圳站演唱会记录",
      "relativePath": "/心情随笔/Westlife深圳站演唱会记录.md"
    },
    {
      "id": "14251711-a6a5-432b-b908-a40ff5b11c93",
      "doc_id": "14251711-a6a5-432b-b908-a40ff5b11c93",
      "updated": 1695714720000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-16",
        "type": "Post",
        "category": "读书笔记",
        "slug": "naval-ravikant-book",
        "tags": [
          "思考",
          "文字",
          "必看精选"
        ],
        "summary": "纳瓦尔宝典的核心理念是：每个人都有能力和可能性创造自己的财富和幸福。他强调，财富的创造不仅仅是为了物质的富足，更重要的是实现个人的自由和满足。他认为，真正的幸福来自于内心的平静和满足，而不是外在的成就和认可。",
        "title": "《纳瓦尔宝典》自我救赎篇",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/gradients_11.jpg",
        "urlname": "14251711-a6a5-432b-b908-a40ff5b11c93",
        "updated": "2023-09-26 15:52:00"
      },
      "catalog": [
        {
          "title": "读书笔记",
          "doc_id": "14251711-a6a5-432b-b908-a40ff5b11c93"
        }
      ],
      "body": "",
      "realName": "《纳瓦尔宝典》自我救赎篇",
      "relativePath": "/读书笔记/《纳瓦尔宝典》自我救赎篇.md"
    },
    {
      "id": "03655767-2fb4-4bb0-b665-1100c6310e5f",
      "doc_id": "03655767-2fb4-4bb0-b665-1100c6310e5f",
      "updated": 1698395760000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-22",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day1",
        "tags": [
          "行业概念",
          "思考",
          "文字"
        ],
        "summary": "",
        "title": "Day1 【概念解析】行业",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/nasa_space_shuttle_columbia.jpg",
        "urlname": "03655767-2fb4-4bb0-b665-1100c6310e5f",
        "updated": "2023-10-27 16:36:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "03655767-2fb4-4bb0-b665-1100c6310e5f"
        }
      ],
      "body": "",
      "realName": "Day1 【概念解析】行业",
      "relativePath": "/行业概念/Day1 【概念解析】行业.md"
    },
    {
      "id": "97a0a1f0-5883-4814-a95b-50a11ed0b72f",
      "doc_id": "97a0a1f0-5883-4814-a95b-50a11ed0b72f",
      "updated": 1740054960000,
      "body_original": "\n> 😀 这里写文章的前言：  \n> 一个简单的开头,简述这篇文章讨论的问题、目标、人物、背景是什么？并简述你给出的答案。  \n> 可以说说你的故事：阻碍、努力、结果成果，意外与转折。\n\n\n# 📝 主旨内容\n\n\n## 观点1\n\n\n> 引用的话语\n\n\n## 观点2\n\n\n> 引用的话语\n\n\n# 🤗 总结归纳\n\n\n总结文章的内容\n\n\n# 📎 参考文章\n\n- 一些引用\n- 引用文章\n\n> 💡 有关Notion安装或者使用上的问题，欢迎您在底部评论区留言，一起交流~\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-08-29 02:37:00",
        "type": "Post",
        "category": "技术分享",
        "slug": "test",
        "tags": [
          "开发",
          "建站",
          "工具"
        ],
        "summary": "",
        "title": "如何为网站添加ackee",
        "status": "Draft",
        "urlname": "97a0a1f0-5883-4814-a95b-50a11ed0b72f",
        "updated": "2025-02-20 12:36:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "97a0a1f0-5883-4814-a95b-50a11ed0b72f"
        }
      ],
      "body": "",
      "realName": "如何为网站添加ackee",
      "relativePath": "/技术分享/如何为网站添加ackee.md"
    },
    {
      "id": "fabcf1a5-9686-4a46-80e6-2fc417f52d76",
      "doc_id": "fabcf1a5-9686-4a46-80e6-2fc417f52d76",
      "updated": 1740055500000,
      "body_original": "\n> 😀 这里写文章的前言：  \n> 一个简单的开头,简述这篇文章讨论的问题、目标、人物、背景是什么？并简述你给出的答案。  \n> 可以说说你的故事：阻碍、努力、结果成果，意外与转折。\n\n\n# 📝 主旨内容\n\n\n## 观点1\n\n\n> 引用的话语\n\n\n## 观点2\n\n\n> 引用的话语\n\n\n# 🤗 总结归纳\n\n\n总结文章的内容\n\n\n# 📎 参考文章\n\n- 一些引用\n- 引用文章\n\n> 💡 有关Notion安装或者使用上的问题，欢迎您在底部评论区留言，一起交流~\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-07-29",
        "type": "Post",
        "category": "",
        "slug": "",
        "tags": [],
        "summary": "",
        "title": "Nginx的用法",
        "status": "Draft",
        "urlname": "fabcf1a5-9686-4a46-80e6-2fc417f52d76",
        "updated": "2025-02-20 12:45:00"
      },
      "body": "",
      "realName": "Nginx的用法",
      "relativePath": "/Nginx的用法.md"
    },
    {
      "id": "b0040596-4fbd-478d-a9d0-246dec0e3b57",
      "doc_id": "b0040596-4fbd-478d-a9d0-246dec0e3b57",
      "updated": 1696672080000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-06",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字",
          "必看精选"
        ],
        "summary": "本文为《非暴力沟通》的读书笔记",
        "title": "非暴力沟通合集",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=729e95679a9efcc948a4d29f5ecddda40e27d8800c280c5c79370e84b6638c17&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "b0040596-4fbd-478d-a9d0-246dec0e3b57",
        "updated": "2023-10-07 17:48:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "b0040596-4fbd-478d-a9d0-246dec0e3b57"
        }
      ],
      "body": "",
      "realName": "非暴力沟通合集",
      "relativePath": "/学习笔记/非暴力沟通合集.md"
    },
    {
      "id": "62a7a7aa-715d-4463-b163-fe3ed74a0142",
      "doc_id": "62a7a7aa-715d-4463-b163-fe3ed74a0142",
      "updated": 1693296060000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-08-29",
        "type": "Post",
        "category": "技术分享",
        "slug": "how-to-add-seo-tools",
        "tags": [
          "开发",
          "建站",
          "工具"
        ],
        "summary": "文章讲述了什么是站长工具，为什么要有站长工具，如何添加站长工具。",
        "title": "网站添加站长工具及实战",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1562577309-2592ab84b1bc?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "62a7a7aa-715d-4463-b163-fe3ed74a0142",
        "updated": "2023-08-29 16:01:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "62a7a7aa-715d-4463-b163-fe3ed74a0142"
        }
      ],
      "body": "",
      "realName": "网站添加站长工具及实战",
      "relativePath": "/技术分享/网站添加站长工具及实战.md"
    },
    {
      "id": "8ce7ab33-1b95-45f9-ac71-301de83d5c6b",
      "doc_id": "8ce7ab33-1b95-45f9-ac71-301de83d5c6b",
      "updated": 1696735440000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-08-10",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch10",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第十章——《充分表达愤怒》读书笔记。",
        "title": "非暴力沟通—[Ch10 充分表达愤怒]",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=729e95679a9efcc948a4d29f5ecddda40e27d8800c280c5c79370e84b6638c17&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "8ce7ab33-1b95-45f9-ac71-301de83d5c6b",
        "updated": "2023-10-08 11:24:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "8ce7ab33-1b95-45f9-ac71-301de83d5c6b"
        }
      ],
      "body": "",
      "realName": "非暴力沟通—[Ch10 充分表达愤怒]",
      "relativePath": "/学习笔记/非暴力沟通—[Ch10 充分表达愤怒].md"
    },
    {
      "id": "b82f42df-ecc7-4442-b2e1-8c3df7df5045",
      "doc_id": "b82f42df-ecc7-4442-b2e1-8c3df7df5045",
      "updated": 1696827120000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-22",
        "type": "Post",
        "category": "行业概念",
        "slug": "start-industry-100-words",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "“写100个行业概念”启动仪式",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1679678691006-3afa56204979?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "b82f42df-ecc7-4442-b2e1-8c3df7df5045",
        "updated": "2023-10-09 12:52:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "b82f42df-ecc7-4442-b2e1-8c3df7df5045"
        }
      ],
      "body": "",
      "realName": "“写100个行业概念”启动仪式",
      "relativePath": "/行业概念/“写100个行业概念”启动仪式.md"
    },
    {
      "id": "e29418b0-14aa-4596-a05b-d2ee446103c9",
      "doc_id": "e29418b0-14aa-4596-a05b-d2ee446103c9",
      "updated": 1696735440000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-08-15",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch11",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第十一章——《化解冲突，调和纷争》读书笔记。",
        "title": "非暴力沟通—[Ch11 化解冲突，调和纷争]",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=729e95679a9efcc948a4d29f5ecddda40e27d8800c280c5c79370e84b6638c17&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "e29418b0-14aa-4596-a05b-d2ee446103c9",
        "updated": "2023-10-08 11:24:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "e29418b0-14aa-4596-a05b-d2ee446103c9"
        }
      ],
      "body": "",
      "realName": "非暴力沟通—[Ch11 化解冲突，调和纷争]",
      "relativePath": "/学习笔记/非暴力沟通—[Ch11 化解冲突，调和纷争].md"
    },
    {
      "id": "b101bdf5-b8b1-4bcb-bf4e-65718c9edc1e",
      "doc_id": "b101bdf5-b8b1-4bcb-bf4e-65718c9edc1e",
      "updated": 1696735440000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-08-03",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch9",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第九章——《爱自己》读书笔记。",
        "title": "非暴力沟通—[Ch9 爱自己]",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=729e95679a9efcc948a4d29f5ecddda40e27d8800c280c5c79370e84b6638c17&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "b101bdf5-b8b1-4bcb-bf4e-65718c9edc1e",
        "updated": "2023-10-08 11:24:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "b101bdf5-b8b1-4bcb-bf4e-65718c9edc1e"
        }
      ],
      "body": "",
      "realName": "非暴力沟通—[Ch9 爱自己]",
      "relativePath": "/学习笔记/非暴力沟通—[Ch9 爱自己].md"
    },
    {
      "id": "d42902ff-feda-4d5a-acb8-000776995f2c",
      "doc_id": "d42902ff-feda-4d5a-acb8-000776995f2c",
      "updated": 1696735440000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-30",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch8",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第八章——《同理心的力量》读书笔记。",
        "title": "非暴力沟通—[Ch8 同理心的力量]",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=729e95679a9efcc948a4d29f5ecddda40e27d8800c280c5c79370e84b6638c17&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "d42902ff-feda-4d5a-acb8-000776995f2c",
        "updated": "2023-10-08 11:24:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "d42902ff-feda-4d5a-acb8-000776995f2c"
        }
      ],
      "body": "",
      "realName": "非暴力沟通—[Ch8 同理心的力量]",
      "relativePath": "/学习笔记/非暴力沟通—[Ch8 同理心的力量].md"
    },
    {
      "id": "8a60183e-0431-4490-9277-ea369a32f305",
      "doc_id": "8a60183e-0431-4490-9277-ea369a32f305",
      "updated": 1696735440000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-28",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch7",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第七章——《以同理心倾听》读书笔记。",
        "title": "非暴力沟通—[Ch7 以同理心倾听]",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=729e95679a9efcc948a4d29f5ecddda40e27d8800c280c5c79370e84b6638c17&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "8a60183e-0431-4490-9277-ea369a32f305",
        "updated": "2023-10-08 11:24:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "8a60183e-0431-4490-9277-ea369a32f305"
        }
      ],
      "body": "",
      "realName": "非暴力沟通—[Ch7 以同理心倾听]",
      "relativePath": "/学习笔记/非暴力沟通—[Ch7 以同理心倾听].md"
    },
    {
      "id": "16a1bd4b-fcba-4755-ae98-1dee29eb7417",
      "doc_id": "16a1bd4b-fcba-4755-ae98-1dee29eb7417",
      "updated": 1696735440000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-20",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch6",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第六章——《提出请求，丰盈生命》读书笔记。",
        "title": "非暴力沟通—[Ch6 提出请求，丰盈生命]",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=729e95679a9efcc948a4d29f5ecddda40e27d8800c280c5c79370e84b6638c17&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "16a1bd4b-fcba-4755-ae98-1dee29eb7417",
        "updated": "2023-10-08 11:24:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "16a1bd4b-fcba-4755-ae98-1dee29eb7417"
        }
      ],
      "body": "",
      "realName": "非暴力沟通—[Ch6 提出请求，丰盈生命]",
      "relativePath": "/学习笔记/非暴力沟通—[Ch6 提出请求，丰盈生命].md"
    },
    {
      "id": "f759e9e8-02ae-4647-8a24-e7710b267938",
      "doc_id": "f759e9e8-02ae-4647-8a24-e7710b267938",
      "updated": 1696735440000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-10",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch4",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第四章——《体会与表达感受》读书笔记。",
        "title": "非暴力沟通—[Ch4 体会与表达感受]",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=729e95679a9efcc948a4d29f5ecddda40e27d8800c280c5c79370e84b6638c17&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "f759e9e8-02ae-4647-8a24-e7710b267938",
        "updated": "2023-10-08 11:24:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "f759e9e8-02ae-4647-8a24-e7710b267938"
        }
      ],
      "body": "",
      "realName": "非暴力沟通—[Ch4 体会与表达感受]",
      "relativePath": "/学习笔记/非暴力沟通—[Ch4 体会与表达感受].md"
    },
    {
      "id": "9412fd8b-db15-44fa-be67-b984f43a69b3",
      "doc_id": "9412fd8b-db15-44fa-be67-b984f43a69b3",
      "updated": 1696735440000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-13",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch5",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第五章——《为自己的感受负责》读书笔记。",
        "title": "非暴力沟通—[Ch5 为自己的感受负责]",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=729e95679a9efcc948a4d29f5ecddda40e27d8800c280c5c79370e84b6638c17&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "9412fd8b-db15-44fa-be67-b984f43a69b3",
        "updated": "2023-10-08 11:24:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "9412fd8b-db15-44fa-be67-b984f43a69b3"
        }
      ],
      "body": "",
      "realName": "非暴力沟通—[Ch5 为自己的感受负责]",
      "relativePath": "/学习笔记/非暴力沟通—[Ch5 为自己的感受负责].md"
    },
    {
      "id": "af29d756-d6a1-4a59-bd37-1bd51447b706",
      "doc_id": "af29d756-d6a1-4a59-bd37-1bd51447b706",
      "updated": 1696735440000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-08",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch2",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第二章——《疏离生命的语言》读书笔记。",
        "title": "非暴力沟通—[Ch2 疏离生命的语言]",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=729e95679a9efcc948a4d29f5ecddda40e27d8800c280c5c79370e84b6638c17&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "af29d756-d6a1-4a59-bd37-1bd51447b706",
        "updated": "2023-10-08 11:24:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "af29d756-d6a1-4a59-bd37-1bd51447b706"
        }
      ],
      "body": "",
      "realName": "非暴力沟通—[Ch2 疏离生命的语言]",
      "relativePath": "/学习笔记/非暴力沟通—[Ch2 疏离生命的语言].md"
    },
    {
      "id": "e8f61215-261d-4313-94d2-e5c06f988819",
      "doc_id": "e8f61215-261d-4313-94d2-e5c06f988819",
      "updated": 1696735440000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-09",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch3",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第三章——《不带评论的观察》读书笔记。",
        "title": "非暴力沟通—[Ch3 不带评论的观察",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=729e95679a9efcc948a4d29f5ecddda40e27d8800c280c5c79370e84b6638c17&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "e8f61215-261d-4313-94d2-e5c06f988819",
        "updated": "2023-10-08 11:24:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "e8f61215-261d-4313-94d2-e5c06f988819"
        }
      ],
      "body": "",
      "realName": "非暴力沟通—[Ch3 不带评论的观察",
      "relativePath": "/学习笔记/非暴力沟通—[Ch3 不带评论的观察.md"
    },
    {
      "id": "91842536-ed04-4266-916a-ac9c3d0ac2b1",
      "doc_id": "91842536-ed04-4266-916a-ac9c3d0ac2b1",
      "updated": 1696735440000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-07",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch1",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第一章——《由衷的给予》读书笔记。",
        "title": "非暴力沟通—[Ch1 由衷的给予]",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=729e95679a9efcc948a4d29f5ecddda40e27d8800c280c5c79370e84b6638c17&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "91842536-ed04-4266-916a-ac9c3d0ac2b1",
        "updated": "2023-10-08 11:24:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "91842536-ed04-4266-916a-ac9c3d0ac2b1"
        }
      ],
      "body": "",
      "realName": "非暴力沟通—[Ch1 由衷的给予]",
      "relativePath": "/学习笔记/非暴力沟通—[Ch1 由衷的给予].md"
    },
    {
      "id": "76048781-d532-4ea6-a0ac-00f84cfd56ca",
      "doc_id": "76048781-d532-4ea6-a0ac-00f84cfd56ca",
      "updated": 1692334200000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-10-25",
        "type": "Post",
        "category": "学习笔记",
        "slug": "redis-data-structure",
        "tags": [
          "Redis",
          "数据库",
          "工具"
        ],
        "summary": "Redis的数据结构分为顶层数据结构和底层数据结构，我们来根据《Redis设计与实现》尝试剖析下。",
        "title": "【笔记】Redis数据结构与对象《Redis设计与实现》",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1569396116180-210c182bedb8?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "76048781-d532-4ea6-a0ac-00f84cfd56ca",
        "updated": "2023-08-18 12:50:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "76048781-d532-4ea6-a0ac-00f84cfd56ca"
        }
      ],
      "body": "",
      "realName": "【笔记】Redis数据结构与对象《Redis设计与实现》",
      "relativePath": "/学习笔记/【笔记】Redis数据结构与对象《Redis设计与实现》.md"
    },
    {
      "id": "4212a457-2728-4e14-bac7-95602e9848ba",
      "doc_id": "4212a457-2728-4e14-bac7-95602e9848ba",
      "updated": 1691652180000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-10-02",
        "type": "Post",
        "category": "学习笔记",
        "slug": "quick-guide-to-ga-asm",
        "tags": [
          "Go",
          "开发"
        ],
        "summary": "快速学习Go汇编，本文翻译《A Quick Guide to Go's Assembler》 https://golang.org/doc/asm",
        "title": "【翻译】《A Quick Guide to Go's Assembler》",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1506918836024-2d1ded7ce188?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "4212a457-2728-4e14-bac7-95602e9848ba",
        "updated": "2023-08-10 15:23:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "4212a457-2728-4e14-bac7-95602e9848ba"
        }
      ],
      "body": "",
      "realName": "【翻译】《A Quick Guide to Go's Assembler》",
      "relativePath": "/学习笔记/【翻译】《A Quick Guide to Go's Assembler》.md"
    },
    {
      "id": "208b2c31-cbca-4d1c-aa8d-b792dd4daf1d",
      "doc_id": "208b2c31-cbca-4d1c-aa8d-b792dd4daf1d",
      "updated": 1697783340000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-07-02",
        "type": "Post",
        "category": "心情随笔",
        "slug": "good-notion",
        "tags": [
          "随笔",
          "文字"
        ],
        "summary": "",
        "title": "我与Notion有个约",
        "status": "Invisible",
        "cover": "https://source.unsplash.com/random/720x480/?encryption",
        "urlname": "208b2c31-cbca-4d1c-aa8d-b792dd4daf1d",
        "updated": "2023-10-20 14:29:00"
      },
      "catalog": [
        {
          "title": "心情随笔",
          "doc_id": "208b2c31-cbca-4d1c-aa8d-b792dd4daf1d"
        }
      ],
      "body": "",
      "realName": "我与Notion有个约",
      "relativePath": "/心情随笔/我与Notion有个约.md"
    },
    {
      "id": "cbb2a371-f267-449e-b38a-74f963d71d45",
      "doc_id": "cbb2a371-f267-449e-b38a-74f963d71d45",
      "updated": 1692333240000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-08-18",
        "type": "Post",
        "category": "技术分享",
        "slug": "mysql-like-regexp",
        "tags": [
          "MySQL",
          "SQL",
          "开发"
        ],
        "summary": "在MySQL中，我们可以使用LIKE和REGEXP函数来进行模式匹配操作。LIKE函数使用通配符进行模式匹配，而REGEXP函数使用正则表达式进行模式匹配。这两个函数都是常用的工具，但它们在匹配方式、匹配规则和性能方面存在一些区别。",
        "title": "MySQL匹配，LIKE or REGEXP?",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/bfb30b48-50c3-459a-9cb3-a4c5cfb36c1e/mysql-like.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=7865a1f3caceadff726de249b819e6cea279e3bf7b7919b2af3d8da1772637fa&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "cbb2a371-f267-449e-b38a-74f963d71d45",
        "updated": "2023-08-18 12:34:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "cbb2a371-f267-449e-b38a-74f963d71d45"
        }
      ],
      "body": "",
      "realName": "MySQL匹配，LIKE or REGEXP",
      "relativePath": "/技术分享/MySQL匹配，LIKE or REGEXP.md"
    },
    {
      "id": "cab96cc8-d3ee-4627-a63d-6c5ebe6b67db",
      "doc_id": "cab96cc8-d3ee-4627-a63d-6c5ebe6b67db",
      "updated": 1691411040000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-03-30",
        "type": "Post",
        "category": "技术分享",
        "slug": "jmh",
        "tags": [
          "Java",
          "性能测试"
        ],
        "summary": "从 JDK 12开始，JDK 自带 JMH (Java Microbenchmark Harness) ，它是一个工具包，可以帮助我们正确地实现 Java 微基准测试。今天我和它正好有个约。",
        "title": "我和JMH有个约————Java微基准测试工具探究",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1533709752211-118fcaf03312?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "cab96cc8-d3ee-4627-a63d-6c5ebe6b67db",
        "updated": "2023-08-07 20:24:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "cab96cc8-d3ee-4627-a63d-6c5ebe6b67db"
        }
      ],
      "body": "",
      "realName": "我和JMH有个约————Java微基准测试工具探究",
      "relativePath": "/技术分享/我和JMH有个约————Java微基准测试工具探究.md"
    },
    {
      "id": "8522b1ba-f2b4-4ac7-b791-482e0959ce27",
      "doc_id": "8522b1ba-f2b4-4ac7-b791-482e0959ce27",
      "updated": 1691311680000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-09-20",
        "type": "Post",
        "category": "技术分享",
        "slug": "redis-message-pub-sub",
        "tags": [
          "Redis",
          "开发"
        ],
        "summary": "在软件架构中，发布-订阅是一种消息传递模式，其中消息的发送者（称为发布者）不会将消息编程为直接发送给特定的接收者（称为订阅者），而是将已发布的消息分类到不知道哪些订阅者的情况下。 类似地，订阅者表示对一个或多个频道感兴趣并且只接收感兴趣的消息，而不知道有哪些发布者。本文讲述了Redis中的消息发布订阅",
        "title": "Redis中的消息发布订阅",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "8522b1ba-f2b4-4ac7-b791-482e0959ce27",
        "updated": "2023-08-06 16:48:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "8522b1ba-f2b4-4ac7-b791-482e0959ce27"
        }
      ],
      "body": "",
      "realName": "Redis中的消息发布订阅",
      "relativePath": "/技术分享/Redis中的消息发布订阅.md"
    },
    {
      "id": "c487e880-5297-4731-874f-6100ab24c44a",
      "doc_id": "c487e880-5297-4731-874f-6100ab24c44a",
      "updated": 1695714660000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-10-13",
        "type": "Post",
        "category": "技术分享",
        "slug": "go-reflect-laws",
        "tags": [
          "Go",
          "开发",
          "必看精选"
        ],
        "summary": "最近在研究Go语言的源码，看到反射部分，结合The Go Blog系列的《The Laws of Reflection》，以及Go 1.15 中 src/reflect 部分源码，记录下对于Go 反射的一些见解。",
        "title": "初探Go反射三大定律",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1642367340318-96fdbc5d30f5?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "c487e880-5297-4731-874f-6100ab24c44a",
        "updated": "2023-09-26 15:51:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "c487e880-5297-4731-874f-6100ab24c44a"
        }
      ],
      "body": "",
      "realName": "初探Go反射三大定律",
      "relativePath": "/技术分享/初探Go反射三大定律.md"
    },
    {
      "id": "c3e54c4b-ad14-484c-aeac-de9296dc24e6",
      "doc_id": "c3e54c4b-ad14-484c-aeac-de9296dc24e6",
      "updated": 1691311680000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-09-16",
        "type": "Post",
        "category": "技术分享",
        "slug": "redis-usding-pipeline-speed-up",
        "tags": [
          "Redis",
          "开发"
        ],
        "summary": "Redis是一种高性能的内存数据库，它可以快速地存储和检索数据。但是，当需要执行大量的Redis查询时，每个查询都需要与Redis服务器进行通信，这可能会导致性能瓶颈。为了解决这个问题，Redis提供了Pipeline机制，它可以将多个查询打包在一起，一次性发送给Redis服务器，从而提高查询速度。在本文中，我们将介绍如何使用Redis Pipeline机制来提高查询速度，并探讨Pipeline机制的工作原理和使用方法。",
        "title": "Redis使用Pipeline提高查询速度",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1605600659873-d808a13e4d2a?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "c3e54c4b-ad14-484c-aeac-de9296dc24e6",
        "updated": "2023-08-06 16:48:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "c3e54c4b-ad14-484c-aeac-de9296dc24e6"
        }
      ],
      "body": "",
      "realName": "Redis使用Pipeline提高查询速度",
      "relativePath": "/技术分享/Redis使用Pipeline提高查询速度.md"
    },
    {
      "id": "cba1c574-25fd-41e7-bbdf-ad3459124fbf",
      "doc_id": "cba1c574-25fd-41e7-bbdf-ad3459124fbf",
      "updated": 1691309520000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-09-10",
        "type": "Post",
        "category": "心情随笔",
        "slug": "eachen-world-new-start",
        "tags": [
          "随笔",
          "文字"
        ],
        "summary": "9月10日是教师节，这一天，易浅的世界重新开放。",
        "title": "易浅的世界——新的开始",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1608496601160-f86d19a44f9f?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "cba1c574-25fd-41e7-bbdf-ad3459124fbf",
        "updated": "2023-08-06 16:12:00"
      },
      "catalog": [
        {
          "title": "心情随笔",
          "doc_id": "cba1c574-25fd-41e7-bbdf-ad3459124fbf"
        }
      ],
      "body": "",
      "realName": "易浅的世界——新的开始",
      "relativePath": "/心情随笔/易浅的世界——新的开始.md"
    },
    {
      "id": "b1eecfd0-b513-46a9-a50b-5cffc35e6542",
      "doc_id": "b1eecfd0-b513-46a9-a50b-5cffc35e6542",
      "updated": 1691411340000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-09-14",
        "type": "Post",
        "category": "技术分享",
        "slug": "resp",
        "tags": [
          "Redis",
          "开发"
        ],
        "summary": "Redis客户端和服务器端通信使用名为 RESP (REdis Serialization Protocol) 的协议。",
        "title": "Redis 协议详细规范",
        "status": "Published",
        "cover": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/33d23e03-f43d-4c01-84ae-9b4733c2aad2/redis.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231121%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231121T120308Z&X-Amz-Expires=3600&X-Amz-Signature=3134d7d3840a4de311ef2cd43acf1c5d403c14328760dc78977b4365aa9af1bc&X-Amz-SignedHeaders=host&x-id=GetObject",
        "urlname": "b1eecfd0-b513-46a9-a50b-5cffc35e6542",
        "updated": "2023-08-07 20:29:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "b1eecfd0-b513-46a9-a50b-5cffc35e6542"
        }
      ],
      "body": "",
      "realName": "Redis 协议详细规范",
      "relativePath": "/技术分享/Redis 协议详细规范.md"
    },
    {
      "id": "1a7db346-40d8-4c8e-9b61-7ef9ab008dc2",
      "doc_id": "1a7db346-40d8-4c8e-9b61-7ef9ab008dc2",
      "updated": 1695714660000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-01-06",
        "type": "Post",
        "category": "学习笔记",
        "slug": "mysql-crash-course",
        "tags": [
          "SQL",
          "MySQL",
          "数据库",
          "必看精选"
        ],
        "summary": "最近重读了一遍《MySQL必知必会》，然后对重要的部分摘抄了一些笔记，希望能够作重温下经典的基础上，巩固下自己对于MySQL的理解。篇幅可能有点长，可以通过目录快速查看。",
        "title": "【笔记】MySQL必知必会",
        "status": "Published",
        "cover": "https://images.unsplash.com/photo-1662026911591-335639b11db6?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb",
        "urlname": "1a7db346-40d8-4c8e-9b61-7ef9ab008dc2",
        "updated": "2023-09-26 15:51:00"
      },
      "catalog": [
        {
          "title": "学习笔记",
          "doc_id": "1a7db346-40d8-4c8e-9b61-7ef9ab008dc2"
        }
      ],
      "body": "",
      "realName": "【笔记】MySQL必知必会",
      "relativePath": "/学习笔记/【笔记】MySQL必知必会.md"
    },
    {
      "id": "ca64831c-9fae-4a56-af56-14cf15a04af4",
      "doc_id": "ca64831c-9fae-4a56-af56-14cf15a04af4",
      "updated": 1700620200000,
      "body_original": "\n# 整理定义\n\n\n中文名称：自适应哈希索引\n\n\n英文名称：**Adaptive Hash Index（AHI）**\n\n\n![](https://image.kuangyichen.com/image/innodb-architecture-8-0.png)\n\n\n**自适应哈希索引（Adaptive Hash Index）**使 InnoDB 能够在具有适当的工作负载组合和足够的缓冲池内存的系统上执行更像内存数据库的操作，而无需牺牲事务功能或可靠性。 \n\n\n# 复述展开\n\n\n根据观察到的搜索模式，使用索引键的前缀构建哈希索引。 前缀可以是任意长度，并且可能只有B树中的某些值出现在哈希索引中。 哈希索引是根据需要为经常访问的索引页构建的。\n\n\n如果表几乎完全适合主内存，则哈希索引可以通过直接查找任何元素、将索引值转换为某种指针来加速查询。 InnoDB有一个监控索引搜索的机制。 如果 InnoDB 发现查询可以从构建哈希索引中受益，它会自动执行此操作。\n\n\n## 何时应该启用或者禁用？\n\n\n对于某些工作负载，哈希索引查找所带来的加速远远超过了监视索引查找和维护哈希索引结构的额外工作。 在繁重的工作负载（例如多个并发联接）下，对自适应哈希索引的访问有时会成为争用的根源。 使用 LIKE 运算符和 % 通配符的查询往往也不会受益。 对于无法从自适应哈希索引中受益的工作负载，将其关闭可以减少不必要的性能开销。 由于很难提前预测自适应哈希索引是否适合特定系统和工作负载，可以在启用和禁用它的情况下**运行基准测试**。\n\n\n## 相关配置\n\n- **innodb_adaptive_hash_index**\n\n\t自适应哈希索引由 `innodb_adaptive_hash_index` 变量启用，或在服务器启动时通过 `--skip-innodb-adaptive-hash-index` 关闭。**默认为开启**。\n\n- **innodb_adaptive_hash_index_parts**\n\n\t自适应哈希索引特征是<u>分区</u>的。 每个索引都绑定到一个特定的分区，并且每个分区都由单独的锁存器保护。 分区由 `innodb_adaptive_hash_index_parts` 变量控制。 `innodb_adaptive_hash_index_parts` 变量默认值为 8。 最大设置为 512。\n\n\n## 如何监控\n\n\n监控**自适应哈希索引（Adaptive Hash Index）**的使用情况：你可以通过`SHOW ENGINE INNODB STATUS`命令来查看AHI的使用情况，包括哈希索引的数量，哈希索引的大小等。这可以帮助你更好地理解和配置AHI。\n\n\n# 理解体会\n\n\nInnoDB的自适应哈希索引（Adaptive Hash Index，AHI）是一种特殊的索引，它是InnoDB存储引擎为了提高查询性能而设计的。当某些索引值被频繁地访问时，InnoDB会自动创建哈希索引，以加速对这些索引值的查询。这种索引是自适应的，因为它会根据数据库的实际访问模式动态地创建和删除。\n\n\nAHI的主要优点是可以显著提高查询性能，特别是在大量的点查询（即查询单个索引值）和等值查询（即查询索引值等于某个常量的记录）的场景下。然而，AHI也有一些缺点。首先，AHI会占用一部分内存，如果内存资源有限，可能会影响其他功能的性能。其次，AHI的创建和删除需要一定的CPU资源，如果CPU资源有限，可能会影响数据库的性能。\n\n\n总的来说，AHI是InnoDB的一个强大的功能，可以显著提高查询性能。但是，使用AHI需要一定的专业知识，如果配置不当，可能会影响数据库的性能和稳定性。因此，我们在使用AHI时，需要谨慎小心。\n\n\n# 参考：\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 15.5.3 Adaptive Hash Index](https://dev.mysql.com/doc/refman/8.0/en/innodb-adaptive-hash.html)\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 8.3.9 Comparison of B-Tree and Hash Indexes](https://dev.mysql.com/doc/refman/8.0/en/index-btree-hash.html)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-21",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day61",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day61【概念解析】InnoDB AHI",
        "status": "Published",
        "urlname": "ca64831c-9fae-4a56-af56-14cf15a04af4",
        "updated": "2023-11-22 02:30:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "ca64831c-9fae-4a56-af56-14cf15a04af4"
        }
      ],
      "body": "",
      "realName": "Day61【概念解析】InnoDB AHI",
      "relativePath": "/行业概念/Day61【概念解析】InnoDB AHI.md"
    },
    {
      "id": "e9f2dc4c-88cf-4d15-9dc5-e82a4432a018",
      "doc_id": "e9f2dc4c-88cf-4d15-9dc5-e82a4432a018",
      "updated": 1700620200000,
      "body_original": "\n# 整理定义\n\n\n中文定义：日志缓冲区\n\n\n英文定义：Log Buffer\n\n\n![](https://image.kuangyichen.com/image/innodb-architecture-8-0.png)\n\n\n> 💡 **What is log buffer?**\n\n\n\tThe log buffer is the memory area that holds data to be written to the log files on disk. Log buffer size is defined by the [`innodb_log_buffer_size`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) variable. The default size is 16MB. The contents of the log buffer are periodically flushed to disk. A large log buffer enables large transactions to run without the need to write redo log data to disk before the transactions commit. Thus, if you have transactions that update, insert, or delete many rows, increasing the size of the log buffer saves disk I/O.\n\n\n\tThe [`innodb_flush_log_at_trx_commit`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) variable controls how the contents of the log buffer are written and flushed to disk. The [`innodb_flush_log_at_timeout`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_timeout) variable controls log flushing frequency.\n\n\n**日志缓冲区（Log Buffer）**是保存要写入磁盘上日志文件的数据的内存区域。 \n\n\n日志缓冲区的内容会定期刷新到磁盘。 大型日志缓冲区允许大型事务运行，而无需在事务提交之前将重做日志数据写入磁盘。 因此，如果您有更新、插入或删除许多行的事务，则增加日志缓冲区的大小可以节省磁盘 I/O。\n\n\n# 复述展开\n\n\n相关配置：\n\n\n## innodb_log_buffer_size\n\n\n日志缓冲区大小由 `innodb_log_buffer_size` 变量定义。 默认大小为 `16MB`。 \n\n\n\t| **Command-Line Format**                                                                                                | `--innodb-log-buffer-size=#`                                                                                             |\n\t| ---------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |\n\t| **System Variable**                                                                                                    | [`innodb_log_buffer_size`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) |\n\t| **Scope**                                                                                                              | Global                                                                                                                   |\n\t| **Dynamic**                                                                                                            | Yes                                                                                                                      |\n\t| [**`SET_VAR`**](https://dev.mysql.com/doc/refman/8.0/en/optimizer-hints.html#optimizer-hints-set-var) **Hint Applies** | No                                                                                                                       |\n\t| **Type**                                                                                                               | Integer                                                                                                                  |\n\t| **Default Value**                                                                                                      | `16777216` 【16MB】                                                                                                        |\n\t| **Minimum Value**                                                                                                      | `1048576`  【1MB】                                                                                                         |\n\t| **Maximum Value**                                                                                                      | `4294967295`  【4G-1】                                                                                                     |\n\n\n## innodb_flush_log_at_trx_commit \n\n\n`innodb_flush_log_at_trx_commit` 是一个MySQL的系统变量，主要用于控制InnoDB存储引擎在事务提交时如何刷新（写入并同步）事务日志到磁盘。这个变量的设置会影响数据库的ACID属性和性能。\n\n\n这个变量有三个可能的值：0，1，和2。\n\n1. 当`innodb_flush_log_at_trx_commit`设置为`1`时，每次事务提交时，InnoDB都会**立即**将事务日志刷新到磁盘。这种设置可以提供最高的数据持久性，因为即使在数据库崩溃的情况下，也不会丢失已经提交的事务。**这是默认的设置，也是实现完全ACID合规性所必需的**。\n2. 当`innodb_flush_log_at_trx_commit`设置为`0`时，InnoDB只会**每秒钟**将事务日志刷新到磁盘一次。这种设置可以提供最高的性能，但是在数据库崩溃的情况下，**可能会丢失最近一秒钟内提交的事务**。\n3. 当`innodb_flush_log_at_trx_commit`设置为`2`时，每次事务提交时，InnoDB都会将事务日志写入**操作系统的缓冲区**，然后**每秒钟**将**操作系统缓冲区**的内容刷新到磁盘一次。这种设置在性能和数据持久性之间提供了一个折衷的选择。\n\n| **Command-Line Format**                                                                                                | `--innodb-flush-log-at-trx-commit=#`                                                                                                     |\n| ---------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| **System Variable**                                                                                                    | [`innodb_flush_log_at_trx_commit`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) |\n| **Scope**                                                                                                              | Global                                                                                                                                   |\n| **Dynamic**                                                                                                            | Yes                                                                                                                                      |\n| [**`SET_VAR`**](https://dev.mysql.com/doc/refman/8.0/en/optimizer-hints.html#optimizer-hints-set-var) **Hint Applies** | No                                                                                                                                       |\n| **Type**                                                                                                               | Enumeration                                                                                                                              |\n| **Default Value**                                                                                                      | `1`                                                                                                                                      |\n| **Valid Values**                                                                                                       | `0`\n`1`\n`2`                                                                                                                              |\n\n\n##  innodb_flush_log_at_timeout \n\n\n变量控制日志刷新频率。每N秒写并刷新一次。\n\n\n| **Command-Line Format**                                                                                                | `--innodb-flush-log-at-timeout=#`                                                                                                  |\n| ---------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| **System Variable**                                                                                                    | [`innodb_flush_log_at_timeout`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_timeout) |\n| **Scope**                                                                                                              | Global                                                                                                                             |\n| **Dynamic**                                                                                                            | Yes                                                                                                                                |\n| [**`SET_VAR`**](https://dev.mysql.com/doc/refman/8.0/en/optimizer-hints.html#optimizer-hints-set-var) **Hint Applies** | No                                                                                                                                 |\n| **Type**                                                                                                               | Integer                                                                                                                            |\n| **Default Value**                                                                                                      | `1`                                                                                                                                |\n| **Minimum Value**                                                                                                      | `1`                                                                                                                                |\n| **Maximum Value**                                                                                                      | `2700`                                                                                                                             |\n| **Unit**                                                                                                               | seconds                                                                                                                            |\n\n\n# 理解体会\n\n\n**日志缓冲区（Log Buffer）**是数据库系统中的一个重要组件，它主要用于暂存即将写入到磁盘的日志记录。在MySQL的InnoDB存储引擎中，日志缓冲区是用于存储重做日志（Redo Log）的内存区域。\n\n\n作用：\n\n1. **提高性能**：日志缓冲区可以将多个小的日志写操作合并为一个大的写操作，从而减少磁盘I/O操作的次数，提高性能。\n2. **提供持久性**：在事务提交时，InnoDB会将日志缓冲区中的重做日志写入到磁盘，从而确保即使在数据库崩溃的情况下，也能恢复已经提交的事务。\n\n注意事项：\n\n1. 日志缓冲区的大小：日志缓冲区的大小由`innodb_log_buffer_size`变量控制。如果这个值设置得太小，那么日志缓冲区可能会频繁地溢出，导致日志过早地写入到磁盘，从而影响性能。如果这个值设置得太大，那么可能会浪费内存资源。\n2. 刷新策略：日志缓冲区的刷新策略由`innodb_flush_log_at_trx_commit`和`innodb_flush_log_at_timeout`两个变量控制。你需要根据你的应用的需求和你的硬件资源来合理设置这两个变量。\n\n[MySQL :: MySQL 8.0 Reference Manual :: 15.5.4 Log Buffer](https://dev.mysql.com/doc/refman/8.0/en/innodb-redo-log-buffer.html)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-22",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day62",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day62【概念解析】InnoDB Log Buffer",
        "status": "Published",
        "urlname": "e9f2dc4c-88cf-4d15-9dc5-e82a4432a018",
        "updated": "2023-11-22 02:30:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "e9f2dc4c-88cf-4d15-9dc5-e82a4432a018"
        }
      ],
      "body": "",
      "realName": "Day62【概念解析】InnoDB Log Buffer",
      "relativePath": "/行业概念/Day62【概念解析】InnoDB Log Buffer.md"
    },
    {
      "id": "736ee81e-b82a-4b23-acd2-79554d2e1a40",
      "doc_id": "736ee81e-b82a-4b23-acd2-79554d2e1a40",
      "updated": 1700795160000,
      "body_original": "\n# 整理定义\n\n\n中文名称：重做日志\n\n\n英文名称：Redo Log\n\n\n![MySQL 5.7版本](https://image.kuangyichen.com/image/innodb-architecture-5-7.png)\n\n\n![MySQL 8.0版本](https://image.kuangyichen.com/image/innodb-architecture-8-0.png)\n\n\n> 🎈 **What is Redo Log？**  \n> **重做日志（Redo Log）**是一种基于<u>磁盘</u>的<u>数据结构</u>，用于在<u>崩溃恢复期间修正由不完整事务写入的数据</u>。在正常操作期间，重做日志对由SQL语句或低级API调用导致的更改表数据的请求进行编码。在意外关闭之前未完成更新数据文件的修改将在初始化和接受连接之前自动重放。  \n>   \n> 重做日志在磁盘上以<u>重做日志文件</u>的形式物理表示。写入重做日志文件的数据以受影响的记录为单位进行编码，这些数据统称为**重做（Redo）**。数据通过重做日志文件的传递由递增的**LSN（日志序列号）**值表示。重做日志数据在数据修改发生时追加，随着检查点的进行，最旧的数据将被截断。  \n>   \n> 默认情况下**【MySQL 8.0.30之前】**，重做日志在磁盘上以两个文件命名为ib_logfile0和ib_logfile1的形式进行物理表示。MySQL以循环方式向重做日志文件写入数据。重做日志中的数据以受影响的记录为单位进行编码，这些数据统称为重做。数据通过重做日志的传递由递增的LSN（日志序列号）值表示。\n\n\n# 复述展开\n\n\n**redo log（重做日志）** 实现持久化和原子性 在innoDB的存储引擎中，事务日志通过重做(redo)日志和innoDB存储引擎的日志缓冲(InnoDB Log Buffer)实现。事务开启时，事务中的操作，都会先写入存储引擎的日志缓冲中，在事务提交之前，这些缓冲的日志都需要提前刷新到磁盘上持久化，这就是DBA们口中常说的“日志先行”(Write-Ahead Logging)。 当事务提交之后，在Buffer Pool中映射的数据文件才会慢慢刷新到磁盘。此时如果数据库崩溃或者宕机，那么当系统重启进行恢复时，就可以根据redo log中记录的日志，把数据库恢复到崩溃前的一个状态。未完成的事务，可以继续提交，也可以选择回滚，这基于恢复的策略而定。 在系统启动的时候，就已经为[redo log](https://www.zhihu.com/search?q=redo%20log&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1935044903%7D)分配了一块连续的存储空间，以顺序追加的方式记录Redo Log，通过顺序IO来改善性能。所有的事务共享redo log的存储空间，它们的Redo Log按语句的执行顺序，依次交替的记录在一起。\n\n\n## Redo Log File 的组成\n\n\n名称：`ib_logfileN`\n\n\n默认情况下：`ib_logfile0` and `ib_logfile1`\n\n\n如果有N个，则为 `ib_logfile0`，`ib_logfile1`，`ib_logfile2`，… `ib_logfileN`，\n\n\n最多100个文件，所有文件总容量最大为 512GB\n\n\n## 如何更改 Redo Log 文件的数量或大小？\n\n\n更改InnoDB重做日志文件的数量或大小的步骤如下：\n\n1. 停止MySQL服务器，并确保它能够正常关闭，没有出现错误。\n2. 编辑`my.cnf`文件以更改日志文件的配置。要更改日志文件的大小，配置`innodb_log_file_size`。要增加日志文件的数量，配置`innodb_log_files_in_group`。\n3. 再次启动MySQL服务器。\n\n如果InnoDB检测到`innodb_log_file_size`与重做日志文件的大小不同，它会写入一个日志检查点，关闭并删除旧的日志文件，创建新的请求大小的日志文件，并打开新的日志文件。\n\n\n### `innodb_log_file_size`\n\n\n| **Command-Line Format**      | `--innodb-log-file-size=#`                                                                                           |\n| ---------------------------- | -------------------------------------------------------------------------------------------------------------------- |\n| **System Variable**          | [`innodb_log_file_size`](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_log_file_size) |\n| **Scope**                    | Global                                                                                                               |\n| **Dynamic**                  | No                                                                                                                   |\n| **Type**                     | Integer                                                                                                              |\n| **Default Value**            | `50331648` 【48MB】                                                                                                    |\n| **Minimum Value (≥ 5.7.11)** | `4194304`                                                                                                            |\n| **Minimum Value (≤ 5.7.10)** | `1048576`                                                                                                            |\n| **Maximum Value**            | `512GB / innodb_log_files_in_group`                                                                                  |\n| **Unit**                     | bytes                                                                                                                |\n\n\n [`innodb_log_file_size`](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_log_file_size) 最小值 从 **1MB** 改为 **4MB** 在 **MySQL 5.7.11**.\n\n\n### `innodb_log_files_in_group`\n\n\n| **Command-Line Format** | `--innodb-log-files-in-group=#`                                                                                                |\n| ----------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| **System Variable**     | [`innodb_log_files_in_group`](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_log_files_in_group) |\n| **Scope**               | Global                                                                                                                         |\n| **Dynamic**             | No                                                                                                                             |\n| **Type**                | Integer                                                                                                                        |\n| **Default Value**       | `2`                                                                                                                            |\n| **Minimum Value**       | `2`                                                                                                                            |\n| **Maximum Value**       | `100`                                                                                                                          |\n\n\n> 🔥 **注意：**  \n> ([`innodb_log_file_size`](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_log_file_size) * [`innodb_log_files_in_group`](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_log_files_in_group)) 的值不能超过 512GB.\n\n\n## 优化指南\n\n\n考虑以下优化重做日志记录的指南：\n\n1. **将重做日志文件设置得很大，甚至可以与缓冲池一样大**。当InnoDB将重做日志文件写满时，它必须在检查点中将缓冲池的修改内容写入磁盘。较小的重做日志文件会导致许多不必要的磁盘写入。尽管过去大的重做日志文件会导致较长的恢复时间，但现在恢复速度更快，您可以放心使用大的重做日志文件。\n2. 通过配置`innodb_log_file_size`和`innodb_log_files_in_group`选项来设置重做日志文件的大小和数量。\n3. **考虑增加日志缓冲区的大小**。较大的日志缓冲区可以使大型事务在提交之前无需将日志写入磁盘。因此，如果您有更新、插入或删除大量行的事务，增大日志缓冲区可以节省磁盘I/O。可以使用`innodb_log_buffer_size`配置选项来配置日志缓冲区的大小。\n4. 配置`innodb_log_write_ahead_size`选项以避免“读写冲突”。该选项定义了重做日志的预写块大小。**将****`innodb_log_write_ahead_size`****设置为与操作系统或文件系统缓存块大小相匹配。**当由于重做日志的预写块大小与操作系统或文件系统缓存块大小不匹配而无法完全缓存重做日志块时，会发生读写冲突。\n5. **`innodb_log_write_ahead_size`****的有效值是InnoDB日志文件块大小（2的n次方）的倍数**。最小值为InnoDB日志文件块大小（512）。当指定最小值时，不会发生预写。最大值等于`innodb_page_size`值。如果为`innodb_log_write_ahead_size`指定的值大于`innodb_page_size`值，则`innodb_log_write_ahead_size`设置将被截断为`innodb_page_size`值。\n6. 如果将`innodb_log_write_ahead_size`值设置得太低，与操作系统或文件系统缓存块大小相比，会导致读写冲突。如果将值设置得太高，可能会对日志文件写入的fsync性能产生轻微影响，因为多个块会同时被写入。\n\n# 理解体会\n\n\nInnoDB的重做日志（Redo Log）是MySQL数据库中的一个重要组件，它是一种持久化存储机制，用于记录数据库事务执行过程中对数据的所有修改操作。\n\n\n定义：重做日志是一种日志文件，它记录了所有修改数据库数据的操作，以便在数据库崩溃后可以用来恢复数据。重做日志是循环写入的，当达到一定大小后，会从头开始覆盖旧的日志记录。\n\n\n作用：\n\n1. 数据恢复：在数据库崩溃后，可以通过重做日志来恢复数据，保证数据的持久性。\n2. 提高性能：在事务提交时，只需要将重做日志写入到磁盘，而不需要立即将修改的数据写入到磁盘，这可以减少磁盘I/O操作的次数，提高性能。\n\n> 🔥 **注意**  \n> 在MySQL 8.0.30版本之后，Redo Log 的配置有些许变化，可以参考链接。本文主要讲解之前的情况。\n\n\n# 参考\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 15.6.5 Redo Log](https://dev.mysql.com/doc/refman/8.0/en/innodb-redo-log.html)\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 8.5.4 Optimizing InnoDB Redo Logging](https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-logging.html)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-23",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day63",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day63【概念解析】InnoDB Redo Log",
        "status": "Published",
        "urlname": "736ee81e-b82a-4b23-acd2-79554d2e1a40",
        "updated": "2023-11-24 03:06:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "736ee81e-b82a-4b23-acd2-79554d2e1a40"
        }
      ],
      "body": "",
      "realName": "Day63【概念解析】InnoDB Redo Log",
      "relativePath": "/行业概念/Day63【概念解析】InnoDB Redo Log.md"
    },
    {
      "id": "9c82cf19-8fa4-48fa-ad46-77e0652d29c7",
      "doc_id": "9c82cf19-8fa4-48fa-ad46-77e0652d29c7",
      "updated": 1700795160000,
      "body_original": "\n# 整理定义\n\n\n中文名称：撤销日志\n\n\n英文名称：Undo Log\n\n\n![MySQL 5.7版本](https://image.kuangyichen.com/image/innodb-architecture-5-7.png)\n\n\n![MySQL 8.0版本](https://image.kuangyichen.com/image/innodb-architecture-8-0.png)\n\n\n> An undo log is a collection of undo log records associated with a single read-write transaction. An undo log record contains information about how to undo the latest change by a transaction to a [clustered index](https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_clustered_index) record. If another transaction needs to see the original data as part of a consistent read operation, the unmodified data is retrieved from undo log records. Undo logs exist within [undo log segments](https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_undo_log_segment), which are contained within [rollback segments](https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_rollback_segment). Rollback segments reside in the [system tablespace](https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_system_tablespace), in [undo tablespaces](https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_undo_tablespace), and in the [temporary tablespace](https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_temporary_tablespace).  \n> ——[MySQL :: MySQL 5.7 Reference Manual :: 14.6.7 Undo Logs](https://dev.mysql.com/doc/refman/5.7/en/innodb-undo-logs.html)\n\n\n**撤销日志（Undo Log）**是与单个读写事务相关联的一组撤销日志记录。撤销日志记录包含有关如何撤消事务对<u>聚簇索引</u>记录的最新更改的信息。<u>如果另一个事务需要在一致性读操作中查看原始数据，则从撤销日志记录中检索未修改的数据</u>。撤销日志存在于**撤销日志段（undo log segments）**中，这些段包含在**回滚段（rollback segements）**中。**回滚段**位于系统表空间（system tablespace）、撤销表空间（undo tablespace）和临时表空间（temporary tablespace）中。\n\n\n位于临时表空间（temporary tablespace）中的撤销日志（Undo Log）用于修改用户定义的临时表中的数据的事务。<u>这些撤销日志不会被重做记录，因为它们不需要用于崩溃恢复</u>。它们仅在服务器运行时用于回滚。这种类型的撤销日志通过避免重做日志I/O来提高性能。\n\n\n## 相关概念解析\n\n\n**聚簇索引（clustered index）**\n\n\n> 聚簇索引是InnoDB中用于主键索引的术语。InnoDB表存储是根据主键列的值进行组织的，以加快涉及主键列的查询和排序。为了获得最佳性能，请根据性能关键的查询仔细选择主键列。由于修改聚簇索引的列是一项昂贵的操作，请选择很少或从不更新的主键列。\n\n\n\t**clustered index**\n\n\n\tThe `InnoDB` term for a _**primary key**_ index. `InnoDB` table storage is organized based on the values of the primary key columns, to speed up queries and sorts involving the primary key columns. For best performance, choose the primary key columns carefully based on the most performance-critical queries. Because modifying the columns of the clustered index is an expensive operation, choose primary columns that are rarely or never updated.\n\n\n**撤销日志段（undo log segment）**\n\n\n> 撤销日志段是一组**撤销日志**的集合。撤销日志段存在于**回滚段**中。一个撤销日志段可能包含来自多个事务的撤销日志。<u>一个撤销日志段一次只能被一个事务使用</u>，<u>但在事务</u><u>**提交**</u><u>或</u><u>**回滚**</u><u>后可以被重新使用</u>。也可以称为“撤销段”。\n\n\n\t**undo log segment**\n\n\n\tA collection of _**undo logs**_. Undo log segments exists within _**rollback segments**_. An undo log segment might contain undo logs from multiple transactions. An undo log segment can only be used by one transaction at a time but can be reused after it is released at transaction _**commit**_ or _**rollback**_. May also be referred to as an “undo segment”.\n\n\n**回滚段**\n\n\n> 回滚段是包含撤销日志的存储区域。传统上，回滚段位于系统表空间中。从MySQL 5.6开始，回滚段可以位于撤销表空间中。从MySQL 5.7开始，回滚段也分配给全局临时表空间。\n\n\n\t**rollback segment**\n\tThe storage area containing the _**undo logs**_. Rollback segments have traditionally resided in the _**system tablespace**_. As of MySQL 5.6, rollback segments can reside in _**undo tablespaces**_. As of MySQL 5.7, rollback segments are also allocated to the _global temporary tablespace_.\n\n\n**撤销表空间**\n\n\n> 一个Undo表空间包含Undo日志。Undo日志存在于Undo日志段中，这些日志段被包含在回滚段中。回滚段传统上位于系统表空间中。从MySQL 5.6开始，回滚段可以位于Undo表空间中。在MySQL 5.6和MySQL 5.7中，Undo表空间的数量由innodb_undo_tablespaces配置选项控制。在MySQL 8.0中，当MySQL实例初始化时，会创建两个默认的Undo表空间，可以使用CREATE UNDO TABLESPACE语法创建额外的Undo表空间。\n\n\n\t**undo tablespace**\n\n\n\tAn undo tablespace contains _**undo logs**_. Undo logs exist within _**undo log segments**_, which are contained within _**rollback segments**_. Rollback segments have traditionally resided in the system tablespace. As of MySQL 5.6, rollback segments can reside in undo tablespaces. In MySQL 5.6 and MySQL 5.7, the number of undo tablespaces is controlled by the [`innodb_undo_tablespaces`](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_undo_tablespaces) configuration option. In MySQL 8.0, two default undo tablespaces are created when the MySQL instance is initialized, and additional undo tablespaces can be created using [`CREATE UNDO TABLESPACE`](https://dev.mysql.com/doc/refman/5.7/en/create-tablespace.html) syntax.\n\n\n# 复述展开\n\n\n**InnoDB支持最多128个回滚段，其中32个分配给临时表空间。这样就留下了96个回滚段可以分配给修改常规表中的事务**。`innodb_rollback_segments`变量定义了InnoDB使用的回滚段数量。\n\n\n回滚段支持的事务数量取决于回滚段中的撤销槽数量以及每个事务所需的撤销日志数量。回滚段中的撤销槽数量根据InnoDB页面大小而异。如下图所示：\n\n\n| **InnoDB Page Size** | **Number of Undo Slots in a Rollback Segment (InnoDB Page Size / 16)** |\n| -------------------- | ---------------------------------------------------------------------- |\n| `4096 (4KB)`         | `256`                                                                  |\n| `8192 (8KB)`         | `512`                                                                  |\n| `16384 (16KB)`       | `1024`                                                                 |\n| `32768 (32KB)`       | `2048`                                                                 |\n| `65536 (64KB)`       | `4096`                                                                 |\n\n\n一个事务最多分配四个撤销日志，分别用于以下操作类型：\n\n- 用户定义表上的`INSERT`操作\n- 用户定义表上的`UPDATE`和`DELETE`操作\n- 用户定义临时表上的`INSERT`操作\n- 用户定义临时表上的`UPDATE`和`DELETE`操作\n\n撤销日志**根据需要**进行分配。\n例如，对<u>常规表</u>和<u>临时表</u>执行`INSERT`、`UPDATE`和`DELETE`操作的事务需要分配四个完整的撤销日志。而只对常规表执行INSERT操作的事务只需要一个撤销日志。\n\n\n对常规表执行操作的事务从分配的**系统表空间**或**撤销表空间**回滚段中分配撤销日志。对临时表执行操作的事务从分配的**临时表空间**回滚段中分配撤销日志。\n\n\n分配给事务的撤销日志将在事务的整个持续时间内与之关联。\n例如，分配给事务的撤销日志用于该事务执行的所有常规表的INSERT操作。\n\n\n## 如何估计InnoDB 能够支持的并发读写事务数量\n\n\n根据上述因素，可以使用以下公式来估计InnoDB能够支持的并发读写事务数量。\n\n- 如果每个事务**只**执行INSERT，或者**只**执行UPDATE或DELETE操作，那么InnoDB能够支持的并发读写事务数量为：\n\n\t$$\n\t[\n\t\\left(\\frac{{\\text{{innodb\\_page\\_size}}}}{{16}}\\right) \\times \\left(\\text{{innodb\\_rollback\\_segments}} - 32\\right)\n\t]\n\t$$\n\n- 如果每个事务执行INSERT和UPDATE或DELETE操作，那么InnoDB能够支持的并发读写事务数量为：\n\n$$\n[\n\\left(\\frac{{\\text{{innodb\\_page\\_size}}}}{{16 \\times 2}}\\right) \\times \\left(\\text{{innodb\\_rollback\\_segments}} - 32\\right)\n]\n$$\n\n- 如果每个事务在临时表上执行INSERT操作，那么InnoDB能够支持的并发读写事务数量为：\n\n$$\n[\n\\left(\\frac{{\\text{{innodb\\_page\\_size}}}}{{16}}\\right) \\times 32\n]\n$$\n\n- 如果每个事务在临时表上执行INSERT和UPDATE或DELETE操作，那么InnoDB能够支持的并发读写事务数量为：\n\n\t$$\n\t[\n\t\\left(\\frac{{\\text{{innodb\\_page\\_size}}}}{{16 \\times 2}}\\right) \\times 32\n\t]\n\t$$\n\n\n# 理解体会\n\n\nInnoDB的Undo Log是MySQL数据库中的一个重要组件，它主要用于在事务执行过程中记录数据的旧版本信息，以便在需要时恢复数据。\n\n\n定义：Undo Log是一种日志文件，它记录了事务执行过程中对数据的修改前的状态，以便在事务失败或者进行ROLLBACK操作时可以恢复数据。\n\n\n**作用：**\n\n1. 数据恢复：在事务失败或者进行ROLLBACK操作时，可以通过Undo Log来恢复数据。\n2. 实现MVCC：Undo Log是实现多版本并发控制（MVCC）的关键，它可以提供事务开始时的数据快照，使得每个事务都能看到一致的数据视图。\n\n磁盘分布情况：Undo Log存储在InnoDB的系统表空间或者独立的Undo表空间中。在MySQL 8.0及更高版本中，推荐使用独立的Undo表空间。**【从文章开头的对比图可以看出】**\n\n\n**注意事项：**\n\n1. Undo Log的数量：Undo Log的数量由`innodb_undo_logs`变量控制。如果这个值设置得太小，那么可能会限制并发事务的数量。如果这个值设置得太大，那么可能会浪费磁盘空间。\n2. Undo Log的大小：Undo Log的大小由`innodb_undo_log_truncate`和`innodb_max_undo_log_size`两个变量控制。如果Undo Log的大小超过了`innodb_max_undo_log_size`，并且`innodb_undo_log_truncate`设置为ON，那么InnoDB会尝试截断Undo Log以释放磁盘空间。\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-24",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day64",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day64【概念解析】InnoDB Undo Log",
        "status": "Published",
        "urlname": "9c82cf19-8fa4-48fa-ad46-77e0652d29c7",
        "updated": "2023-11-24 03:06:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "9c82cf19-8fa4-48fa-ad46-77e0652d29c7"
        }
      ],
      "body": "",
      "realName": "Day64【概念解析】InnoDB Undo Log",
      "relativePath": "/行业概念/Day64【概念解析】InnoDB Undo Log.md"
    },
    {
      "id": "5f02c699-29b2-4c1a-8464-a802364e6024",
      "doc_id": "5f02c699-29b2-4c1a-8464-a802364e6024",
      "updated": 1701054120000,
      "body_original": "\n# 整理定义\n\n\n中文名称：双写缓冲区\n\n\n英文名称：Doublewrite Buffer\n\n\n![MySQL 5.7版本](https://image.kuangyichen.com/image/innodb-architecture-5-7.png)\n\n\n![MySQL 8.0版本](https://image.kuangyichen.com/image/innodb-architecture-8-0.png)\n\n\n**双写缓冲区（Doublewrite Buffer）是**一个存储区域，InnoDB 在将页面写入 InnoDB 数据文件中的正确位置之前先将页面写入从缓冲池刷新的位置。 如果在页面写入过程中存在操作系统、存储子系统或意外的 mysqld 进程退出，InnoDB 可以在崩溃恢复期间从双写缓冲区中找到页面的良好副本。\n\n\n在 `MySQL 8.0.20`之前，双写缓冲存储区域位于InnoDB系统表空间中。 从`MySQL 8.0.20`开始，双写缓冲区存储区域位于**双写缓冲文件（Doublewrite Buffer Files）**中。\n\n\n## doublewrite buffer配置提供以下参数：\n\n\n### `innodb_doublewrite`\n\n- `innodb_doublewrite`参数控制是否启用doublewrite buffer。多数场景下默认是启用的。为了禁用doublewrite buffer，设置`innodb_doublewrite=0`或者启动MySQL服务时加`-skip-innodb-doublewrite`选项。例如在性能压测的场景下，如果您更关注性能而不是数据可靠性，您可以禁用doublewrite buffer。\n如果doublewrite buffer位于支持原子写的Fusion-io设备上，则自动禁用doublewrite buffer，并使用Fusion-io原子写来执行数据文件写。但是，要注意`innodb_doublewrite`设置是全局的。当doublewrite buffer被禁用时，它对不在Fusion-io硬件上的数据文件也禁用。该功能仅在Fusion-io硬件上支持，在Linux中仅支持Fusion-io NVMFS。为了充分利用这个功能，建议将`innodb_flush_method=O_DIRECT`\n\n### `innodb_doublewrite_dir`\n\n- `innodb_doublewrite_dir`（8.0.20引入）定义了InnoDB创建双写文件的目录。如果目录没有指定，双写文件创建在`innodb_data_home_dir`目录下，没有指定默认在数据目录下。\n哈希符'#'会自动创建在指定目录名前缀，避免与shema名冲突。然而，如果使用了'.', '#'. 或者'/'指定了目录前缀，则不在目录名前缀没有哈希符'#'。\n理想情况下，双写目录应该放在最快的存储上。\n\n### `innodb_doublewrite_files`\n\n- `innodb_doublewrite_files`参数定义了双写文件的数量。默认情况下，每个缓冲池实例都会创建2个双写文件：一个刷新列表双写文件和一个LRU列表双写文件。\n刷新列表双写文件用于从缓冲池刷新列表中刷新页。刷新列表双写文件默认大小是`InnoDB page size * doublewrite page bytes`.\nLRU列表双写文件是用于刷新从缓冲池LRU列表的页。它也包括单个页刷新的槽。LRU列表双写文件默认大小为`InnoDB page size * (doublewrite pages + (512 / the number of buffer pool instances))`，512是为单个页刷新保留的槽的总数。\n至少有2个双写文件。双写文件的最大数量是缓冲池实例的两倍。（缓冲池实例的数量由参数`innodb_buffer_pool_instances`控制）\n双写文件有以下格式：`#ib_page_size_file_number.dblwr`。例如，下面的双写文件是在一个InnoDB页大小为16KB，单个缓冲池的MySQL实例上创建：\n#ib_16384_0.dblwr #ib_16384_1.dblwr\n`innodb_doublewrite_files`参数用于高级性能调优。默认设定已经适用于大多数用户。\n\n### `innodb_doublewrite_pages`\n\n- `innodb_doublewrite_pages`参数（MySQL8.0.20引入）控制每个线程双写页的最大数量。如果这个值没有指定，`innodb_doublewrite_pages`设置为`innodb_write_io_threads`值。这个参数用于高级性能调优。默认值已经适用于大多数用户。\n\n### `innodb_doublewrite_batch_size`\n\n- `innodb_doublewrite_batch_size`参数（MySQL8.0.20引入）控制一批写入双写页的数量。这个参数用于高级性能调优。默认值已经适用于大多数用户。\n\n# 复述展开\n\n\n## 为什么需要双写缓冲区？\n\n\n我们常见的服务器一般都是Linux操作系统，Linux文件系统页（OS Page）的大小默认是4KB。而MySQL的页（Page）大小默认是16KB。\n\n\n可以使用如下命令查看MySQL的Page大小：\n\n\n```sql\nSHOW VARIABLES LIKE 'innodb_page_size';\n```\n\n\n一般情况下，其余程序因为需要跟操作系统交互，它们的页（Page）都会大于等于操作系统的页大小，为整数倍。比如，Oracle的Page大小为8KB。\n\n\nMySQL程序是跑在Linux操作系统上的，需要跟操作系统交互，所以MySQL中一页数据刷到磁盘，要写4个文件系统里的页。\n\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/aae5c118-2852-4035-a0ba-5a519b909b7c/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20231127%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231127T030717Z&X-Amz-Expires=3600&X-Amz-Signature=9f1c09c6eed93cb39a3351f6f2cefc35f0a68e6bf832cc59027945c52833f6b8&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n**需要注意的是，这个操作并非原子操作，比如操作系统写到第二个页的时候，Linux机器断电了，这时候就会出现问题了。造成”页数据损坏“。并且这种”页数据损坏“靠 redo日志是无法修复的**。\n\n\n**重做日志中记录的是对页的物理操作，而不是页面的全量记录，而如果发生partial page write（部分页写入）问题时，出现问题的是未修改过的数据，此时重做日志(Redo Log)无能为力。写doublewrite buffer成功了，这个问题就不用担心了**。\n\n\nDoublewrite Buffer的出现就是为了解决上面的这种情况，虽然名字带了Buffer，但实际上Doublewrite Buffer是**内存+磁盘**的结构。\n\n\nDoublewrite Buffer是一种特殊文件flush技术，带给InnoDB存储引擎的是<u>数据页的可靠性</u>。它的作用是，在把页写到数据文件之前，InnoDB先把它们写到一个叫doublewrite buffer（双写缓冲区）的共享表空间内，在写doublewrite buffer完成后，InnoDB才会把页写到数据文件的适当的位置。如果在写页的过程中发生意外崩溃，InnoDB在稍后的恢复过程中在doublewrite buffer中找到完好的page副本用于恢复。\n\n\n【[MySQL双写缓冲区(Doublewrite Buffer)-阿里云开发者社区 (aliyun.com)](https://developer.aliyun.com/article/1307701)】\n\n\n# 理解体会\n\n\n最后我们总结下双写缓冲器的一些关键点：\n\n\n## **Doublewrite 解决了什么问题？**\n\n\n为了解决**部分页面写入**问题(Partial Page Write)。\n\n\nMySQL写入修改时刷新整个页面(默认16kb)，而不仅仅是刷新页面中已更改的记录。而系统的单次io，一般是512byte为单位的，在断电，OS crash(操作系统崩溃)情况下可能会丢失数据。\n\n\n## **Doublewrite 是指哪两次写入？**\n\n1. 写Doublewrite buffer，注意: Doublewrite buffer**是磁盘不是内存**。\n2. 写入数据文件。\n\n> 写入顺序：先写doublewrite buffer,写成功后再写到数据文件。\n\n\n## **Doublewrite buffer存储区位于什么地方？**\n\n- 在MySQL 8.0.20之前:位于InnoDB系统表空间中(ibdata文件)\n- 从MySQL 8.0.20开始:位于doublewrite文件中,文件由`innodb_doublewrite_dir`和`innodb_doublewrite_files`配置确定\n\n> doublewrite由两部分组成，一部分是内存中的doublewritebuffer，大小为2MB，另一部分是物理磁盘上共享表空间中连续的128个页，即2个区（extent），大小同样为2MB。在对缓冲池的脏页进行刷新时，并不直接写磁盘，而是会通过memcpy函数将脏页先复制到内存中的doublewritebuffer，之后通过doublewritebuffer再分两次，每次1MB顺序地写入共享表空间的物理磁盘上，然后马上调用fsync函数，同步磁盘，避免缓冲写带来的问题。在这个过程中，因为doublewrite页是连续的，因此这个过程是顺序写的，开销并不是很大。在完成doublewrite页的写入后，再将doublewritebuffer中的页写入各个表空间文件中，此时的写入则是离散的。\n\n\n\t引用自：姜承尧. MySQL技术内幕：InnoDB存储引擎(第2版) (数据库技术丛书) (Chinese Edition) (p. 106). 机械工业出版社. Kindle 版本.\n\n\n## **innodb 什么时候将脏页写入Doublewrite buffer中?**\n\n\n由以下几个参数决定：\n\n- innodb_max_dirty_pages_pct_lwm:低位水平标记，达到该值将启动缓冲刷新,默认为10（百分比，脏页/缓冲池）\n- innodb_max_dirty_pages_pct: 脏页数量与缓冲池比例阈值，默认为90\n- 如果开启自适应刷新（Adaptive Flushing）InnoDB根据重做日志生成的速度和当前的刷新率，使用自适应刷新算法来动态调整刷新率。\n\n# 参考\n\n\n[MySQL双写缓冲区(Doublewrite Buffer)-阿里云开发者社区 (aliyun.com)](https://developer.aliyun.com/article/1307701)\n\n\n[MySQL :: MySQL 5.7 Reference Manual :: 14.6.5 Doublewrite Buffer](https://dev.mysql.com/doc/refman/5.7/en/innodb-doublewrite-buffer.html)\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 15.6.4 Doublewrite Buffer](https://dev.mysql.com/doc/refman/8.0/en/innodb-doublewrite-buffer.html)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-25",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day65",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day65【概念解析】InnoDB Doublewrite Buffer",
        "status": "Published",
        "urlname": "5f02c699-29b2-4c1a-8464-a802364e6024",
        "updated": "2023-11-27 03:02:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "5f02c699-29b2-4c1a-8464-a802364e6024"
        }
      ],
      "body": "",
      "realName": "Day65【概念解析】InnoDB Doublewrite Buffer",
      "relativePath": "/行业概念/Day65【概念解析】InnoDB Doublewrite Buffer.md"
    },
    {
      "id": "ce076f3a-537a-48de-8331-0b2d01a2b455",
      "doc_id": "ce076f3a-537a-48de-8331-0b2d01a2b455",
      "updated": 1701054240000,
      "body_original": "\n# 整理定义\n\n\n**中文名称：** 数据字典\n\n\n**英文名称：** Data Dictionary\n\n\n**InnoDB数据字典**由内部系统表组成，这些系统表包含用于跟踪表、索引和表列等对象的元数据。这些元数据物理存储在InnoDB系统表空间中。由于历史原因，数据字典中的元数据在一定程度上与存储在InnoDB表元数据文件（.frm文件）中的信息有所重叠。\n\n\n数据字典是数据库管理系统中存储关于数据库结构详细信息的系统表的集合。在InnoDB存储引擎中，数据字典包含了表、列、索引、外键等对象的元数据。这些信息对于数据库来说至关重要，因为它们帮助数据库理解如何组织数据、如何执行查询和如何维护数据的完整性。\n\n\n![MySQL 5.7版本](https://image.kuangyichen.com/image/innodb-architecture-5-7.png)\n\n\n![MySQL 8.0版本](https://image.kuangyichen.com/image/innodb-architecture-8-0.png)\n\n\n# 复述展开\n\n\n## 关于数据字典的历史\n\n\n在早期版本的MySQL中，InnoDB使用了一种混合的方式来存储表的元数据。一部分元数据存储在InnoDB自己的系统表空间中，这部分包括了表的结构、索引信息等。而另一部分，如表的定义，则存储在MySQL的.frm文件中。这种设计意味着InnoDB的数据字典和MySQL的表定义文件之间存在一定程度的重叠。\n\n\n这种设计在实际使用中带来了一些问题。例如，如果.frm文件和InnoDB的数据字典之间的信息不一致，可能会导致错误或数据不一致的问题。此外，.frm文件是基于ISAM存储引擎的遗留文件格式，它并不是为InnoDB这样的高级存储引擎设计的，因此存在效率和灵活性的限制。\n\n\n随着`MySQL 5.6和5.7版本`的发布，InnoDB的数据字典得到了改进，但仍然依赖于.frm文件。直到MySQL 8.0的推出，InnoDB的数据字典才经历了重大的变革。在`MySQL 8.0`中，引入了一个全新的数据字典架构，它完全在InnoDB内部实现，不再依赖于.frm文件。这意味着所有的表元数据现在都存储在InnoDB的系统表空间中，这提高了元数据的操作效率，简化了代码基础，并且解决了历史遗留问题。\n\n\n【可以从上图中的`MySQL 5.7`的架构图与`MySQL 8.0`的架构图对应的差异看出来】\n\n\n新的数据字典架构使得数据库的启动和升级过程更加可靠，因为它减少了由于元数据不一致导致的问题。此外，它还为未来的功能扩展和性能优化提供了基础。总的来说，InnoDB的数据字典经历了从依赖于外部文件到完全内部化的转变，这是对InnoDB存储引擎持续改进和优化的一个证明。\n\n\nInnoDB的数据字典是一个内部系统，它为数据库中的所有对象（如表、视图、存储过程等）提供了一个详细的信息目录。它不仅包含了对象的名称和类型，还包括了对象的结构，比如表的列信息、数据类型、默认值以及列与列之间的关系。此外，数据字典还记录了索引信息，包括索引的类型和它所涉及的列，以及外键约束等。\n\n\n数据字典对于数据库的运行至关重要。当执行一个查询时，数据库会参考数据字典来确定如何最有效地访问所需的数据。同时，当进行数据修改时，数据字典也会确保所有的数据操作都遵守了数据库的规则和约束，保证数据的一致性和完整性。\n\n\n# 理解体会\n\n\n数据字典可以被看作是数据库的“百科全书”。它详尽地记录了数据库的结构和规则，就像一个图书馆的索引卡片一样，帮助数据库管理系统快速定位和理解数据的存储方式。对于数据库管理员和开发者来说，数据字典是一个宝贵的资源，因为它提供了数据库内部结构的深入了解，这对于维护、优化和故障排除都是非常有帮助的。\n\n\n在实际使用中，我们通常不直接与数据字典交互，因为它是由数据库管理系统自动维护的。但是，了解它的存在和作用对于理解数据库的内部工作原理是非常有益的。如果你是一个数据库管理员或者开发者，你可能需要查询数据字典来获取关于数据库对象的信息，这对于调试问题或者优化性能都是必不可少的。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-26",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day66",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day66【概念解析】InnoDB Data Dictionary",
        "status": "Published",
        "urlname": "ce076f3a-537a-48de-8331-0b2d01a2b455",
        "updated": "2023-11-27 03:04:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "ce076f3a-537a-48de-8331-0b2d01a2b455"
        }
      ],
      "body": "",
      "realName": "Day66【概念解析】InnoDB Data Dictionary",
      "relativePath": "/行业概念/Day66【概念解析】InnoDB Data Dictionary.md"
    },
    {
      "id": "94e33f21-1481-481a-a107-6b254db2817c",
      "doc_id": "94e33f21-1481-481a-a107-6b254db2817c",
      "updated": 1701234720000,
      "body_original": "\n# 整理定义\n\n\n## 什么是索引\n\n\n> 一句话简单来说，索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。一本500页的书，如果你想快速找到其中的某一个知识点，在不借助目录的情况下，那我估计你可得找一会儿。同样，对于数据库的表而言，索引其实就是它的“目录”。\n\n\n\t——《MySQL 45讲》林晓斌\n\n\n## MySQL的索引\n\n\n**在MySQL中，索引是一种数据结构，它通过形成代表特定列或一组列的所有值的树结构（B树），为表的行提供快速查找能力。**\n\n\nInnoDB表总是有一个代表主键的聚簇索引。它们也可以有一个或多个定义在一个或多个列上的辅助索引。根据它们的结构，辅助索引可以被分类为部分索引、列索引或复合索引。\n\n\n索引是<u>查询性能</u>的关键方面。数据库架构师设计表、查询和索引，以便快速查找应用程序所需的数据。理想的数据库设计在实际中使用覆盖索引；查询结果完全由索引计算得出，无需读取实际的表数据。每个外键约束也需要一个索引，以高效地检查父表和子表中是否存在值。\n\n\n# 复述展开\n\n\n在MySQL中，有以下几种索引：\n\n\n| 索引类型     | 优点                      | 缺点                       | 使用场景              | 存储引擎                    |\n| -------- | ----------------------- | ------------------------ | ----------------- | ----------------------- |\n| B-Tree   | 广泛适用，支持全键值、键值范围和键值排序的搜索 | 不适合全文搜索                  | 大多数情况下的查找、排序和范围查询 | InnoDB, MyISAM, Memory等 |\n| Hash     | 快速的等值查询                 | 不支持范围查询，不支持排序操作，冲突可能影响性能 | 等值比较，如哈希表         | Memory, NDB             |\n| Fulltext | 支持复杂的文本搜索，包括模糊匹配        | 仅限于文本数据，占用空间较大           | 文本搜索              | InnoDB, MyISAM          |\n| R-Tree   | 支持空间数据的多维范围搜索和多维索引      | 仅适用于空间数据类型               | 地理空间数据查询          | MyISAM                  |\n| Spatial  | 优化了空间数据的存储和查询           | 仅支持空间数据类型，不是所有存储引擎都支持    | 地理信息系统（GIS）数据     | InnoDB, MyISAM          |\n\n\n## B-Tree 与 B+Tree\n\n\nB-Tree（平衡树）和B+Tree是两种常用的索引和数据结构，它们在数据库系统中广泛应用于数据的组织、管理和索引。\n\n\n### B-Tree\n\n\n![](https://image.kuangyichen.com/image/2880px-B-tree.svg.png)\n\n\nB-Tree是一种自平衡的树数据结构，它维持数据的排序，允许搜索、顺序访问、插入和删除在对数时间内完成。B-Tree的特点包括：\n\n- 每个节点有多个孩子，节点中的键值按顺序排列。\n- 树的所有叶子节点都在同一层。\n- 节点中的键值数目有一个上限和下限（除了根节点和叶子节点）。\n- B-Tree通过分裂和合并节点来维持平衡。\n\n### B+Tree\n\n\n![](https://image.kuangyichen.com/image/Bplustree.png)\n\n\nB+Tree是B-Tree的一个变种，它具有B-Tree的所有特性，但在其结构上有所不同：\n\n- 所有的数据记录都存储在叶子节点上，叶子节点形成了一个链表，便于进行全范围扫描。\n- 非叶子节点（内部节点）仅存储键值信息，不存储数据记录，这意味着相比于B-Tree，B+Tree可以有更高的分支因子，使得树更加矮胖，减少了磁盘I/O次数。\n- 叶子节点之间通过指针连接，这提供了顺序访问数据的能力。\n\n### B-Tree与B+Tree的区别\n\n- **数据存储**：B-Tree的数据存储在**每个节点**上，而B+Tree的数据仅存储在**叶子节点**上。\n- **树的高度**：B+Tree通常更矮胖，因为内部节点不存储数据，可以有更多的子节点。\n- **范围查询**：B+Tree由于叶子节点的**链表结构**，使得范围查询更加高效。\n- **磁盘读写**：B+Tree的查询性能更加稳定，因为所有查询都要查找到叶子节点，而B-Tree的查询可能在非叶子节点就结束了。\n\n### 为什么MySQL选择使用B+Tree\n\n\nMySQL选择使用B+Tree作为索引结构，主要是因为B+Tree在数据库索引中的几个优势：\n\n- **高效的范围查询**：由于叶子节点的链表结构，B+Tree特别适合处理范围查询，这在数据库操作中非常常见。\n- **更少的磁盘I/O**：B+Tree的内部节点不存储数据，可以拥有更多的分支，这减少了树的高度，从而减少了磁盘I/O次数，提高了查询效率。\n- **查询性能稳定**：B+Tree的所有查询都要走到叶子节点，这使得每次查询的磁盘读取次数相对固定，性能更加稳定。\n\n# 理解体会\n\n\n理解MySQL，必须要学习好MySQL中的索引，知道索引的数据结构，才能更好的对其进行优化与调整。\n\n\n# 参考\n\n- MySQL索引概述: [**https://dev.mysql.com/doc/refman/8.0/en/mysql-indexes.html**](https://dev.mysql.com/doc/refman/8.0/en/mysql-indexes.html)\n- B-Tree索引: [**https://dev.mysql.com/doc/refman/8.0/en/btree-indexes.html**](https://dev.mysql.com/doc/refman/8.0/en/btree-indexes.html)\n- Hash索引: [**https://dev.mysql.com/doc/refman/8.0/en/hash-indexes.html**](https://dev.mysql.com/doc/refman/8.0/en/hash-indexes.html)\n- Fulltext索引: [**https://dev.mysql.com/doc/refman/8.0/en/fulltext-search.html**](https://dev.mysql.com/doc/refman/8.0/en/fulltext-search.html)\n- R-Tree索引: [**https://dev.mysql.com/doc/refman/8.0/en/rtree-indexes.html**](https://dev.mysql.com/doc/refman/8.0/en/rtree-indexes.html)\n- Spatial索引: [**https://dev.mysql.com/doc/refman/8.0/en/spatial-types.html**](https://dev.mysql.com/doc/refman/8.0/en/spatial-types.html)\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-27",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day67",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day67【概念解析】 MySQL Index",
        "status": "Published",
        "urlname": "94e33f21-1481-481a-a107-6b254db2817c",
        "updated": "2023-11-29 05:12:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "94e33f21-1481-481a-a107-6b254db2817c"
        }
      ],
      "body": "",
      "realName": "Day67【概念解析】 MySQL Index",
      "relativePath": "/行业概念/Day67【概念解析】 MySQL Index.md"
    },
    {
      "id": "182b509a-8264-41d6-a76f-885fc47f2642",
      "doc_id": "182b509a-8264-41d6-a76f-885fc47f2642",
      "updated": 1701232560000,
      "body_original": "\n# 整理定义\n\n\n中文名称：InnoDB 表空间\n\n\n英文名称：InnoDB Tablespace\n\n\n![MySQL 5.7版本](https://image.kuangyichen.com/image/innodb-architecture-5-7.png)\n\n\n![MySQL 8.0版本](https://image.kuangyichen.com/image/innodb-architecture-8-0.png)\n\n\n## 概念\n\n\nInnoDB是MySQL数据库的默认存储引擎，它使用了一种称为“表空间”（tablespace）的结构来存储数据。表空间是InnoDB存储系统的逻辑单位，它包含了用于存储表数据、索引、元数据等的数据文件。在物理层面，表空间可以是一个或多个文件，这些文件可以分布在文件系统的不同位置。\n\n\n## 分类\n\n\nInnoDB的表空间可以分为以下几类：\n\n1. **系统表空间**：这是InnoDB初始化时创建的表空间，通常包含在名为`ibdata1`的文件中。系统表空间不仅存储了系统表的数据和索引，还包括了撤销日志（undo logs）、数据字典、双写缓冲区（doublewrite buffer）和插入缓冲区（insert buffer）等。\n2. **文件每表表空间**：从MySQL 5.6.6版本开始，InnoDB默认为每个表创建独立的表空间文件，这些文件的扩展名通常是`.ibd`。这种方式使得每个表的数据和索引被隔离在单独的文件中，便于管理和优化。\n3. **通用表空间**：这是MySQL 5.7版本引入的特性，允许用户创建共享的表空间，多个表可以共享同一个表空间文件。这种方式提供了更灵活的数据管理选项。\n4. **临时表空间**：用于存储临时表的数据和索引。这些临时表主要用于查询处理过程中的排序和哈希操作。\n5. **撤销表空间**：用于存储撤销日志的表空间。在MySQL 5.7及更高版本中，可以配置多个撤销表空间，以提高并发事务的性能。\n\n# 复述展开\n\n\n> **Tablespace**\n\n\n\tA data file that can hold data for one or more `InnoDB` _**tables**_ and associated _**indexes**_.\n\n\n\tThe _**system tablespace**_ contains the `InnoDB` _**data dictionary**_, and prior to MySQL 5.6 holds all other `InnoDB` tables by default.\n\n\n\tThe [`innodb_file_per_table`](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_file_per_table) option, enabled by default in MySQL 5.6 and higher, allows tables to be created in their own tablespaces. File-per-table tablespaces support features such as efficient storage of _**off-page columns**_, table compression, and transportable tablespaces. See [Section 14.6.3.2, “File-Per-Table Tablespaces”](https://dev.mysql.com/doc/refman/5.7/en/innodb-file-per-table-tablespaces.html) for details.\n\n\n\t`InnoDB` introduced general tablespaces in MySQL 5.7.6. General tablespaces are shared tablespaces created using [`CREATE TABLESPACE`](https://dev.mysql.com/doc/refman/5.7/en/create-tablespace.html) syntax. They can be created outside of the MySQL data directory, are capable of holding multiple tables, and support tables of all row formats.\n\n\n\t——[MySQL :: MySQL 5.7 Reference Manual :: MySQL Glossary](https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_tablespace)\n\n\n**表空间是一个数据文件，它可以存储一个或多个InnoDB表和相关的索引**。\n\n\n**系统表空间（system tablespace）**包含InnoDB数据字典，并且在MySQL 5.6之前，默认情况下，所有其他InnoDB表都存储在其中。\n\n\n**文件每表表空间（File-per-table tablespaces）**在MySQL 5.6及更高版本中，默认启用的`innodb_file_per_table`选项允许在各自的表空间中创建表。每表一个文件的表空间支持诸如高效存储离页列、表压缩和可传输表空间等功能。\n\n\n在MySQL 5.7.6中，InnoDB引入了**通用表空间（**general tablespace**）**。通用表空间是使用CREATE TABLESPACE语法创建的共享表空间。它们可以在MySQL数据目录之外创建，能够容纳多个表，并支持所有行格式的表。\n\n\n以下是对比表：\n\n\n| 类型          | 版本               | 存储位置            | 支持的功能                                |\n| ----------- | ---------------- | --------------- | ------------------------------------ |\n| 系统表空间       | 所有版本             | MySQL数据目录       | 存储InnoDB数据字典，所有InnoDB表（在MySQL 5.6之前） |\n| **文件每表表空间** | MySQL 5.6及更高版本   | MySQL数据目录或自定义目录 | 高效存储离页列、表压缩、可传输表空间                   |\n| 通用表空间       | MySQL 5.7.6及更高版本 | MySQL数据目录或自定义目录 | 容纳多个表，支持所有行格式的表                      |\n\n\n# 理解体会\n\n\n我对表空间的理解经历了从模糊到清晰的过程。一开始，表空间这个概念对我来说相当抽象，我只知道它是与存储数据相关的某种东西。但随着不断学习和实践，我逐渐理解了表空间在InnoDB存储引擎中的核心作用。\n\n\n在我看来，InnoDB的表空间就像是一个大型的仓库，里面有许多不同的房间，每个房间都用来存放不同的物品。系统表空间就像是仓库的主要区域，存放着最重要的物品，比如撤销日志、数据字典等。而文件每表表空间则像是给每个物品分配了一个独立的小储物柜，这样就可以非常方便地管理和访问这些物品。\n\n\n在学习过程中，我对**文件每表表空间**的好处有了深刻的体会。当我在实验中删除一个表时，我发现相关的.ibd文件也随之消失了，这让我意识到了这种设计对于数据库维护和管理的便利性。我不需要担心删除一个表会影响到其他表的数据，因为它们都是独立存储的。\n\n\n**通用表空间**的概念一开始让我感到困惑，但当我了解到它可以让多个表共享同一个表空间时，我意识到这对于节省磁盘空间有很大的好处。这就像是在仓库中有一个共享区域，可以由多个小组共同使用，而不是每个小组都需要单独的存储空间。\n\n\n**临时表空间**的学习让我想到了计算机操作系统中的临时文件概念。这些临时表是为了处理查询而创建的，它们不需要长期存储，就像是我们在做数学题时草稿纸上的计算一样，用完即丢。这种设计让我对数据库的效率有了新的认识，因为它确保了即使是复杂的查询也不会对数据库的长期性能造成影响。\n\n\n**撤销表空间**的概念在我最初的学习中是最难以把握的。但当我在实验中故意制造事务失败，然后观察InnoDB如何回滚到稳定状态时，我对这一机制产生了敬畏。这就像是一个安全网，无论发生什么错误，都能确保数据不会丢失，这对于任何关心数据一致性的系统来说都是至关重要的。\n\n\n总的来说，InnoDB表空间的学习让我对数据库的内部工作有了更深入的理解。我从中学到了数据库不仅仅是存储数据的地方，它还涉及到数据的组织、管理、安全和恢复等多个方面。虽然学习过程中有时会感到困难和挑战，但每当我理解了一个新概念或成功解决了一个问题时，那种成就感和满足感是无与伦比的。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-28",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day68",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day68 【概念解析】InnoDB Tablespace",
        "status": "Published",
        "urlname": "182b509a-8264-41d6-a76f-885fc47f2642",
        "updated": "2023-11-29 04:36:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "182b509a-8264-41d6-a76f-885fc47f2642"
        }
      ],
      "body": "",
      "realName": "Day68 【概念解析】InnoDB Tablespace",
      "relativePath": "/行业概念/Day68 【概念解析】InnoDB Tablespace.md"
    },
    {
      "id": "eb1395d6-8e7a-4eb1-a91b-1dd6e79063e9",
      "doc_id": "eb1395d6-8e7a-4eb1-a91b-1dd6e79063e9",
      "updated": 1701234660000,
      "body_original": "\n# 整理定义\n\n\n**英文名称**：InnoDB System Tablespace\n\n\n**中文名称**：InnoDB 系统表空间\n\n\n相关概念：\n\n- InnoDB Tablespace，InnoDB System Tablespace是其中的一类\n\n![MySQL 5.7版本](https://image.kuangyichen.com/image/innodb-architecture-5-7.png)\n\n\n![MySQL 8.0版本](https://image.kuangyichen.com/image/innodb-architecture-8-0.png)\n\n\n## What is InnoDB System Tablespace?\n\n\nInnoDB存储引擎使用一个或多个数据文件（即ibdata文件）来存储与InnoDB相关对象的元数据，以及变更缓冲区和双写缓冲区的存储区域。如果表是在系统表空间中创建的，而不是在文件每表或通用表空间中，那么这些文件也可能包含InnoDB表和索引的数据。系统表空间中的数据和元数据适用于MySQL实例中的所有数据库。\n\n\n在MySQL 5.6.7之前，默认情况下所有InnoDB表和索引都存储在系统表空间内，这经常导致这个文件变得非常大。由于系统表空间永远不会缩小，如果加载了大量的临时数据然后删除，可能会出现存储问题。在MySQL 8.0中，默认模式是文件每表模式，其中每个表及其关联的索引都存储在单独的.ibd文件中。这种默认设置使得使用依赖于DYNAMIC和COMPRESSED行格式的InnoDB特性变得更加容易，例如表压缩、高效存储非页面列和大索引键前缀。\n\n\n将所有表数据保留在系统表空间或分散在单独的.ibd文件中，对于存储管理有着不同的影响。MySQL Enterprise Backup产品可能会备份一小组大文件，或许多小文件。在有成千上万个表的系统中，处理成千上万个.ibd文件的文件系统操作可能会导致瓶颈。\n\n\n在MySQL 5.7.6中，InnoDB引入了通用表空间，它们也由.ibd文件表示。通用表空间是使用CREATE TABLESPACE语法创建的共享表空间。它们可以在数据目录之外创建，能够容纳多个表，并支持所有行格式的表。\n\n\n# 复述展开\n\n\n## 系统表空间在MySQL 5.7和MySQL 8.0版本之间的区别\n\n\nInnoDB的系统表空间在MySQL 5.7和MySQL 8.0版本之间的主要区别主要体现在默认的表存储方式和对某些特性的支持上。以下是一些关键的差异：\n\n1. **文件每表模式（File-Per-Table Mode）**:\n\t- **MySQL 5.7**: 在这个版本中，MySQL开始默认使用文件每表模式。这意味着新创建的InnoDB表和索引会被存储在各自独立的.ibd文件中，而不是在共享的系统表空间中。这有助于避免系统表空间无限增长的问题，并且使得表空间管理更加灵活。\n\t- **MySQL 8.0**: 这个版本继续使用文件每表模式作为默认设置，并且进一步增强了对这种模式的支持，例如通过改进DML操作的性能和提供更多的在线DDL操作。\n2. **撤销日志（Undo Log）的存储**:\n\t- **MySQL 5.7**: 在这个版本中，撤销日志可以存储在系统表空间中，也可以选择配置为存储在独立的撤销表空间中。\n\t- **MySQL 8.0**: 提供了更多的灵活性来配置撤销日志，包括能够创建多个撤销表空间，以及更好地管理和配置撤销日志。\n3. **表空间管理**:\n\t- **MySQL 5.7**: 引入了通用表空间的概念，允许用户创建可以包含多个表的共享表空间，这些表空间可以使用所有行格式。\n\t- **MySQL 8.0**: 继续支持通用表空间，并且在表空间管理方面提供了更多的改进和新特性，如表空间加密等。\n4. **行格式（Row Formats）**:\n\t- **MySQL 5.7**: 支持DYNAMIC和COMPRESSED等行格式，这些格式可以在文件每表模式下使用。\n\t- **MySQL 8.0**: 进一步增强了对这些行格式的支持，特别是在表压缩和大索引键前缀方面。\n5. **性能和可扩展性**:\n\t- **MySQL 5.7**: 对InnoDB进行了多项性能优化，包括对多核处理器的优化。\n\t- **MySQL 8.0**: 引入了更多的性能改进，如对InnoDB的undo日志、redo日志和Purge操作的优化，以及对数据字典的重构，这些都是为了提高大型数据库的可扩展性和性能。\n6. **数据字典**:\n\t- **MySQL 5.7**: 数据字典仍然部分存储在系统表空间中，这意味着一些元数据是与表数据混合在一起的。\n\t- **MySQL 8.0**: 引入了一个全新的数据字典架构，它是事务性的，并且完全存储在自己的表空间中。这个改变提高了元数据操作的可靠性和效率，并且简化了系统表空间的结构。\n7. **表空间加密**:\n\t- **MySQL 5.7**: 提供了对InnoDB表空间的透明加密支持，但这是一个相对较新的特性。\n\t- **MySQL 8.0**: 加密功能得到了增强，包括对redo日志和undo日志的加密，以及更细粒度的加密选项。\n8. **信息模式和性能模式**:\n\t- **MySQL 5.7**: 提供了丰富的信息模式和性能模式视图，帮助用户监控和优化数据库性能。\n\t- **MySQL 8.0**: 在这方面进行了进一步的增强，提供了更多的监控和诊断能力。\n9. **DDL操作**:\n\t- **MySQL 5.7**: 支持在线DDL操作，这意味着可以在不中断服务的情况下进行表结构的修改。\n\t- **MySQL 8.0**: 在线DDL操作得到了极大的扩展，支持更多类型的表结构变更，减少了需要重建表的操作类型。\n10. **分区表**:\n\t- **MySQL 5.7**: 支持表的分区和子分区，但有一些限制。\n\t- **MySQL 8.0**: 对分区表的支持得到了显著改进，包括对分区表的外键支持和更多的分区算法。\n\n这些变化反映了MySQL在版本迭代中对InnoDB存储引擎的持续优化和改进，旨在提高性能、可扩展性和易用性。MySQL 8.0的许多新特性和改进都是基于在5.7版本中的经验和用户反馈。\n\n\n| 特性/版本     | MySQL 5.7             | MySQL 8.0                     |\n| --------- | --------------------- | ----------------------------- |\n| 文件每表模式    | 默认启用，新表创建为独立文件        | 继续默认启用，性能和DDL操作得到增强           |\n| 撤销日志存储    | 可存储在系统表空间或独立表空间       | 支持多个撤销表空间，更灵活的配置              |\n| 通用表空间     | 支持，可以包含多个表            | 继续支持，增加了新特性如表空间加密             |\n| 行格式       | 支持DYNAMIC和COMPRESSED等 | 增强对行格式的支持，改进表压缩和索引键前缀         |\n| 性能和可扩展性   | 多项性能优化，包括多核处理器优化      | 进一步性能改进，优化undo/redo日志和Purge操作 |\n| 数据字典      | 部分存储在系统表空间中           | 全新的事务性数据字典架构，独立存储             |\n| 表空间加密     | 提供基本的透明加密支持           | 加密功能增强，包括日志加密和更细粒度选项          |\n| 信息模式和性能模式 | 丰富的视图帮助监控和优化          | 增强监控和诊断能力                     |\n| DDL操作     | 支持在线DDL操作             | 扩展在线DDL操作，减少重建表需求             |\n| 分区表       | 支持分区和子分区，有限制          | 显著改进分区表支持，包括外键和更多算法           |\n\n\n## 配置项相关\n\n\n在MySQL中，系统表空间是InnoDB存储引擎的默认表空间，用于存储InnoDB表和索引的数据，除非显式地为这些表指定了其他的表空间。系统表空间的配置和使用方式可以通过以下几个方面来理解：\n\n1. **配置项**:\n\t- `innodb_data_file_path`: 这个配置项用于指定系统表空间的数据文件（通常是`ibdata1`）的路径和大小。例如，`innodb_data_file_path=ibdata1:12M:autoextend` 表示系统表空间的数据文件位于MySQL数据目录中，初始大小为12MB，并且会在需要时自动扩展。\n\t- `innodb_autoextend_increment`: 当系统表空间的数据文件设置为自动扩展时，这个配置项指定了每次自动扩展时增加的大小，单位是MB。\n\t- `innodb_file_per_table`: 这个配置项控制是否为每个新的InnoDB表创建独立的表空间文件（`.ibd`文件）。在MySQL 5.6.6及以后的版本中，默认值为`ON`，意味着默认情况下每个表都会使用独立的文件。\n2. **使用方式**:\n\t- **创建表时指定表空间**: 当创建一个新的InnoDB表时，可以通过`CREATE TABLE`语句中的`TABLESPACE`选项来指定表使用的表空间。如果没有指定，表将默认使用系统表空间或者文件每表模式下的独立表空间。\n\t- **管理系统表空间的大小**: 系统表空间的大小管理主要依赖于`innodb_data_file_path`配置项中的`autoextend`设置。如果系统表空间的数据文件设置为自动扩展，那么当空间不足时，它会根据`innodb_autoextend_increment`的设置自动增长。\n\t- **迁移表到独立表空间**: 如果原来的表是在系统表空间中创建的，可以通过`ALTER TABLE`语句将表移动到独立的表空间文件中，例如：`ALTER TABLE tablename ENGINE=InnoDB FILE_PER_TABLE;`。\n3. **注意事项**:\n\t- <u>系统表空间的数据文件一旦创建，其大小就不能减小</u>，即使删除了表中的数据。要减小系统表空间的大小，需要创建新的实例并迁移数据。\n\n\t\t> **Decreasing the Size of the InnoDB System Tablespace**\n\n\n\t\t\tDecreasing the size of an existing system tablespace is not supported. The only option to achieve a smaller system tablespace is to restore your data from a backup to a new MySQL instance created with the desired system tablespace size configuration.\n\n\t- 系统表空间包含了重要的系统信息，如InnoDB的数据字典和撤销日志，因此需要定期备份，并在操作系统层面上保护这些文件不被损坏。\n\t- 在MySQL 8.0中，系统表空间不再包含数据字典信息，因为数据字典已经被移到了自己的表空间中。\n\n通过合理配置和管理系统表空间，可以确保数据库的性能和可维护性。在实际使用中，推荐开启文件每表模式，这样可以更好地管理磁盘空间，提高数据库的性能。\n\n\n# 理解体会\n\n\n首先，系统表空间的设计决定了它是InnoDB存储引擎的心脏。所有的InnoDB表和索引默认都存储在这里，除非显式地为它们指定了其他的表空间。这种设计简化了初始的数据库部署，但随着数据库的增长，它可能导致系统表空间变得庞大而难以管理。这个认识让我在设计数据库时更加注重表空间的规划，以避免未来可能出现的性能瓶颈。\n\n\n其次，系统表空间的不可缩减性让我意识到了数据清理和存储优化的重要性。在实际操作中，我学会了定期归档旧数据，以减少对系统表空间的压力。同时，我也开始使用`innodb_file_per_table`配置，这样每个表的数据都存储在独立的文件中，这不仅有助于管理磁盘空间，还可以提高某些数据库操作的性能。\n\n\n再者，系统表空间的备份和恢复也是我关注的焦点。由于系统表空间包含了重要的系统信息，任何损坏都可能导致整个数据库实例的不可用。因此，我学会了定期备份系统表空间，并且在备份策略中考虑到了不同的恢复场景。这种做法在我遇到数据丢失的危机时发挥了关键作用，帮助我成功恢复了数据。\n\n\n最后，我也体会到了监控和调整系统表空间配置的重要性。通过监控系统表空间的使用情况，我可以及时发现潜在的问题，并通过调整配置来解决这些问题。例如，我可以增加数据文件的大小，或者启用自动扩展功能来应对数据增长。这些操作需要谨慎进行，因为它们会影响到数据库的性能和稳定性。\n\n\n# 参考\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 15.6.3.1 The System Tablespace](https://dev.mysql.com/doc/refman/8.0/en/innodb-system-tablespace.html)\n\n\n[MySQL :: MySQL 5.7 Reference Manual :: 14.6.3.1 The System Tablespace](https://dev.mysql.com/doc/refman/5.7/en/innodb-system-tablespace.html)\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 15.8.1 InnoDB Startup Configuration](https://dev.mysql.com/doc/refman/8.0/en/innodb-init-startup-configuration.html#innodb-startup-data-file-configuration)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-29",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day69",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day69【概念解析】InnoDB System Tablespace",
        "status": "Published",
        "urlname": "eb1395d6-8e7a-4eb1-a91b-1dd6e79063e9",
        "updated": "2023-11-29 05:11:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "eb1395d6-8e7a-4eb1-a91b-1dd6e79063e9"
        }
      ],
      "body": "",
      "realName": "Day69【概念解析】InnoDB System Tablespace",
      "relativePath": "/行业概念/Day69【概念解析】InnoDB System Tablespace.md"
    },
    {
      "id": "8c2141a8-6880-47be-9287-25410702723b",
      "doc_id": "8c2141a8-6880-47be-9287-25410702723b",
      "updated": 1701432480000,
      "body_original": "\n# 整理定义\n\n\nInnoDB File-Per-Table Tablespaces\n\n\nInnoDB **文件每表 表空间**\n\n\n一个 File-Per-Table Tablespace 包含单个 `InnoDB` 表的数据和索引，并存储在文件系统中的单个数据文件中。\n\n\n![MySQL 5.7版本](https://image.kuangyichen.com/image/innodb-architecture-5-7.png)\n\n\n![MySQL 8.0版本](https://image.kuangyichen.com/image/innodb-architecture-8-0.png)\n\n\n# 复述展开\n\n\n### File-Per-Table Tablespace Configuration\n\n\n要启用File-Per-Table模式，你需要在MySQL的配置文件（通常是my.cnf或my.ini）中设置`innodb_file_per_table`选项为。这通常是默认设置。\n\n\n```sql\n[mysqld]\ninnodb_file_per_table=ON\n```\n\n\n当这个选项被启用时，每当你创建一个新的InnoDB表时，MySQL会为该表创建一个独立的.ibd文件，在**文件每表表空间（**File-Per-Table Tablespaces**）**中，如果禁用这个操作，表会在系统表空间创建。。\n\n\n> When [`innodb_file_per_table`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_file_per_table) is enabled, tables are created in file-per-table tablespaces by default. When disabled, tables are created in the system tablespace by default.\n\n\n### File-Per-Table Tablespace Data Files\n\n\n在File-Per-Table模式下，每个InnoDB表的数据和索引都存储在一个单独的.ibd文件中。这些文件位于MySQL的数据目录下，通常与表的名称相对应。例如，如果你有一个名为`users`的表，在数据库`mydatabase`中，相应的表空间文件将是`mydatabase/users.ibd`。\n\n\n```sql\nmysql> USE mydatabase;\n\nmysql> CREATE TABLE users (\n   id INT PRIMARY KEY AUTO_INCREMENT,\n   name VARCHAR(100)\n ) ENGINE = InnoDB;\n\n$> cd /path/to/mysql/data/mydatabase\n$> ls\nusers.ibd\n```\n\n\n### File-Per-Table Tablespace Advantages\n\n1. **磁盘空间管理**：在文件每表表空间中截断或删除表后，磁盘空间会直接返还给操作系统，而共享表空间中的表操作不会减少数据文件的大小，只会在表空间内部留下可重用的空间。\n2. **ALTER TABLE操作**：在共享表空间中进行复制表的ALTER TABLE操作可能会增加表空间所占用的磁盘空间，而文件每表表空间则会在操作完成后释放额外空间。\n3. **性能**：在文件每表表空间中执行TRUNCATE TABLE操作通常比在共享表空间中执行时更快。\n4. **存储优化**：文件每表表空间的数据文件可以在不同的存储设备上创建，以优化I/O性能、进行更好的空间管理或出于备份目的。\n5. **数据迁移**：可以从另一个MySQL实例导入文件每表表空间中的表。\n6. **行格式支持**：文件每表表空间中创建的表支持DYNAMIC和COMPRESSED行格式，这些格式不被系统表空间支持。\n7. **数据恢复**：当数据损坏发生时，存储在独立表空间数据文件中的表可以更快地恢复，提高成功恢复的机会。\n8. **备份与恢复**：使用MySQL企业备份，可以快速备份或恢复文件每表表空间中的表，而不会中断对其他InnoDB表的使用。\n\n### File-Per-Table Tablespace Disadvantages\n\n1. **空间利用率**：每个文件每表表空间可能会有未使用的空间，这些空间只能被同一个表的行使用，如果不适当管理，可能会导致空间浪费。\n2. **fsync操作**：需要对多个文件每表数据文件执行fsync操作，而不是单个共享表空间数据文件。由于fsync操作是按文件执行的，多个表的写操作不能合并，可能导致更高的总fsync操作次数。\n3. **文件句柄**：mysqld必须为每个文件每表表空间保持一个打开的文件句柄，如果有大量的表使用文件每表表空间，可能会影响性能。\n4. **文件描述符**：当每个表都有自己的数据文件时，需要更多的文件描述符。\n5. **碎片**：可能会有更多的碎片产生，这可能会妨碍DROP TABLE操作和表扫描性能。然而，如果碎片得到管理，文件每表表空间可以提高这些操作的性能。\n6. **缓冲池扫描**：删除文件每表表空间中的表时，需要扫描缓冲池，对于大型缓冲池，这可能需要几秒钟。扫描是在一个广泛的内部锁的情况下执行的，可能会延迟其他操作。\n7. **自动扩展**：`innodb_autoextend_increment`变量定义了共享表空间文件满时自动扩展的增量大小，但这不适用于文件每表表空间文件的自动扩展，不考虑`innodb_autoextend_increment`设置。文件每表表空间的初始文件扩展是以较小的数量进行的，之后扩展会以4MB的增量进行。\n\n这些缺点表明，虽然文件每表表空间提供了许多管理和性能优势，但它们也引入了一些潜在的挑战，特别是在管理大量小表的环境中。数据库管理员需要权衡这些因素，以确定哪种表空间配置最适合他们的特定用例和性能需求。\n\n\n# 理解体会\n\n\n文件每表表空间为数据库管理员提供了更细粒度的控制，允许他们根据特定的性能和管理需求来优化表的存储。然而，这也需要更细心的空间管理和可能的性能权衡。在设计和维护InnoDB数据库时，选择使用文件每表表空间还是共享表空间，应该基于对这些权衡的理解和具体的应用场景需求。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-30",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day70",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day70【概念解析】InnoDB File-Per-Table Tablespace",
        "status": "Published",
        "urlname": "8c2141a8-6880-47be-9287-25410702723b",
        "updated": "2023-12-01 12:08:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "8c2141a8-6880-47be-9287-25410702723b"
        }
      ],
      "body": "",
      "realName": "Day70【概念解析】InnoDB File-Per-Table Tablespace",
      "relativePath": "/行业概念/Day70【概念解析】InnoDB File-Per-Table Tablespace.md"
    },
    {
      "id": "8c793091-9652-4897-9231-d4a0a48bf13f",
      "doc_id": "8c793091-9652-4897-9231-d4a0a48bf13f",
      "updated": 1704033360000,
      "body_original": "\n# 十一月小结\n\n\n> 😄 今天是十一月的最后一天，是时候给自己总结和复盘一下了。\n\n\n整个11月，四个字总结：**稳重求进**\n\n\n**数据如下：**\n\n1. **运动：**运动次数17次，跑步9次，共计**98.49**KM，瑜伽6次，骑行2次，共计**33.89**KM\n\n\t四个字总结：**多点开花**\n\n\t- 跑步上减少了次数，增加了距离，大多为长距离，其中**11.11日腾讯司庆跑25KM，拥有了新的PB**\n\t- 运动形式上也增多了，全面发展\n2. **学习：坚持每天学习，参与概念打卡活动全勤，英语学习暂时落下一些，需要奋力补齐！！**\n3. 体重控制在130左右，再接再厉\n4. 自从老妈来了，这个月几乎没做饭\n\n---\n\n\n> **对比10月的总结如下**\n\n\t1. **运动：**运动次数19次，跑步13次，跑量 **87.59**km\n\t2. **学习：坚持每天学习，参与概念打卡活动全勤，英语学习全勤**\n\t3. 体重控制在131左右，再接再厉\n\t4. 做饭次数10次\n\n---\n\n\n![](https://image.kuangyichen.com/image/11月小结截图.webp)\n\n\n[bookmark](https://kuangyichen.com/running)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-30",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202311",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2023年11月",
        "status": "Published",
        "urlname": "8c793091-9652-4897-9231-d4a0a48bf13f",
        "updated": "2023-12-31 14:36:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "8c793091-9652-4897-9231-d4a0a48bf13f"
        }
      ],
      "body": "",
      "realName": "[阶段小结]2023年11月",
      "relativePath": "/三省吾身/[阶段小结]2023年11月.md"
    },
    {
      "id": "29299214-e0fb-487f-9cd4-64e9725b2c69",
      "doc_id": "29299214-e0fb-487f-9cd4-64e9725b2c69",
      "updated": 1701432720000,
      "body_original": "\n# 整理定义\n\n\n中文名称：InnoDB 通用表空间\n\n\n英文名称：InnoDB General Tablespace\n\n\n![MySQL 8.0版本](https://image.kuangyichen.com/image/innodb-architecture-8-0.png)\n\n\n### 概念定义\n\n\n> A general tablespace is a shared `InnoDB` tablespace that is created using [`CREATE TABLESPACE`](https://dev.mysql.com/doc/refman/8.0/en/create-tablespace.html) syntax.  \n> ——《[MySQL官网](https://dev.mysql.com/doc/refman/8.0/en/general-tablespaces.html)》\n\n\n在InnoDB存储引擎中，表空间（Tablespace）是存储表数据和索引的物理文件。传统上，InnoDB使用单独的表空间文件（每个表一个.ibd文件）或者将所有表数据存储在系统表空间中。**通用表空间**提供了一种中间的解决方案，允许用户创建一个独立的表空间文件，这个文件可以包含多个表，但不是所有的表。\n\n\nInnoDB通用表空间（General Tablespace）是MySQL数据库中的一个特性，它允许用户创建一个共享的表空间，其中可以包含多个InnoDB表。这个特性从MySQL 5.7.6版本开始引入，提供了一种灵活的方式来管理数据库中的表。\n\n\n# 复述展开\n\n\nMySQL官网提到**通用表空间**具有下面一些能力：\n\n- 与**系统表空间（system tablespace）**类似，**通用表空间**是**共享**的表空间，能够存储多个表的数据。\n- 与**文件每表表空间（file-per-table tablespaces）**相比，通用表空间在内存方面可能有优势。服务器会在表空间的生命周期内，将表空间元数据保留在内存中。相比于同样数量的表分别存储在各自的每个表一个文件的表空间中，多个表存储在较少的通用表空间中会消耗更少的内存用于表空间元数据。\n- 通用表空间的数据文件可以放置在相对于MySQL数据目录的目录中，或者独立于MySQL数据目录之外，这为您提供了许多与**文件每表表空间（file-per-table tablespaces）**相同的数据文件和存储管理能力。与**文件每表表空间（file-per-table tablespaces）**一样，将数据文件放置在MySQL数据目录之外的能力，允许您分别管理关键表的性能，为特定表设置RAID或DRBD，或者将表绑定到特定的磁盘。\n- 通用表空间支持所有表行格式及其相关功能。\n- 可以在`CREATE TABLE`时使用`TABLESPACE`选项，在**通用表空间**、**文件每表表空间**或**系统表空间**中创建表。\n- 可以在`ALTER TABLE`时使用`TABLESPACE`选项，将表在**通用表空间**、**文件每表表空间**和**系统表空间**之间移动。\n\n### 用途\n\n\n通用表空间的引入主要是为了提供更好的灵活性和管理便利性。它的用途包括：\n\n- **空间管理：** 通过将表组织到单独的文件中，可以更容易地管理磁盘空间。\n- **备份和恢复：** 通用表空间可以简化备份和恢复过程，因为相关的表都存储在同一个文件中。\n- **传输数据：** 通用表空间可以用于更方便地在服务器之间迁移数据。\n- **文件大小限制：** 对于使用文件系统限制单个文件大小的环境，通用表空间可以帮助规避这些限制。\n\n### 使用方式\n\n\n创建通用表空间非常简单，可以使用以下SQL命令：\n\n\n```sql\nCREATE TABLESPACE tablespace_name\nADD DATAFILE 'file_name.ibd'\nENGINE=InnoDB;\n```\n\n\n在创建了通用表空间之后，可以在创建新表或移动现有表时指定这个表空间：\n\n\n```sql\nCREATE TABLE table_name (\n    ...\n) TABLESPACE tablespace_name ENGINE=InnoDB;\n\nALTER TABLE table_name TABLESPACE tablespace_name;\n```\n\n\n### 注意事项\n\n\n在使用通用表空间时，有几个重要的注意事项：\n\n- **兼容性：** 一旦表被添加到通用表空间，它就不能被移回到系统表空间或转换为文件表空间。\n- **备份：** 当使用通用表空间时，需要确保备份策略包括了这些表空间文件。\n- **性能：** 由于多个表共享同一个表空间，可能会影响到I/O性能，特别是在高负载环境下。\n- **文件管理：** 通用表空间的文件需要手动管理，数据库不会自动删除这些文件，即使相关的表已经被删除。\n- **迁移：** 在迁移通用表空间到另一个服务器时，需要确保文件路径和名称与原服务器保持一致。\n\n# 理解体会\n\n\nInnoDB通用表空间是MySQL数据库管理中的一个强大工具，它提供了额外的灵活性和便利性。通过使用通用表空间，数据库管理员可以更好地控制数据的物理存储，简化备份和恢复过程，并在必要时轻松迁移数据。然而，这也需要管理员对表空间的管理采取更加谨慎的态度，以确保数据的完整性和性能的最优化。在实施之前，应该仔细考虑通用表空间的优势与潜在的挑战，并制定相应的策略来充分利用这一特性。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-01",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day71",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day71【概念解析】 InnoDB General Tablespace",
        "status": "Published",
        "urlname": "29299214-e0fb-487f-9cd4-64e9725b2c69",
        "updated": "2023-12-01 12:12:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "29299214-e0fb-487f-9cd4-64e9725b2c69"
        }
      ],
      "body": "",
      "realName": "Day71【概念解析】 InnoDB General Tablespace",
      "relativePath": "/行业概念/Day71【概念解析】 InnoDB General Tablespace.md"
    },
    {
      "id": "36f26696-ded6-49ae-89a5-c4882c94987e",
      "doc_id": "36f26696-ded6-49ae-89a5-c4882c94987e",
      "updated": 1701777180000,
      "body_original": "\n# 整理定义\n\n\n中文名称：InnoDB 撤销表空间\n\n\n英文名称：InnoDB Undo Tablespace\n\n\n![MySQL 5.7版本](https://image.kuangyichen.com/image/innodb-architecture-5-7.png)\n\n\n![MySQL 8.0版本](https://image.kuangyichen.com/image/innodb-architecture-8-0.png)\n\n\n# 复述展开\n\n\n### 什么是Undo Tablespace？\n\n\nUndo Tablespace是InnoDB存储引擎用来存储undo日志的地方。Undo日志记录了事务发生之前的数据状态，如果一个事务需要回滚，InnoDB就会使用undo日志来恢复数据到事务开始前的状态。此外，undo日志也用于MVCC中，以提供事务的隔离级别保证，允许读取事务开始前的数据版本。\n\n\n### Undo日志的作用\n\n\nUndo日志主要有两个作用：\n\n1. **事务回滚：** 当事务执行失败或者被显式地回滚时，undo日志可以用来撤销已经执行的操作，确保数据的一致性。\n2. **多版本并发控制（MVCC）：** 在读取旧数据版本时，即使数据已经被其他事务修改，undo日志也能提供一个数据的快照，这样就可以实现非锁定读取。\n\n### Undo Tablespace的结构\n\n\nUndo Tablespace由多个undo日志段组成，每个段可以包含多个undo日志。当InnoDB初始化时，会创建两个undo表空间，但是用户也可以根据需要配置更多的undo表空间。\n\n\n### 管理Undo Tablespace\n\n\n在MySQL 5.7及以后的版本中，Undo Tablespace可以被配置为独立的表空间，这样做的好处是可以更好地管理磁盘空间，提高性能。管理员可以根据数据库的工作负载来增加或减少undo表空间的数量。\n\n\n### 如何学习Undo Tablespace？\n\n1. **官方文档：** 阅读MySQL官方文档中关于InnoDB Undo Tablespace的章节，这是获取最权威、最详细信息的途径。\n2. **在线教程和课程：** 有许多在线资源提供了关于InnoDB和Undo Tablespace的教程和课程，这些可以帮助你从基础到高级的知识。\n3. **实践操作：** 在自己的MySQL环境中实际操作，比如创建新的\n\n# 理解体会\n\n- MySQL在初始化时会创建两个默认的undo表空间，用于存储必要的回滚段，以便可以处理SQL语句。\n- 这些表空间通常位于由`innodb_undo_directory`变量指定的目录中，如果未指定，则在数据目录中创建。\n- 默认的undo表空间文件被命名为`undo_001`和`undo_002`。\n- 从MySQL 8.0.14版本开始，可以在运行时动态地添加更多的undo表空间。\n- undo表空间的初始大小在MySQL 8.0.23之前依赖于页面大小，而从8.0.23版本开始，通常固定为16MiB，但在某些情况下可能会有所不同\n\n# 参考文档：\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 15.6.3.4 Undo Tablespaces](https://dev.mysql.com/doc/refman/8.0/en/innodb-undo-tablespaces.html#innodb-undo-tablespace-rollback-segments)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-02",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day72",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day72【概念解析】InnoDB Undo Tablespace",
        "status": "Published",
        "urlname": "36f26696-ded6-49ae-89a5-c4882c94987e",
        "updated": "2023-12-05 11:53:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "36f26696-ded6-49ae-89a5-c4882c94987e"
        }
      ],
      "body": "",
      "realName": "Day72【概念解析】InnoDB Undo Tablespace",
      "relativePath": "/行业概念/Day72【概念解析】InnoDB Undo Tablespace.md"
    },
    {
      "id": "35316dbc-72aa-4f72-8fd5-c882c1ab9689",
      "doc_id": "35316dbc-72aa-4f72-8fd5-c882c1ab9689",
      "updated": 1701780180000,
      "body_original": "\n# 整理定义\n\n\nInnoDB 临时表空间（InnoDB Temporary Tablespace）\n\n\n![MySQL 5.7版本](https://image.kuangyichen.com/image/innodb-architecture-5-7.png)\n\n\n![MySQL 8.0版本](https://image.kuangyichen.com/image/innodb-architecture-8-0.png)\n\n\n# 复述展开\n\n\n### 什么是InnoDB 临时表空间？\n\n\nInnoDB临时表空间是一个特殊的表空间，用于存储临时表和临时数据。这些数据通常是查询操作中产生的，比如排序或者子查询操作。临时表空间是在MySQL服务器启动时创建的，并且在服务器运行期间一直存在。\n\n\n### InnoDB 临时表空间的特点\n\n- **临时性：** 存储在临时表空间中的数据是临时的，当MySQL服务器重启时，这些数据会被清除。\n- **独立性：** 临时表空间与InnoDB的主表空间是分开的，这意味着它不会影响到持久存储的数据。\n- **性能：** 由于临时表空间用于存储临时数据，它通常配置在高速存储设备上，以提高查询性能。\n\n### InnoDB 临时表空间的使用场景\n\n- **排序操作：** 当SQL查询包含排序操作，且不能完全在内存中完成时，排序数据会被存储在临时表空间中。\n- **子查询和派生表：** 执行子查询或者处理派生表（使用`FROM`子句的子查询生成的表）时，中间结果可能会存储在临时表空间中。\n- **哈希索引：** 在某些情况下，InnoDB可能会使用临时表空间来存储哈希索引，尤其是在处理复杂的联接操作时。\n\n### 管理InnoDB 临时表空间\n\n- **配置：** 你可以在MySQL的配置文件（通常是`my.cnf`或`my.ini`）中设置`innodb_temp_data_file_path`参数来定义临时表空间文件的位置和大小。\n- **监控：** 使用`SHOW TABLE STATUS`和`INFORMATION_SCHEMA`表可以帮助你监控临时表空间的使用情况。\n- **维护：** 由于临时表空间中的数据在MySQL重启后会被清除，通常不需要手动维护。但是，监控其大小和性能是一个好习惯，以确保它不会成为性能瓶颈。\n\n### 学习InnoDB 临时表空间的最佳实践\n\n- **优化查询：** 为了减少对临时表空间的依赖，应当优化查询，尽可能地在内存中完成操作。这包括使用合适的索引、避免不必要的排序和复杂的子查询。\n- **硬件选择：** 考虑将临时表空间放置在快速的存储介质上，比如SSD，这样可以加快临时数据的读写速度，提高查询性能。\n- **配置调整：** 根据你的服务器的工作负载，调整`innodb_temp_data_file_path`的大小。如果你的系统经常执行大量的复杂查询，可能需要更大的临时表空间。\n\n### 学习资源\n\n- **官方文档：** 阅读MySQL官方文档中关于InnoDB临时表空间的部分，这是获取最权威信息的途径。\n- **在线教程：** 在线有许多关于MySQL优化的教程，其中很多都会涉及到临时表空间的使用和优化。\n- **社区和论坛：** 加入MySQL相关的社区和论坛，比如Stack Overflow，可以让你向经验丰富的开发者和数据库管理员学习。\n- **实践：** 最好的学习方式是通过实践。在你自己的数据库上尝试不同的配置，观察临时表空间的表现，这将帮助你更好地理解其工作原理。\n\n# 理解体会\n\n\nInnoDB临时表空间是处理MySQL中临时数据的关键组件。了解它的工作原理、使用场景和管理方式对于任何希望优化数据库性能的人来说都是非常重要的。通过阅读官方文档、参与社区讨论、观看教程和实际操作，你可以逐步成为InnoDB临时表空间的高效使用者。记住，持续监控和适时优化是确保数据库性能的关键。\n\n\n# 参考\n\n\n[MySQL :: MySQL 5.7 Reference Manual :: 14.6.3.5 The Temporary Tablespace](https://dev.mysql.com/doc/refman/5.7/en/innodb-temporary-tablespace.html)\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 15.6.3.5 Temporary Tablespaces](https://dev.mysql.com/doc/refman/8.0/en/innodb-temporary-tablespace.html)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-03",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day73",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day73 【概念解析】InnoDB Temporary Tablespace ",
        "status": "Published",
        "urlname": "35316dbc-72aa-4f72-8fd5-c882c1ab9689",
        "updated": "2023-12-05 12:43:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "35316dbc-72aa-4f72-8fd5-c882c1ab9689"
        }
      ],
      "body": "",
      "realName": "Day73 【概念解析】InnoDB Temporary Tablespace ",
      "relativePath": "/行业概念/Day73 【概念解析】InnoDB Temporary Tablespace .md"
    },
    {
      "id": "60471d1c-ad80-4eae-aafc-d697a4ce008d",
      "doc_id": "60471d1c-ad80-4eae-aafc-d697a4ce008d",
      "updated": 1701950460000,
      "body_original": "\n# 整理定义\n\n\n## **什么是锁：**\n\n\n锁是数据库系统区别于文件系统的一个关键特性。锁机制用于管理对共享资源的井发访问。InnoDB存储引会在行级别上对表数据上锁，这固然不错。不过InnODB存储引擎也会在数据库内部其他多个地方使用锁，从而允许对多种不同资源提供井发访问。例如，操作缓冲池中的LRU列表，删除、添加、移动LRU列表中的元素，为了保证一致性，必须有锁的介人。数据库系统使用锁是为了支持对共享资源进行并发访问，提供数据的完整性和一致性。\n\n\n### InnoDB 锁定机制简介\n\n\nInnoDB 是 MySQL 默认的存储引擎，它提供了事务支持，包括 ACID 属性（原子性、一致性、隔离性和持久性）。锁定机制是实现事务隔离性的关键手段，它确保了当多个用户并发访问数据库时，每个事务都能看到一个一致的数据视图。\n\n\n# 复述展开\n\n\n### 锁定的类型\n\n\nInnoDB 提供了多种类型的锁定，主要包括：\n\n- **共享锁（S Lock）：** 允许事务读取一行数据。\n- **排他锁（X Lock）：** 允许事务更新或删除一行数据。\n- **意向锁：** 是一种表级锁，表明事务打算在表中的行上设置共享锁或排他锁。\n- **记录锁：** 直接应用于数据行。\n- **间隙锁：** 锁定一个范围，但不包括记录本身。\n- **临键锁（Next-Key Locks）：** 是记录锁和间隙锁的组合，它锁定一个范围并包括行本身。\n\n### 锁定的工作原理\n\n\n当事务要修改数据时，它会根据需要自动获取相应的锁。例如，如果一个事务要更新一行数据，它会获取该行的排他锁。如果另一个事务试图读取或修改同一行数据，它必须等待第一个事务完成并释放锁。\n\n\n# 理解体会\n\n\n### 如何学习 InnoDB 锁定机制\n\n1. **理解基础概念：** 首先，你需要理解事务、ACID 属性以及锁定的基本概念。\n2. **阅读官方文档：** MySQL 官方文档提供了关于 InnoDB 锁定机制的详细信息，是学习的最佳起点。\n3. **实践操作：** 在你的开发环境中创建事务，实践不同类型的锁定，并观察它们的行为。\n4. **监控锁定：** 学习如何使用 `SHOW ENGINE INNODB STATUS` 命令和 `INFORMATION_SCHEMA` 表来监控锁定。\n5. **理解隔离级别：** 学习不同的事务隔离级别（READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE）以及它们如何影响锁定行为。\n6. **分析死锁：** 死锁是数据库锁定中常见的问题。学习如何分析和解决死锁。\n7. **社区交流：** 加入 MySQL 社区，与其他数据库专业人士交流学习经验。\n8. **案例研究：** 研究其他人的案例学习，了解在不同情况下如何处理锁定问题。\n\n## 结论\n\n\nInnoDB 的锁定机制是确保数据库事务安全和高效运行的关键。通过上述步骤，你可以系统地学习和掌握 InnoDB 的锁定机制。实践是最好的学习方式，不断尝试和调整，你将能够更深入地理解锁定的工作原理。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-04",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day74",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day74【概念解析】InnoDB 锁",
        "status": "Published",
        "urlname": "60471d1c-ad80-4eae-aafc-d697a4ce008d",
        "updated": "2023-12-07 12:01:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "60471d1c-ad80-4eae-aafc-d697a4ce008d"
        }
      ],
      "body": "",
      "realName": "Day74【概念解析】InnoDB 锁",
      "relativePath": "/行业概念/Day74【概念解析】InnoDB 锁.md"
    },
    {
      "id": "7ab75082-9d83-4342-9e76-eaf9676b0d76",
      "doc_id": "7ab75082-9d83-4342-9e76-eaf9676b0d76",
      "updated": 1701950460000,
      "body_original": "\n# 整理定义\n\n\n**名词定义：Shared and Exclusive Locks（共享锁**和**排它锁**，或者也叫S锁，X锁）\n\n- 共享锁（Shared Lock，也叫S锁）\n- 排他锁（Exclusive Lock，也叫排他锁）\n\n# 复述展开\n\n\n## 共享锁\n\n\n> **Shared Locks**\n\n\n\tA kind of _**lock**_ that allows other _**transactions**_ to read the locked object, and to also acquire other shared locks on it, but not to write to it. The opposite of _**exclusive lock**_.\n\n\n> 💡 一种锁，允许其他事务读取锁定的对象，并获取该对象上的其他共享锁，但不能写入该对象。 与排他锁相反。\n\n\n## 排他锁\n\n\n> **Exclusive Lock**  \n> A kind of _**lock**_ that prevents any other _**transaction**_ from locking the same row. Depending on the transaction _**isolation level**_, this kind of lock might block other transactions from writing to the same row, or might also block other transactions from reading the same row. The default `InnoDB` isolation level, _**REPEATABLE READ**_, enables higher _**concurrency**_ by allowing transactions to read rows that have exclusive locks, a technique known as _**consistent read**_.\n\n\n> 💡 一种锁，可防止任何其他事务锁定同一行。 根据事务隔离级别，这种锁可能会阻止其他事务写入同一行，也可能会阻止其他事务读取同一行。 默认的 InnoDB 隔离级别“可重复读取”通过允许事务读取具有排他锁的行来实现更高的并发性，这种技术称为“一致性读取”。\n\n\n# 理解体会\n\n\n下面用表格展示下共享锁和排它锁的兼容\n\n\n|    | S锁  | X锁  |\n| -- | --- | --- |\n| S锁 | 兼容  | 不兼容 |\n| X锁 | 不兼容 | 不兼容 |\n\n\n> 💡 如果一个事务T1给 r 行加了 S锁，那么事务T2可以读取 r ，但无法写入 r，只有等T1释放了S锁才能写入。  \n> 如果一个事务T1给 r 行加了X锁，那么事务T2既不能读取也不能写入 r，只有等T1释放了X锁才能操作。\n\n\n共享锁的设计允许多个事务并发地读取同一数据，这在只读操作占主导的应用场景中非常有用，因为它提高了并发性能。然而，共享锁也可能导致所谓的“写入阻塞”，即如果有事务持有数据行的 S 锁，那么其他想要写入的事务就必须等待，直到所有的 S 锁被释放。\n\n\n排他锁的主要特点是它保证了事务的独立性。在并发环境中，如果多个事务试图修改同一数据，排他锁确保每个事务都可以在没有其他事务干扰的情况下完成操作。这就避免了数据的不一致性和更新丢失的问题。例如，当两个银行客户同时试图从同一个账户中取款时，排他锁确保了只有一个事务能够在同一时间修改账户余额，从而防止了超额提款。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-05",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day75",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day75【概念解析】共享锁和排他锁",
        "status": "Published",
        "urlname": "7ab75082-9d83-4342-9e76-eaf9676b0d76",
        "updated": "2023-12-07 12:01:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "7ab75082-9d83-4342-9e76-eaf9676b0d76"
        }
      ],
      "body": "",
      "realName": "Day75【概念解析】共享锁和排他锁",
      "relativePath": "/行业概念/Day75【概念解析】共享锁和排他锁.md"
    },
    {
      "id": "655028a0-9cbb-4736-bf8f-ad946efae144",
      "doc_id": "655028a0-9cbb-4736-bf8f-ad946efae144",
      "updated": 1701950460000,
      "body_original": "\n# 整理定义\n\n\n在学习意向锁之前，我们先学习下 **多粒度锁**\n\n\n> 💡 **多粒度锁**（英语：Multiple granularity locking，**MGL**）是一种用在[数据库](https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93)以及[关系数据库](https://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93)的锁定方式。MGL常被用在两阶段锁定法（Two-phase locking）以确保可串行性（Serializability）。\n\n\n**意向锁（Intention Lock）**：意向锁是放置在资源层次结构的一个级别上的锁，以保护较低级别资源上的共享锁或排它锁。\n\n\n# 复述展开\n\n\n意向锁（Intention Locks）是一种在数据库系统中使用的锁，它们是一种表明事务打算在表的某些行上加锁的信号。在支持多粒度锁定（Multiple Granularity Locking, MGL）的数据库系统中，意向锁是非常重要的，因为它们允许锁系统在不同级别上有效地工作，例如表级别和行级别。\n\n\n### 意向锁的种类\n\n\n在 InnoDB 存储引擎中，有两种主要的意向锁：\n\n1. **意向共享锁（Intention Shared Lock, IS锁）**：事务想要在某个数据行上加共享锁之前，必须先在包含该行的表上加上 IS 锁。\n2. **意向排他锁（Intention Exclusive Lock, IX锁）**：事务想要在某个数据行上加排他锁之前，必须先在包含该行的表上加上 IX 锁。\n\n### 意向锁的作用\n\n\n意向锁的主要作用是为了在数据库中实现锁的兼容性和冲突检测。它们不会阻止其他事务对表中的行进行读取或写入，但是它们会阻止其他事务对整个表加排他锁，直到所有的意向锁都被释放。这样做的目的是为了在不同级别的锁之间提供一种协调机制。\n\n\n### 意向锁的工作原理\n\n\n当一个事务想要对一行数据进行操作时，它会根据操作的类型（读或写）在表上设置相应的意向锁。如果事务想要读取一行数据，它会设置一个 IS 锁；如果事务想要修改一行数据，它会设置一个 IX 锁。\n\n\n其他事务在尝试对表加锁时会检查这些意向锁。例如，如果一个事务想要对整个表加一个排他锁，它必须等待直到所有的 IS 锁和 IX 锁都被释放。这是因为排他锁要求没有其他事务可以读取或写入表中的任何行。\n\n\n### 意向锁的优势\n\n\n意向锁的主要优势在于它们允许数据库系统在保持高并发的同时，维护一致性和隔离性。通过在表级别上设置意向锁，事务可以在不必检查表中每一行的锁状态的情况下，快速确定是否可以对表进行锁定。这大大减少了锁定检查的开销，提高了系统的整体性能。\n\n\n# 理解体会\n\n\n意向锁是数据库并发控制的一个重要组成部分，它们使得数据库能够在维护事务隔离性的同时，提供高效的锁定策略。通过在表级别上声明事务的意图，意向锁简化了锁兼容性的检查过程，并使得锁管理更加高效。虽然意向锁本身不会阻止对行的访问，但它们是实现行级锁定和表级锁定协调的关键机制。\n\n\n|          | **`X`** | **`IX`** | **`S`** | **`IS`** |\n| -------- | ------- | -------- | ------- | -------- |\n| **`X`**  | 冲突      | 冲突       | 冲突      | 冲突       |\n| **`IX`** | 冲突      | **兼容**   | 冲突      | 冲突       |\n| **`S`**  | 冲突      | 冲突       | **兼容**  | **兼容**   |\n| **`IS`** | 冲突      | 冲突       | **兼容**  | **兼容**   |\n\n\n如果想更深入MGL可以参考 \n\n\n[Multiple Granularity Locking in DBMS - GeeksforGeeks](https://www.geeksforgeeks.org/multiple-granularity-locking-in-dbms/)\n\n\n# 参考\n\n\n[Multiple Granularity Locking in DBMS - GeeksforGeeks](https://www.geeksforgeeks.org/multiple-granularity-locking-in-dbms/)\n\n\n[Multiple granularity locking - Wikipedia](https://en.wikipedia.org/wiki/Multiple_granularity_locking)\n\n\n[意向锁_百度百科 (baidu.com)](https://baike.baidu.com/item/%E6%84%8F%E5%90%91%E9%94%81/244186)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-06",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day76",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day76 【概念解析】 Intention Lock",
        "status": "Published",
        "urlname": "655028a0-9cbb-4736-bf8f-ad946efae144",
        "updated": "2023-12-07 12:01:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "655028a0-9cbb-4736-bf8f-ad946efae144"
        }
      ],
      "body": "",
      "realName": "Day76 【概念解析】 Intention Lock",
      "relativePath": "/行业概念/Day76 【概念解析】 Intention Lock.md"
    },
    {
      "id": "da23251d-5135-46d2-be88-ce55299e6d27",
      "doc_id": "da23251d-5135-46d2-be88-ce55299e6d27",
      "updated": 1702270740000,
      "body_original": "\n# 整理定义\n\n\n**间隙锁（Gap Lock）**\n\n\n间隙锁是对索引记录之间的间隙的锁定，或者是对第一个索引记录之前或最后一个索引记录之后的间隙的锁定。例如，语句 `SELECT c1 FROM t WHERE c1 BETWEEN 10 and 20 FOR UPDATE;` 阻止其他事务在列 t.c1 中插入值 15，无论该列中是否已经存在该值，因为锁定了范围内所有现有值之间的间隙。\n\n\n间隙可能跨越单个索引值、多个索引值，甚至可能是空的。\n\n\n# 复述展开\n\n\n间隙锁是性能和并发之间权衡的一部分，在某些事务隔离级别中使用，在其他级别中则不使用。\n\n\n对于使用唯一索引搜索唯一行的语句，不需要间隙锁定。（这不包括搜索条件仅包含多列唯一索引中的一些列的情况；在这种情况下，会发生间隙锁定。）例如，如果 id 列有唯一索引，以下语句仅对具有 id 值 100 的行使用索引记录锁，并且不关心其他会话是否在前面的间隙中插入行：\n\n\n```sql\nSELECT * FROM child WHERE id = 100;\n```\n\n\n如果 id 没有索引或有非唯一索引，该语句确实会锁定前面的间隙。\n\n\n此外，不同的事务可以在同一个间隙上持有冲突的锁。例如，事务 A 可以在一个间隙上持有共享间隙锁（gap S-lock），而事务 B 在同一个间隙上持有排他间隙锁（gap X-lock）。允许冲突的间隙锁存在的原因是，如果一个记录从索引中清除，不同事务在该记录上持有的间隙锁必须合并。\n\n\nInnoDB 中的间隙锁是“纯粹抑制性的”，这意味着它们的唯一目的是防止其他事务向间隙中插入。间隙锁可以共存。一个事务持有的间隙锁不会阻止另一个事务在同一个间隙上持有间隙锁。共享和排他间隙锁之间没有区别。它们不会相互冲突，并且它们执行相同的功能。\n\n\n可以显式地禁用间隙锁。如果你将事务隔离级别更改为 READ COMMITTED，就会发生这种情况。在这种情况下，间隙锁对搜索和索引扫描被禁用，仅用于外键约束检查和重复键检查。\n\n\n使用 READ COMMITTED 隔离级别还有其他一些效果。MySQL 在评估 WHERE 条件后会释放非匹配行的记录锁。对于 UPDATE 语句，InnoDB 执行“半一致性”读取，这样它就会返回最新的提交版本给 MySQL，以便 MySQL 可以确定行是否与 UPDATE 的 WHERE 条件匹配。\n\n\n# 总结\n\n\n间隙锁是数据库中用于管理并发和维护数据一致性的一种锁机制。它们主要用于防止事务在索引记录之间的间隙中插入数据，从而可能影响其他事务的查询或更新操作。间隙锁对于保持数据的隔离性和一致性至关重要，尤其是在可重复读（REPEATABLE READ）隔离级别下。\n\n\n在唯一索引的情况下，间隙锁通常不是必需的，因为唯一性保证了不会有重复的值插入。然而，如果索引不是唯一的，或者查询条件不包括所有的唯一索引列，间隙锁可能会被使用。\n\n\n间隙锁可以是共享的或排他的，但在 InnoDB 中，这两种类型的间隙锁实际上是相同的，因为它们都是为了防止数据插入到间隙中。不同事务可以在同一个间隙上持有间隙锁，而不会相互冲突。\n\n\n在 READ COMMITTED 隔离级别下，间隙锁的使用被限制，仅在特定情况下（如外键检查和重复键检查）才会使用。此外，这个隔离级别还允许在确定行不匹配 WHERE 条件后立即释放记录锁，以及在 UPDATE 操作中使用半一致性读取，这些都有助于提高并发性能，但可能会牺牲一定程度的数据一致性。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-07",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day77",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day77【概念解析】Gap Lock",
        "status": "Published",
        "urlname": "da23251d-5135-46d2-be88-ce55299e6d27",
        "updated": "2023-12-11 04:59:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "da23251d-5135-46d2-be88-ce55299e6d27"
        }
      ],
      "body": "",
      "realName": "Day77【概念解析】Gap Lock",
      "relativePath": "/行业概念/Day77【概念解析】Gap Lock.md"
    },
    {
      "id": "e576558c-e12f-49fa-99ab-5b71add06e02",
      "doc_id": "e576558c-e12f-49fa-99ab-5b71add06e02",
      "updated": 1702270980000,
      "body_original": "\n# 整理定义\n\n\n记录锁（**Record Locks）**\n\n\n> **Record Locks**\n\n\n\tA record lock is a lock on an index record. For example, `SELECT c1 FROM t WHERE c1 = 10 FOR UPDATE;` prevents any other transaction from inserting, updating, or deleting rows where the value of `t.c1` is `10`.\n\n\n\tRecord locks always lock index records, even if a table is defined with no indexes. For such cases, `InnoDB` creates a hidden clustered index and uses this index for record locking.\n\n\n\t————《[MySQL :: MySQL 8.0 Reference Manual :: 15.7.1 InnoDB Locking](https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html#innodb-record-locks)》\n\n\n记录锁是索引记录上的锁。 例如，SELECT c1 FROM t WHERE c1 = 10 FOR UPDATE； 防止任何其他事务插入、更新或删除 t.c1 值为 10 的行。\n\n\n记录锁始终锁定索引记录，即使表定义为没有索引。 对于这种情况，InnoDB 创建一个隐藏的聚集索引并使用该索引进行记录锁定。\n\n\n# 复述展开\n\n\n### 记录锁的工作原理\n\n\n当事务A尝试修改表中的一行数据时，InnoDB会检查该行是否已经被其他事务锁定：\n\n- 如果没有被锁定，事务A会在该行上放置一个记录锁，并执行修改操作。\n- 如果已经被其他事务锁定，事务A将会等待，直到锁被释放，或者超时（根据InnoDB的超时设置）。\n\n记录锁是排他的（exclusive），这意味着如果事务A在一行数据上持有记录锁，其他事务不能对这行数据进行修改或删除，直到事务A提交或回滚释放锁。\n\n\n### 记录锁与事务隔离级别\n\n\nInnoDB的记录锁行为受到事务隔离级别的影响。MySQL支持四种事务隔离级别：\n\n1. READ UNCOMMITTED（读未提交）\n2. READ COMMITTED（读已提交）\n3. REPEATABLE READ（可重复读，默认级别）\n4. SERIALIZABLE（可串行化）\n\n在REPEATABLE READ级别下，InnoDB会使用next-key锁，这是记录锁和间隙锁的组合，它锁定索引记录并防止在索引记录之间插入新行。而在READ COMMITTED级别下，InnoDB使用的是纯记录锁，不会锁定间隙。\n\n\n### 记录锁的影响\n\n\n记录锁是保证事务安全的重要机制，但它们也可能导致一些问题，如死锁和锁竞争。死锁发生在两个或多个事务相互等待对方释放锁的情况下，这会导致事务无法继续执行。InnoDB有自己的死锁检测机制来处理这种情况，通常是通过回滚其中一个事务来解锁。\n\n\n锁竞争发生在高并发环境中，许多事务试图同时锁定同一数据行。这可能会导致性能下降，因为事务必须等待其他事务释放锁。\n\n\n### 最佳实践\n\n\n为了最大限度地减少记录锁带来的性能问题和死锁的可能性，开发者应该遵循一些最佳实践：\n\n- 尽量减少事务的大小和持续时间，以减少锁定资源的时间。\n- 在可能的情况下，使用乐观锁定而不是悲观锁定。\n- 设计索引以优化查询，减少需要锁定的行数。\n- 避免不必要的全表扫描，这可能会导致大量的行被锁定。\n- 使用合适的事务隔离级别，以平衡一致性需求和性能。\n\n### 记录锁的性能优化\n\n\n虽然记录锁对于事务的一致性至关重要，但不恰当的使用可能会导致性能问题。为了优化性能，可以采取以下措施：\n\n- **索引优化**：确保查询都能利用到索引，这样可以减少锁定的数据量，因为InnoDB只会锁定查询触及到的索引记录。\n- **查询优化**：优化查询逻辑，避免复杂的关联查询，这样可以减少锁的数量和持续时间。\n- **分批处理**：对于大量数据的更新和删除操作，可以分批进行，每次处理一小部分数据，这样可以减少锁定资源的时间。\n- **锁定粒度控制**：在某些情况下，可以通过锁定更大的数据粒度（如表锁）来减少锁的数量，但这通常会降低并发性。\n\n# 理解体会\n\n\nInnoDB的记录锁是一个强大的工具，用于确保事务的一致性和隔离性。然而，它们需要谨慎使用，以避免性能降低和死锁问题。理解记录锁的工作原理和它们如何与InnoDB的其他锁类型（如间隙锁和临键锁）相互作用，对于数据库管理员和开发者来说至关重要。\n\n\n**记录锁一般会和间隙锁一起使用，他们组合起来也就是临键锁。**\n\n\n在InnoDB中，记录锁通常与间隙锁和临键锁一起使用，以实现不同的隔离级别。临键锁是记录锁和间隙锁的组合，它不仅锁定了一条记录，还锁定了该记录之前的间隙。这种锁的机制在**可重复读（REPEATABLE READ）**隔离级别下是默认行为，它可以防止幻读——即在一个事务中两次执行同样的查询却得到不同结果的现象。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-08",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day78",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day78【概念解析】Record Lock",
        "status": "Published",
        "urlname": "e576558c-e12f-49fa-99ab-5b71add06e02",
        "updated": "2023-12-11 05:03:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "e576558c-e12f-49fa-99ab-5b71add06e02"
        }
      ],
      "body": "",
      "realName": "Day78【概念解析】Record Lock",
      "relativePath": "/行业概念/Day78【概念解析】Record Lock.md"
    },
    {
      "id": "2a4573be-2451-438d-89b2-1b5b4906d687",
      "doc_id": "2a4573be-2451-438d-89b2-1b5b4906d687",
      "updated": 1702296480000,
      "body_original": "\n# 整理定义\n\n\nSQL中的三种语言，DML，DDL，DCL。\n\n\n**DML**(Data manipulation language) 数据操作语言，包含 `INSERT` `UPDATE` `DELETE` `SELECT` 的SQL语句，统称为DML。\n\n\n**DDL**(Data definition language) 数据定义语言，包含 `CREATE` `ALTER` `DROP` `TRUNCATE` 的SQL语句，是用于管理数据库本身而不是单独的表行的SQL语句。\n\n\n**DCL**(Data control language) 数据控制语言，包含 `GRANT` 与 `REVOKE`，是管理权限的SQL语句\n\n\n> **DML(**Data manipulation language**)**\n\n\n\tData manipulation language, a set of _**SQL**_ statements for performing [`INSERT`](https://dev.mysql.com/doc/refman/8.0/en/insert.html), [`UPDATE`](https://dev.mysql.com/doc/refman/8.0/en/update.html), and [`DELETE`](https://dev.mysql.com/doc/refman/8.0/en/delete.html) operations. The [`SELECT`](https://dev.mysql.com/doc/refman/8.0/en/select.html) statement is sometimes considered as a DML statement, because the `SELECT ... FOR UPDATE` form is subject to the same considerations for _**locking**_ as [`INSERT`](https://dev.mysql.com/doc/refman/8.0/en/insert.html), [`UPDATE`](https://dev.mysql.com/doc/refman/8.0/en/update.html), and [`DELETE`](https://dev.mysql.com/doc/refman/8.0/en/delete.html).\n\n\n\tDML statements for an `InnoDB` table operate in the context of a _**transaction**_, so their effects can be _**committed**_ or _**rolled back**_ as a single unit.\n\n\n> **DDL(**Data definition language**)**\n\n\n\tData definition language, a set of _**SQL**_ statements for manipulating the database itself rather than individual table rows. Includes all forms of the `CREATE`, `ALTER`, and `DROP` statements. Also includes the `TRUNCATE` statement, because it works differently than a `DELETE FROM` _**`table_name`**_ statement, even though the ultimate effect is similar.\n\n\n\tDDL statements automatically _**commit**_ the current _**transaction**_; they cannot be _**rolled back**_.\n\n\n> **DCL(**Data control language**)**  \n> Data control language, a set of _**SQL**_ statements for managing privileges. In MySQL, consists of the [`GRANT`](https://dev.mysql.com/doc/refman/8.0/en/grant.html) and [`REVOKE`](https://dev.mysql.com/doc/refman/8.0/en/revoke.html) statements. Contrast with _**DDL**_ and _**DML**_.\n\n\n# 复述展开\n\n\n下面是一个简单的表格，概述了DML、DDL和DCL的定义、区别、使用方式以及示例：\n\n\n| 类别                               | 定义                     | 区别                   | 使用方式                          | 示例                                                                                                                                                                                           |\n| -------------------------------- | ---------------------- | -------------------- | ----------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| DML (Data Manipulation Language) | 用于添加、删除、更新和查询数据库记录的语言。 | 直接与数据记录进行交互，不会改变表结构。 | 通常在常规数据库操作中使用，如插入、更新、删除和查询数据。 | INSERT INTO table_name (column1, column2) VALUES (value1, value2);\nUPDATE table_name SET column1 = value1 WHERE condition;\nDELETE FROM table_name WHERE condition;\nSELECT * FROM table_name; |\n| DDL (Data Definition Language)   | 用于定义和修改数据库结构的语言。       | 改变表结构，如创建或删除表和索引。    | 在数据库设计和建模阶段使用，或者在需要修改表结构时使用。  | CREATE TABLE table_name (column1 datatype, column2 datatype);\nALTER TABLE table_name ADD column_name datatype;\nDROP TABLE table_name;\nCREATE INDEX index_name ON table_name (column_name);   |\n| DCL (Data Control Language)      | 用于控制数据库中的数据访问权限的语言。    | 与数据的安全性、访问权限和控制相关。   | 在需要管理用户权限和控制对数据库对象访问时使用。      | GRANT SELECT ON database.table TO 'user'@'host';\nREVOKE SELECT ON database.table FROM 'user'@'host';                                                                                         |\n\n\n# 理解体会\n\n\n理解这三者的定义以及区别，能够更快地了解不同SQL语句的差异，方便后续对于SQL的操作。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-10",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day80",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day80【概念解析】 DML，DDL，DCL",
        "status": "Published",
        "urlname": "2a4573be-2451-438d-89b2-1b5b4906d687",
        "updated": "2023-12-11 12:08:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "2a4573be-2451-438d-89b2-1b5b4906d687"
        }
      ],
      "body": "",
      "realName": "Day80【概念解析】 DML，DDL，DCL",
      "relativePath": "/行业概念/Day80【概念解析】 DML，DDL，DCL.md"
    },
    {
      "id": "06d5189c-b49b-47ca-a000-b58401fdb847",
      "doc_id": "06d5189c-b49b-47ca-a000-b58401fdb847",
      "updated": 1702518480000,
      "body_original": "\n# 整理定义\n\n\n**临键锁（Next-key Lock）**= Gap Lock + Record Lock\n\n\n临键锁是索引记录上的**记录锁**和索引记录之前的间隙上的**间隙锁**的组合。\n\n\n# 复述展开\n\n\nInnoDB 以这样的方式执行行级锁定：**当它搜索或扫描表索引时，它会在遇到的索引记录上设置共享锁（S锁）或排他锁（X锁）**。 因此，行级锁实际上是索引记录锁。 索引记录上的**临键锁**也会影响该索引记录之前的“间隙”。 也就是说，**临键锁**是索引记录锁加上索引记录之前间隙上的间隙锁。 如果一个会话对索引中的记录 R 具有共享锁或独占锁，则另一个会话无法在索引顺序中紧邻 R 之前的间隙中插入新索引记录。\n\n\n假设索引包含值 10、11、13 和 20。该索引可能的**临键锁**涵盖以下区间，其中圆括号表示排除区间端点，方括号表示包含端点：\n\n\n```sql\n(-∞, 10]\n(10, 11]\n(11, 13]\n(13, 20]\n(20, +∞)\n```\n\n\n对于最后一个间隔，**临键锁**锁定索引中最大值和“**supremum**”伪记录的值高于索引中的任何值。上确界不是一个真正的索引记录，因此，实际上，这个下一个键锁只锁定最大索引值后面的间隙。\nInnoDB的默认事务隔离级别为 **可重复读（Repeated Read）**。在这种情况下，InnoDB使用**临键锁**进行搜索和索引扫描，这可以防止**幻读**。\n\n\n> 也可以理解为一种特殊的**间隙锁**。通过**临建锁**可以解决`幻读`的问题。 每个数据行上的**非唯一索引列**上都会存在一把**临键锁**，当某个事务持有该数据行的**临键锁**时，会锁住一段**左开右闭区间**的数据。需要强调的一点是，InnoDB 中**行级锁**是基于索引实现的，**临键锁**只与**非唯一索引列**有关，在`唯一索引列（包括主键列）上不存在临键锁`。\n\n\n\t——[MySQL记录锁、间隙锁、临键锁（Next-Key Locks）详解 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/435113954)\n\n\n|    | 事务A                                                | 事务B                                            |\n| -- | -------------------------------------------------- | ---------------------------------------------- |\n| T1 | `UPDATE table SET name = Vladimir WHERE age = 14;` |                                                |\n| T2 |                                                    | `INSERT INTO table VALUES(100, 19, 'tianqi');` |\n| T3 | commit                                             |                                                |\n| T3 |                                                    | commit                                         |\n\n\nT2会因为T1对 age 为 19的列进行锁定后，将（14，20]的区间进行了锁定\n\n\n很明显，事务 A 在对 age 为 24 的列进行 UPDATE 操作的同时，也获取了（14，20] 这个区间内的临键锁。\n\n\n> 【[funnylog.gitee.io/mysql45/21讲为什么我只改一行的语句，锁这么多.html](https://funnylog.gitee.io/mysql45/21%E8%AE%B2%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%8F%AA%E6%94%B9%E4%B8%80%E8%A1%8C%E7%9A%84%E8%AF%AD%E5%8F%A5%EF%BC%8C%E9%94%81%E8%BF%99%E4%B9%88%E5%A4%9A.html)】\n\n\n\t首先说明一下，这些加锁规则我没在别的地方看到过有类似的总结，以前我自己判断的时候都是想着代码里面的实现来脑补的。这次为了总结成不看代码的同学也能理解的规则，是我又重新刷了代码临时总结出来的。所以，**这个规则有以下两条前提说明：**\n\n\t1. MySQL后面的版本可能会改变加锁策略，所以这个规则只限于截止到现在的最新版本，即5.x系列<=5.7.24，8.0系列 <=8.0.13。\n\t2. 如果大家在验证中有发现bad case的话，请提出来，我会再补充进这篇文章，使得一起学习本专栏的所有同学都能受益。\n\n\t因为间隙锁在可重复读隔离级别下才有效，所以本篇文章接下来的描述，若没有特殊说明，默认是可重复读隔离级别。\n\n\n\t**我总结的加锁规则里面，包含了两个“原则”、两个“优化”和一个“bug”。**\n\n\t1. 原则1：加锁的基本单位是next-key lock。希望你还记得，next-key lock是前开后闭区间。\n\t2. 原则2：查找过程中访问到的对象才会加锁。\n\t3. 优化1：索引上的等值查询，给唯一索引加锁的时候，next-key lock退化为行锁。\n\t4. 优化2：索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock退化为间隙锁。\n\t5. 一个bug：唯一索引上的范围查询会访问到不满足条件的第一个值为止。\n\n# 理解体会\n\n\n这里对 **记录锁**、**间隙锁**、**临键锁** 做一个总结\n\n- **InnoDB** 中的**行锁**的实现依赖于**索引**，一旦某个加锁操作没有使用到索引，那么该锁就会退化为`表锁`。\n- **记录锁**存在于包括**主键索引**在内的**唯一索引**中，锁定单条索引记录。\n- **临键锁**存在于**非唯一索引**中，锁定**开区间**范围内的一段间隔，它是基于**间隙锁**实现的。\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-09",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day79",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day79【概念解析】Next-key Lock",
        "status": "Published",
        "urlname": "06d5189c-b49b-47ca-a000-b58401fdb847",
        "updated": "2023-12-14 01:48:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "06d5189c-b49b-47ca-a000-b58401fdb847"
        }
      ],
      "body": "",
      "realName": "Day79【概念解析】Next-key Lock",
      "relativePath": "/行业概念/Day79【概念解析】Next-key Lock.md"
    },
    {
      "id": "ef64726e-d448-4f5f-9b89-8e0bda9a6d93",
      "doc_id": "ef64726e-d448-4f5f-9b89-8e0bda9a6d93",
      "updated": 1703832360000,
      "body_original": "\n创建一个详细的MySQL学习思维导图的文本大纲可能是这样的：\n\n1. **MySQL概述**\n1.1. 历史与版本\n1.2. 特点\n1.3. 应用场景\n1.4. 架构\n2. **基础知识**\n2.1. 安装与配置\n2.1.1. Windows安装\n2.1.2. Linux安装\n2.1.3. 配置文件（my.cnf/my.ini）\n2.2. 数据类型\n2.2.1. 数值类型\n2.2.2. 字符串类型\n2.2.3. 日期和时间类型\n2.3. SQL语法\n2.3.1. 基本查询（SELECT）\n2.3.2. 数据更新（INSERT, UPDATE, DELETE）\n2.3.3. 数据定义（CREATE, ALTER, DROP）\n2.4. 函数与运算符\n2.4.1. 字符串函数\n2.4.2. 数值函数\n2.4.3. 日期和时间函数\n2.4.4. 条件表达式\n3. **进阶使用**\n3.1. 索引\n3.1.1. 索引原理\n3.1.2. 创建和管理索引\n3.1.3. 索引类型（B-Tree, Hash, Full-text）\n3.2. 存储引擎\n3.2.1. InnoDB\n3.2.2. MyISAM\n3.2.3. Memory\n3.3. 事务处理\n3.3.1. 事务概念\n3.3.2. ACID属性\n3.3.3. 锁定机制\n3.4. 性能优化\n3.4.1. 查询优化\n3.4.2. 索引优化\n3.4.3. 服务器参数调优\n4. **高级特性**\n4.1. 触发器\n4.1.1. 触发器概念\n4.1.2. 创建和管理触发器\n4.2. 存储过程和函数\n4.2.1. 存储过程\n4.2.2. 函数\n4.3. 视图\n4.3.1. 视图概念\n4.3.2. 创建和管理视图\n4.4. 分区\n4.4.1. 分区类型\n4.4.2. 分区管理\n5. **数据库管理**\n5.1. 用户与权限\n5.1.1. 用户管理\n5.1.2. 权限系统\n5.2. 备份与恢复\n5.2.1. 数据备份策略\n5.2.2. 数据恢复技术\n5.3. 安全性\n5.3.1. 安全配置\n5.3.2. 加密与SSL\n5.4. 监控与日志\n5.4.1. 日志文件\n5.4.2. 监控工具\n6. **扩展知识**\n6.1. MySQL复制\n6.1.1. 复制原理\n6.1.2. 主从配置\n6.2. 集群\n6.2.1. MySQL Cluster\n6.2.2. Galera Cluster\n6.3. 云数据库服务\n6.3.1. Amazon RDS\n6.3.2. Google Cloud SQL\n6.4. NoSQL与MySQL\n6.4.1. Memcached与MySQL\n6.4.2. MongoDB与MySQL\n\n这个大纲提供了一个全面的MySQL学习路径，从基础知识到高级特性，再到数据库管理和扩展知识。每个主题下都有更详细的子主题，帮助学习者逐步深入理解MySQL数据库。实际的思维导图会以图形的形式展示这些信息，使得层次结构更加直观。\n\n\n> 😀 这里写文章的前言：  \n> 一个简单的开头,简述这篇文章讨论的问题、目标、人物、背景是什么？并简述你给出的答案。  \n> 可以说说你的故事：阻碍、努力、结果成果，意外与转折。\n\n\n# 📝 主旨内容\n\n\n## 观点1\n\n\n> 引用的话语\n\n\n## 观点2\n\n\n> 引用的话语\n\n\n# 🤗 总结归纳\n\n\n总结文章的内容\n\n\n# 📎 参考文章\n\n- 一些引用\n- 引用文章\n\n> 💡 有关Notion安装或者使用上的问题，欢迎您在底部评论区留言，一起交流~\n\n\n[2023年最值得收藏的MySQL学习路线（建议收藏🔥） | 二哥的Java进阶之路 (javabetter.cn)](https://javabetter.cn/xuexiluxian/mysql.html#mysql-%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-29",
        "type": "Post",
        "category": "",
        "slug": "",
        "tags": [],
        "summary": "",
        "title": "MySQL知识点总结",
        "status": "Draft",
        "urlname": "ef64726e-d448-4f5f-9b89-8e0bda9a6d93",
        "updated": "2023-12-29 06:46:00"
      },
      "body": "",
      "realName": "MySQL知识点总结",
      "relativePath": "/MySQL知识点总结.md"
    },
    {
      "id": "02fb2da3-a36a-4f29-bb0e-02203e544821",
      "doc_id": "02fb2da3-a36a-4f29-bb0e-02203e544821",
      "updated": 1702296540000,
      "body_original": "\n# 整理定义\n\n\n**autocommit（自动提交）**\n\n\n`autocommit`模式是数据库系统的一个设置，当这个设置被启用时，每个SQL语句都会被视为一个独立的事务，并且在执行后立即被提交。这意味着，如果你执行了一个`INSERT`、`UPDATE`或`DELETE`语句，该操作会立即生效，数据被永久写入数据库，无需显式调用`COMMIT`命令。\n\n\n在`autocommit`模式关闭的情况下，你需要显式地开始一个事务，并用`COMMIT`或`ROLLBACK`语句结束它。这允许你执行多个操作作为一个单一的事务单元，要么全部成功，要么在遇到错误时全部回滚。\n\n\n**Commit（提交）**\n\n\n`COMMIT`命令用于结束一个事务，并将自事务开始以来进行的所有修改永久保存到数据库中。当你执行`COMMIT`时，所有自上一个`COMMIT`或`ROLLBACK`以来的更改都会成为数据库的一部分。如果数据库系统崩溃或发生故障，已经提交的事务保证不会丢失，这是由数据库的持久性特性所保证的。\n\n\n**Rollback（回滚）**\n\n\n`ROLLBACK`命令与`COMMIT`相反，它用于撤销一个事务中的所有操作。如果在执行一系列操作时遇到错误，或者你决定出于某种原因不希望更改生效，可以使用`ROLLBACK`命令。执行`ROLLBACK`后，自上一个`COMMIT`或`ROLLBACK`以来的所有更改都将被撤销，数据库状态回到事务开始时的状态。\n\n\n# 复述展开\n\n1. **InnoDB事务模型**：在InnoDB存储引擎中，所有用户活动都是在事务中进行的。如果启用了`autocommit`模式，每个SQL语句都会自动成为一个**单独**的事务。\n2. **autocommit模式**：默认情况下，MySQL在每个新连接的会话中启用`autocommit`。这意味着，**如果SQL语句执行成功，MySQL会在每个语句之后自动进行提交（COMMIT）**。如果语句执行出错，是否提交或回滚取决于具体的错误类型。\n3. **显式事务**：即使在`autocommit`模式启用的情况下，也可以通过显式地使用`START TRANSACTION`或`BEGIN`开始一个事务，并使用`COMMIT`或`ROLLBACK`来结束它，从而执行多条语句的事务。\n4. **禁用autocommit模式**：在会话中通过`SET autocommit = 0`禁用`autocommit`模式后，该会话将始终保持一个开放的事务。使用`COMMIT`或`ROLLBACK`可以结束当前事务，并自动开始一个新的事务。\n5. **会话结束时的事务处理**：如果`autocommit`模式被禁用，并且会话在没有显式提交最后一个事务的情况下结束，MySQL将回滚该事务。\n6. **隐式提交**：某些语句执行时会隐式地结束当前事务，就好像在执行该语句之前进行了`COMMIT`一样。\n7. **COMMIT与ROLLBACK**：`COMMIT`操作会使当前事务中的所有更改变为永久性，并且这些更改对其他会话可见。而`ROLLBACK`操作则取消当前事务中的所有修改。无论是`COMMIT`还是`ROLLBACK`，都会释放当前事务中设置的所有InnoDB锁。\n\n## 语句模板\n\n\n```sql\nSTART TRANSACTION\n    [transaction_characteristic [, transaction_characteristic] ...]\n\ntransaction_characteristic: {\n    WITH CONSISTENT SNAPSHOT\n  | READ WRITE\n  | READ ONLY\n}\n\nBEGIN [WORK]\nCOMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nSET autocommit = {0 | 1}\n```\n\n\n这些语句提供对事务使用的控制：\n\n- START TRANSACTION 或 BEGIN 启动新事务。\n- COMMIT 提交当前事务，使其更改永久化。\n- ROLLBACK 回滚当前事务，取消其更改。\n- SET autocommit 禁用或启用当前会话的默认自动提交模式。\n\n默认情况下，MySQL 运行时启用自动提交模式。 这意味着，当不在事务内部时，每个语句都是原子的，就好像它被 START TRANSACTION 和 COMMIT 包围一样。 您不能使用 ROLLBACK 来撤消效果； 但是，如果在语句执行期间发生错误，则该语句将回滚。\n\n\n# 理解体会\n\n\n通过对上述的学习，可以体会到了事务对于数据库操作的重要性，它们是保证数据完整性和一致性的关键。同时，了解`autocommit`模式的工作原理对于编写高效且安全的数据库交互代码至关重要。正确地管理事务可以避免数据丢失和脏读，也可以在出现错误时恢复到一致的状态。\n\n\n# 参考\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 15.7.2.2 autocommit, Commit, and Rollback](https://dev.mysql.com/doc/refman/8.0/en/innodb-autocommit-commit-rollback.html)\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 13.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements](https://dev.mysql.com/doc/refman/8.0/en/commit.html)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-11",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day81",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day81【概念解析】Autocommit, Commit, and Rollback",
        "status": "Published",
        "urlname": "02fb2da3-a36a-4f29-bb0e-02203e544821",
        "updated": "2023-12-11 12:09:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "02fb2da3-a36a-4f29-bb0e-02203e544821"
        }
      ],
      "body": "",
      "realName": "Day81【概念解析】Autocommit, Commit, and Rollback",
      "relativePath": "/行业概念/Day81【概念解析】Autocommit, Commit, and Rollback.md"
    },
    {
      "id": "6bfc9cbd-11f7-4230-b508-305a460af8ca",
      "doc_id": "6bfc9cbd-11f7-4230-b508-305a460af8ca",
      "updated": 1702347900000,
      "body_original": "\n# 整理定义\n\n\nC**onsistent Read 一致性读**\n\n\n> **consistent read**\n\n\n\tA read operation that uses _**snapshot**_ information to present query results based on a point in time, regardless of changes performed by other transactions running at the same time. If queried data has been changed by another transaction, the original data is reconstructed based on the contents of the _**undo log**_. This technique avoids some of the _**locking**_ issues that can reduce _**concurrency**_ by forcing transactions to wait for other transactions to finish.\n\tWith _**REPEATABLE READ**_ _**isolation level**_, the snapshot is based on the time when the first read operation is performed. With _**READ COMMITTED**_ isolation level, the snapshot is reset to the time of each consistent read operation.\n\tConsistent read is the default mode in which `InnoDB` processes `SELECT` statements in _**READ COMMITTED**_ and _**REPEATABLE READ**_ isolation levels. Because a consistent read does not set any locks on the tables it accesses, other sessions are free to modify those tables while a consistent read is being performed on the table.\n\t——《[MySQL :: MySQL 8.0 Reference Manual :: MySQL Glossary](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_consistent_read)》\n\n\n**一致性读**，是一种读操作，它使用快照信息基于某个时间点呈现查询结果，而不管同时运行的其他事务执行的更改如何。 如果查询的数据被另一个事务更改，则根据undo log的内容重建原始数据。 此技术通过强制事务等待其他事务完成来避免一些可能降低并发性的锁定问题。\n\n\n使用 `REPEATABLE READ` 隔离级别时，快照基于执行第一次读取操作的时间。 使用 `READ COMMITTED` 隔离级别，快照将重置为每个一致读操作的时间。\n\n\n一致性读是 InnoDB 在 `READ COMMITTED` 和 `REPEATABLE READ` 隔离级别下处理 SELECT 语句的默认模式。 由于一致性读不会对其访问的表设置任何锁定，因此在对表执行一致性读时，其他会话可以自由修改这些表。\n\n\n# 复述展开\n\n\n**一致性读**意味着InnoDB使用多版本控制来为查询提供数据库在某一时间点的快照。查询只能看到在那个时间点<u>之前</u>已提交的事务所做的更改，而看不到之后或未提交事务所做的更改。这个规则的例外是，<u>查询可以看到同一事务中较早语句所做的更改</u>。\n\n\n> 🚫 这个例外会导致以下异常情况：如果你更新了表中的一些行，一个SELECT语句会看到这些行的最新版本，但它也可能看到任何行的旧版本。如果其他会话同时更新同一个表，这种异常意味着你可能看到的表状态是数据库中实际从未存在过的。\n\n\n不同隔离级别下的一致性读\n\n- 在REPEATABLE READ（默认级别）隔离级别下，同一事务内的所有一致性读取都会读取该事务中**第一次读取**时建立的快照。通过提交当前事务然后发出新的查询，你可以为你的查询获取一个更新的快照。\n- 在READ COMMITTED隔离级别下，事务中的每个一致性读取都会设置并读取它自己的**最新快照**。\n\n> 💡 一致性读取是InnoDB在READ COMMITTED和REPEATABLE READ隔离级别下处理SELECT语句的默认模式。一致性读取不会对它访问的表设置任何锁，因此其他会话可以自由地同时修改这些表。  \n> 假设你正在默认的REPEATABLE READ隔离级别下运行。当你发出一致性读取（即，一个普通的SELECT语句）时，InnoDB会给你的事务一个时间点，根据这个时间点你的查询就可以看到数据库的状态。如果另一个事务在你的时间点被分配后删除了一行并提交，你将看不到该行被删除。插入和更新也是类似处理的。\n\n\n在下面的示例中，仅当 Session B 提交了插入并且 Session A 也提交了时，SessionA 才能看到 Session B 插入的行，因此时间点提前超过了Session B 的提交。\n\n\n```sql\n        \t Session A              Session B\n\n           SET autocommit=0;      SET autocommit=0;\ntime\n|          SELECT * FROM t;\n|          empty set\n|                                 INSERT INTO t VALUES (1, 2);\n|\nv          SELECT * FROM t;\n           empty set\n                                  COMMIT;\n\n           SELECT * FROM t;\n           empty set\n\n           COMMIT;\n\n           SELECT * FROM t;\n           ---------------------\n           |    1    |    2    |\n           ---------------------\n```\n\n\n如果想看到最新的结果，可以使用 \n\n\n```sql\nSELECT * FROM t FOR SHARE;\n```\n\n\n在`READ COMMITTED`隔离级别下，事务中的每个一致性读取都会设置并读取它自己的新鲜快照。使用FOR SHARE时，会发生锁定读取：SELECT语句会阻塞，直到包含最新行的事务结束。\n\n\n一致性读取在某些DDL语句上不适用：\n\n- 一致性读取在DROP TABLE上不适用，因为MySQL无法使用已被删除的表，而InnoDB会销毁该表。\n- 一致性读取在ALTER TABLE操作上不适用，这些操作会创建原始表的临时副本，并在临时副本建立后删除原始表。当你在事务中重新发起一致性读取时，新表中的行不可见，因为这些行在事务快照拍摄时不存在。在这种情况下，事务会返回一个错误：ER_TABLE_DEF_CHANGED，“表定义已更改，请重试事务”。\n\n对于像INSERT INTO ... SELECT、UPDATE ... (SELECT)和CREATE TABLE ... SELECT这样的子句中的选择，如果没有指定FOR UPDATE或FOR SHARE，读取类型会有所不同：\n\n- 默认情况下，InnoDB对这些语句使用更强的锁定，并且SELECT部分的行为类似`READ COMMITTED`，其中每个一致性读取，即使在同一事务内，也会设置并读取它自己的新鲜快照。\n- 要在这种情况下执行非锁定读取，将事务的隔离级别设置为`READ UNCOMMITTED`或`READ COMMITTED`，以避免对从所选表中读取的行设置锁。\n\n# 理解体会\n\n\n一致性读（Consistent Read）是数据库事务中的一个重要概念，特别是在支持多版本并发控制（MVCC）的数据库系统中，如InnoDB存储引擎。我的理解如下：\n\n1. **时间点快照**：一致性读提供了在特定时间点的数据快照。这意味着，当你执行一个查询操作时，你看到的数据是在事务开始时或者第一次一致性读取发生时的状态，不受之后其他事务所做更改的影响。\n2. **非阻塞读取**：在一致性读取模式下，SELECT语句不会对读取的数据加锁，这允许其他事务可以并发地对这些数据进行修改，从而提高了数据库的并发性能。\n3. **隔离级别的影响**：一致性读取的行为会受到事务隔离级别的影响。在REPEATABLE READ（可重复读）隔离级别下，事务中的所有一致性读取都会看到第一次读取时的数据快照。而在READ COMMITTED（读已提交）隔离级别下，每次一致性读取都会获得一个新的数据快照。\n4. **处理数据修改**：在一致性读取中，你可以看到事务开始前已经提交的修改，但看不到在你的事务开始后其他事务所做的修改。如果你的事务中有修改操作，那么同一事务中后续的一致性读取会看到这些修改，因为它们是由当前事务所做的。\n5. **与锁定读取的对比**：一致性读取与锁定读取（如SELECT ... FOR UPDATE或SELECT ... FOR SHARE）不同。锁定读取会对选中的数据行加锁，防止其他事务对这些行进行修改，直到当前事务完成。而一致性读取则允许其他事务的并发修改，因为它不依赖于锁来保持数据的一致性。\n6. **DDL语句的限制**：一致性读取不适用于某些数据定义语言（DDL）操作，如DROP TABLE或ALTER TABLE。这是因为这些操作会改变表的结构，甚至删除表，从而使得在操作前的数据快照不再有效。\n7. **错误处理**：如果在执行DDL操作后尝试进行一致性读取，数据库可能会返回错误，因为所依赖的数据结构已经发生了变化。\n8. **事务中的一致性读取**：在一个事务中，如果你执行了一个更新操作，随后的一致性读取会看到这个更新，即使其他事务尚未看到这个变化。这是因为事务提供了一个隔离的环境，确保了操作的原子性和一致性。\n\n总的来说，一致性读取是数据库事务隔离的一个关键特性，它允许用户在不加锁的情况下读取一致的数据快照，同时也支持高并发的数据访问。这种机制在保证数据一致性的同时，避免了长时间的锁等待和潜在的死锁问题，是数据库设计中平衡一致性、可用性和分区容错性（CAP理论）的一个实际应用。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-12",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day82",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day82 【概念解析】Consistent Read",
        "status": "Published",
        "urlname": "6bfc9cbd-11f7-4230-b508-305a460af8ca",
        "updated": "2023-12-12 02:25:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "6bfc9cbd-11f7-4230-b508-305a460af8ca"
        }
      ],
      "body": "",
      "realName": "Day82 【概念解析】Consistent Read",
      "relativePath": "/行业概念/Day82 【概念解析】Consistent Read.md"
    },
    {
      "id": "34716a96-cf51-4341-8b0a-5adc77309838",
      "doc_id": "34716a96-cf51-4341-8b0a-5adc77309838",
      "updated": 1703048160000,
      "body_original": "\n# 整理定义\n\n\n> 💡 锁定读（Locking Read）是InnoDB中用于控制并发访问的机制之一，确保数据的一致性和完整性。\n\n\n锁定读（Locking Read），锁定读是指在读取数据时，InnoDB会对数据行施加锁定，以防止其他事务对这些数据进行修改。这是事务隔离级别和锁定策略的一部分，用于实现不同的一致性要求。\n\n\n> 锁定读：一个在InnoDB表上执行锁定操作的SELECT语句。可以使用`SELECT ... FOR UPDATE`或`SELECT ... LOCK IN SHARE MODE`。根据事务的隔离级别，它有可能导致死锁。这是非锁定读（Non Lock Read）的相反操作。在只读事务中，全局表不允许使用此操作。\n\n\n\t在`MySQL 8.0.1`中，`SELECT ... FOR SHARE`取代了`SELECT ... LOCK IN SHARE MODE`，但为了向后兼容性，`LOCK IN SHARE MODE`仍然可用。\n\n\n\t——《[MySQL :: MySQL 8.0 Reference Manual :: MySQL Glossary](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_locking_read)》\n\n\n# 复述展开\n\n\n## 分类\n\n\nInnoDB中的**锁定读**主要有两种类型：\n\n1. **共享锁（Shared Locks）**:\n\t- 允许一个事务读取一行数据。\n\t- 其他事务可以读取相同的行，但不能修改它，直到锁被释放。\n\t- 通常通过`SELECT ... LOCK IN SHARE MODE`语句获得。\n2. **排他锁（Exclusive Locks）**:\n\t- 允许一个事务读取并修改一行数据。\n\t- 其他事务既不能读取也不能修改这行数据，直到锁被释放。\n\t- 通常通过`SELECT ... FOR UPDATE`语句获得。\n\n## 例子\n\n\n假设有一个账户表`accounts`，包含账户余额信息。如果你想要选中一个账户并更新其余额，你可能会这样做：\n\n\n```sql\nSTART TRANSACTION;\nSELECT balance FROM accounts WHERE account_id = 1 FOR UPDATE;\nUPDATE accounts SET balance = balance - 100 WHERE account_id = 1;\nCOMMIT;\n```\n\n\n这里，`SELECT ... FOR UPDATE`语句对账户ID为1的行施加了排他锁，直到事务提交之前，其他任何事务都不能读取或修改这一行。\n\n\n# 理解体会\n\n\n**锁定读（Locking Read）**需要与**一致性非锁定读（Consistent Read）**对比起来学习。另外，这里也提到了共享锁与排他锁，也算是对之前的内容进行回顾了。\n\n\nInnoDB的锁定读是事务处理中的一个重要特性，它允许数据库维护数据在并发环境下的一致性和完整性。通过共享锁和排他锁，InnoDB能够在保证数据安全的同时，提供高效的并发访问。正确使用锁定读取可以避免不必要的数据冲突和潜在的死锁，但也需要谨慎使用，因为不当的锁定策略可能会导致性能问题。\n\n\n# 参考：\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 15.7.2.4 Locking Reads](https://dev.mysql.com/doc/refman/8.0/en/innodb-locking-reads.html)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-13",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day83",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day83【概念解析】 Locking Read",
        "status": "Published",
        "urlname": "34716a96-cf51-4341-8b0a-5adc77309838",
        "updated": "2023-12-20 04:56:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "34716a96-cf51-4341-8b0a-5adc77309838"
        }
      ],
      "body": "",
      "realName": "Day83【概念解析】 Locking Read",
      "relativePath": "/行业概念/Day83【概念解析】 Locking Read.md"
    },
    {
      "id": "27aef270-5c06-4a70-8909-76e6905ea06d",
      "doc_id": "27aef270-5c06-4a70-8909-76e6905ea06d",
      "updated": 1702470780000,
      "body_original": "\n> 💡 很久没有写日记了，打算以“跑步”为话题展开谈谈。\n\n\n## 两次半马\n\n\n今年3月份，完成了本年度第一次的半程马拉松——2022年宝安半程马拉松。是的，你没有看错，就是2022年的，因为疫情延期到2023年。\n\n\n那次马拉松中，**净成绩 02:34:42，**跑完后**直接躺了一下午**。\n\n\n还是今年12月份，完成本年度最后一次的半程马拉松——2023年龙华半程马拉松。这次马拉松中，净成绩 02:14:36，是我的历史最好成绩，相比年初提升了**20分钟**！！！跑完后，就正常睡了一个午觉，然后还是**活蹦乱跳**。\n\n\n## 数据分析\n\n\n同样是半马，进步如此迅速，当然离不开一直以来的训练。在奔跑日记中，记录了从10月开始的跑步记录。下表分别是10月，11月，12月（截止12.13）的运动汇总：\n\n\n---\n\n\n\n| **运动类型**   | **运动计量** |\n| ---------- | -------- |\n| 🏃🏻累计跑量   | 87.59KM  |\n| 跑步次数       | 13次      |\n| 🧘🏻瑜伽累计次数 | 4        |\n\n\n\n\n| **运动类型**   | **运动计量** |\n| ---------- | -------- |\n| 🏃🏻累计跑量   | 98.49KM  |\n| 跑步次数       | 9次       |\n| 🧘🏻瑜伽累计次数 | 7        |\n| 骑行         | 33.89km  |\n\n\n\n\n| **运动类型**   | **运动计量** |\n| ---------- | -------- |\n| 🏃🏻累计跑量   | 51KM     |\n| 跑步次数       | 6次       |\n| 🧘🏻瑜伽累计次数 | 2        |\n| 骑行         | 0km      |\n\n\n\n\n[bookmark](https://kuangyichen.com/running)\n\n\n---\n\n\n几乎月均**90KM**，12月还未过半，有望突破**100KM**。\n\n\n## 心理分析\n\n\n说完数据分析，再谈谈心理建设。自从养成每周三次跑步的好习惯，我发现，对于长距离的慢跑不再恐惧了。每次在大沙河进行长跑训练，除了增加成绩之外，也完成了内心的洗礼，在欣赏美景的同时，也能好好完成训练，距离越来越长，越来越轻松。心中对于距离的压力也越来越小，从抗拒长距离到享受长距离跑步。\n\n\n## 科学跑步\n\n\n除了心理建设完备之外，在科学跑步上也没有拉下。在与其他跑协同学的沟通之后，学会了一些跑马的新概念。像补给、心率、跑步姿势、配速等等。除了科学的理论支持，外设也必不可少，这次双十一也采购了一双**`亚瑟士2000`**+一双**`特步260`** **，**就连袜子也换成了专业的悍马袜子，一双训练使用，两双实战使用。平时训练的时候，也开始尝试食用`能量胶`和`盐丸`。\n\n\n## 总结\n\n\n总的来说，这一年，我在跑步上取得了很大的进步，不仅在成绩上，也在心态和习惯上。我开始享受跑步，享受这个过程带给我的快乐和自由。我相信，只要我坚持下去，未来我会有更大的进步。\n\n\n> ✅ 更快！更强！来年继续加油！Run run run！！\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-13",
        "type": "Post",
        "category": "三省吾身",
        "slug": "about-running",
        "tags": [
          "思考",
          "跑步",
          "运动"
        ],
        "summary": "很久没有写日记了，打算以“跑步”为话题展开谈谈。",
        "title": "[杂谈]谈跑步",
        "status": "Published",
        "urlname": "27aef270-5c06-4a70-8909-76e6905ea06d",
        "updated": "2023-12-13 12:33:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "27aef270-5c06-4a70-8909-76e6905ea06d"
        }
      ],
      "body": "",
      "realName": "[杂谈]谈跑步",
      "relativePath": "/三省吾身/[杂谈]谈跑步.md"
    },
    {
      "id": "facd9060-c655-4456-a316-b930174e50db",
      "doc_id": "facd9060-c655-4456-a316-b930174e50db",
      "updated": 1703048160000,
      "body_original": "\n# 整理定义\n\n\n**不同语句的的加锁机制（Locks Set by Statement）**\n\n\n本章主要总结下之前学习的 行锁，间隙锁，临键锁在不同语句下的表现。\n\n\n【[MySQL :: MySQL 8.0 Reference Manual :: 15.7.3 Locks Set by Different SQL Statements in InnoDB](https://dev.mysql.com/doc/refman/8.0/en/innodb-locks-set.html)】\n\n\n# 复述展开\n\n\n锁定读取、更新或删除通常会在 SQL 语句处理过程中扫描的每个索引记录上设置记录锁。 语句中是否存在排除该行的 WHERE 条件并不重要。 InnoDB不记得确切的WHERE条件，而只知道扫描了哪些索引范围。 这些锁通常是下一个键锁，它们也会阻止插入到紧邻记录之前的“间隙”中。 但是，可以显式禁用`Gap Lock`，这会导致不使用`Next-key Lock`。\n\n\n如果搜索时使用二级索引，并且要设置的索引记录锁是排它的，InnoDB也会检索相应的聚集索引记录并对其设置锁。\n\n\n如果没有适合您的语句的索引，并且 MySQL 必须扫描整个表来处理该语句，则表的每一行都会被锁定，从而阻止其他用户对该表的所有插入。 创建良好的索引非常重要，这样您的查询就不会扫描不必要的行。\n\n\n在InnoDB中，不同的SQL语句会设置不同的锁定机制：\n\n1. `SELECT ... FROM`：这是一种一致性读取，它读取数据库的快照并且不设置锁，除非事务隔离级别设置为SERIALIZABLE。对于SERIALIZABLE级别，搜索会在遇到的索引记录上设置共享的next-key锁。\n2. `SELECT ... FOR UPDATE` 和 `SELECT ... FOR SHARE`：这些语句会为扫描到的行加锁，并释放不符合结果集包含条件的行的锁。然而，在某些情况下，行可能不会立即解锁，因为在查询执行过程中，结果行与其原始来源之间的关系可能会丢失。\n3. 对于锁定读取（带有FOR UPDATE或FOR SHARE的SELECT）、UPDATE和DELETE语句，所采取的锁取决于语句是否使用具有唯一搜索条件的唯一索引或范围类型搜索条件。\n4. 对于具有唯一搜索条件的唯一索引，InnoDB仅锁定找到的索引记录，而不是它之前的间隙。\n5. 对于其他搜索条件和非唯一索引，InnoDB使用间隙锁或next-key锁锁定扫描的索引范围，以阻止其他会话插入范围覆盖的间隙。\n6. `UPDATE ... WHERE ...`：在搜索遇到的每个记录上设置独占的next-key锁。然而，对于使用唯一索引搜索唯一行的语句，只需要索引记录锁。\n7. 当UPDATE修改聚簇索引记录时，会在受影响的二级索引记录上隐式地加锁。在插入新的二级索引记录之前执行重复检查扫描时，以及在插入新的二级索引记录时，UPDATE操作还会在受影响的二级索引记录上加共享锁。\n8. \"DELETE FROM ... WHERE ...\"在搜索遇到的每个记录上设置独占的next-key锁。然而，对于使用唯一索引搜索唯一行的语句，只需要索引记录锁。\n9. INSERT在插入的行上设置独占锁。这个锁是索引记录锁，而不是next-key锁（也就是说，没有间隙锁），并且不阻止其他会话在插入的行之前插入到间隙中。\n\n\t在插入行之前，会设置一种称为插入意图间隙锁的间隙锁。这种锁表示插入的意图，以便多个事务在同一索引间隙中插入时，如果它们不在间隙内的同一位置插入，就不需要等待彼此。假设有索引记录，其值为4和7。分别尝试插入值5和6的单独事务在获取插入行的独占锁之前，都会用插入意图锁锁定4和7之间的间隙，但是不会阻塞彼此，因为行是非冲突的。\n\n10. \"INSERT ... ON DUPLICATE KEY UPDATE\"与简单的\"INSERT\"不同，因为当出现重复键错误时，会在要更新的行上放置独占锁，而不是共享锁。对于重复的主键值，会取得独占的索引记录锁。对于重复的唯一键值，会取得独占的next-key锁。\n11. 如果在唯一键上没有冲突，那么\"REPLACE\"就像\"INSERT\"一样进行。否则，会在要替换的行上放置独占的next-key锁。\n12. \"INSERT INTO T SELECT ... FROM S WHERE ...\"在每个插入到T的行上设置独占的索引记录锁（没有间隙锁）。如果事务隔离级别是READ COMMITTED，InnoDB将S上的搜索作为一致性读取（无锁）。否则，InnoDB在S的行上设置共享的next-key锁。在后一种情况下，InnoDB必须设置锁：在使用基于语句的二进制日志进行向前滚动恢复时，每个SQL语句必须以与原来完全相同的方式执行。\n\n\t\"CREATE TABLE ... SELECT ...\"以共享的next-key锁或作为一致性读取执行SELECT，就像\"INSERT ... SELECT\"一样。\n\n\n\t当SELECT用于\"REPLACE INTO t SELECT ... FROM s WHERE ...\"或\"UPDATE t ... WHERE col IN (SELECT ... FROM s ...)\"的构造中时，InnoDB在s表的行上设置共享的next-key锁。\n\n13. 在初始化表上之前指定的AUTO_INCREMENT列时，InnoDB在与AUTO_INCREMENT列关联的索引的末尾设置独占锁。\n\n# 理解体会\n\n\n总的来说，InnoDB的锁定机制取决于SQL语句的类型和使用的索引类型，以确保数据的一致性和事务的隔离性。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-14",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day84",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day84【概念解析】Locks Set by Statement",
        "status": "Published",
        "urlname": "facd9060-c655-4456-a316-b930174e50db",
        "updated": "2023-12-20 04:56:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "facd9060-c655-4456-a316-b930174e50db"
        }
      ],
      "body": "",
      "realName": "Day84【概念解析】Locks Set by Statement",
      "relativePath": "/行业概念/Day84【概念解析】Locks Set by Statement.md"
    },
    {
      "id": "751b1aff-d2cb-49d4-889f-deed17bbefd4",
      "doc_id": "751b1aff-d2cb-49d4-889f-deed17bbefd4",
      "updated": 1703048160000,
      "body_original": "\n# 整理定义\n\n\n死锁是一种情况，不同的事务无法进行，因为每个事务都持有另一个事务需要的锁。由于所有事务都在等待资源变得可用，所以它们都不会释放它们持有的锁。\n\n\n> A **deadlock** is a situation where different transactions are unable to proceed because each holds a lock that the other needs. Because both transactions are waiting for a resource to become available, neither ever release the locks it holds.  \n> ——《[MySQL :: MySQL 8.0 Reference Manual :: 15.7.5 Deadlocks in InnoDB](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlocks.html)》\n\n\n# 复述展开\n\n\n## 死锁的发生\n\n\n当事务在多个表中锁定行（通过诸如`UPDATE`或`SELECT ... FOR UPDATE`之类的语句），但顺序相反时，可能会发生死锁。当这样的语句锁定索引记录和间隙的范围时，也可能发生死锁，每个事务由于时间问题获取一些锁，但没有获取其他锁。\n\n\n## 如何避免死锁\n\n\n为了减少死锁的可能性，使用事务而不是`LOCK TABLES`语句；保持插入或更新数据的事务足够小，以至于它们不会长时间保持打开状态；当不同的事务更新多个表或大范围的行时，使用相同的操作顺序（如`SELECT ... FOR UPDATE`）在每个事务中；在`SELECT ... FOR UPDATE`和`UPDATE ... WHERE`语句中使用的列上创建索引。死锁的可能性不受隔离级别的影响，因为隔离级别改变了读操作的行为，而死锁是由于写操作而发生的。\n\n\n## 死锁检测\n\n\n当启用死锁检测（默认）并且确实发生死锁时，InnoDB检测到这种情况并回滚其中一个事务（受害者）。如果使用`innodb_deadlock_detect`变量禁用了死锁检测，InnoDB依赖于`innodb_lock_wait_timeout`设置在死锁情况下回滚事务。因此，即使你的应用程序逻辑是正确的，你仍然必须处理事务必须重试的情况。要查看InnoDB用户事务中的最后一个死锁，使用`SHOW ENGINE INNODB STATUS`。如果频繁的死锁突显出事务结构或应用程序错误处理的问题，启用`innodb_print_all_deadlocks`将所有死锁的信息打印到mysqld错误日志。\n\n\n# 理解体会\n\n\n死锁是指多个事务因为互相持有对方需要的锁而无法进行的情况。为了避免死锁，我们可以使用事务，保持事务小而短，以及在更新多个表或大范围行的不同事务中使用相同的操作顺序。当死锁发生时，InnoDB会检测并回滚其中一个事务。即使应用程序逻辑正确，也需要处理事务重试的情况。我们可以通过SHOW ENGINE INNODB STATUS查看最后一个死锁，如果频繁的死锁，可以启用`innodb_print_all_deadlocks`将所有死锁的信息打印到错误日志。\n\n\n> [[MySQL :: MySQL 8.0 Reference Manual :: 15.7.5 Deadlocks in InnoDB](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlocks.html)]\n\n\n\tA deadlock is a situation where different transactions are unable to proceed because each holds a lock that the other needs. Because both transactions are waiting for a resource to become available, neither ever release the locks it holds.\n\n\n\tA deadlock can occur when transactions lock rows in multiple tables (through statements such as [`UPDATE`](https://dev.mysql.com/doc/refman/8.0/en/update.html) or [`SELECT ... FOR UPDATE`](https://dev.mysql.com/doc/refman/8.0/en/select.html)), but in the opposite order. A deadlock can also occur when such statements lock ranges of index records and gaps, with each transaction acquiring some locks but not others due to a timing issue. For a deadlock example, see [Section 15.7.5.1, “An InnoDB Deadlock Example”](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlock-example.html).\n\n\n\tTo reduce the possibility of deadlocks, use transactions rather than [`LOCK TABLES`](https://dev.mysql.com/doc/refman/8.0/en/lock-tables.html) statements; keep transactions that insert or update data small enough that they do not stay open for long periods of time; when different transactions update multiple tables or large ranges of rows, use the same order of operations (such as [`SELECT ... FOR UPDATE`](https://dev.mysql.com/doc/refman/8.0/en/select.html)) in each transaction; create indexes on the columns used in [`SELECT ... FOR UPDATE`](https://dev.mysql.com/doc/refman/8.0/en/select.html) and [`UPDATE ... WHERE`](https://dev.mysql.com/doc/refman/8.0/en/update.html) statements. The possibility of deadlocks is not affected by the isolation level, because the isolation level changes the behavior of read operations, while deadlocks occur because of write operations. For more information about avoiding and recovering from deadlock conditions, see [Section 15.7.5.3, “How to Minimize and Handle Deadlocks”](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlocks-handling.html).\n\n\n\tWhen deadlock detection is enabled (the default) and a deadlock does occur, `InnoDB` detects the condition and rolls back one of the transactions (the victim). If deadlock detection is disabled using the [`innodb_deadlock_detect`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_deadlock_detect) variable, `InnoDB` relies on the [`innodb_lock_wait_timeout`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) setting to roll back transactions in case of a deadlock. Thus, even if your application logic is correct, you must still handle the case where a transaction must be retried. To view the last deadlock in an `InnoDB` user transaction, use [`SHOW ENGINE INNODB STATUS`](https://dev.mysql.com/doc/refman/8.0/en/show-engine.html). If frequent deadlocks highlight a problem with transaction structure or application error handling, enable [`innodb_print_all_deadlocks`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) to print information about all deadlocks to the [**mysqld**](https://dev.mysql.com/doc/refman/8.0/en/mysqld.html) error log. For more information about how deadlocks are automatically detected and handled, see [Section 15.7.5.2, “Deadlock Detection”](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlock-detection.html).\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-15",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day85",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day85【概念解析】Deadlocks in InnoDB",
        "status": "Published",
        "urlname": "751b1aff-d2cb-49d4-889f-deed17bbefd4",
        "updated": "2023-12-20 04:56:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "751b1aff-d2cb-49d4-889f-deed17bbefd4"
        }
      ],
      "body": "",
      "realName": "Day85【概念解析】Deadlocks in InnoDB",
      "relativePath": "/行业概念/Day85【概念解析】Deadlocks in InnoDB.md"
    },
    {
      "id": "4474cf12-17c3-4237-b7bd-7f6730b09481",
      "doc_id": "4474cf12-17c3-4237-b7bd-7f6730b09481",
      "updated": 1703048160000,
      "body_original": "\n# 整理定义\n\n\n**幻影行**（**Phantom Rows）：**所谓的幻影问题是指在一个事务中，同一查询在不同时间产生不同的行集。例如，如果一个SELECT被执行两次，但第二次返回了第一次未返回的行，那么这个行就是一个“幻影”行。这个问题就是**幻读问题。**\n\n\n# 复述展开\n\n\n假设在child表的id列上有一个索引，你想读取并锁定所有id值大于100的行，然后打算稍后更新选定行中的某个列：\n\n\n```sql\nSELECT * FROM child WHERE id > 100 FOR UPDATE;\n```\n\n\n该查询从id大于100的第一条记录开始扫描索引。假设表中有id值为90和102的行。如果在扫描范围内设置的索引记录上的锁没有锁定插入到间隙中的记录（在这种情况下，间隙在90和102之间），那么另一个会话可以在表中插入一个新行，id为101。如果你在同一事务中执行相同的SELECT，你会在查询返回的结果集中看到一个新的id为101的行（一个“幻影”）。如果我们把一组行看作一个数据项，新的幻影子项将违反事务的隔离原则，即一个事务应该能够运行，使得它读取的数据在事务期间不会改变。\n\n\n为了防止幻影，InnoDB使用了一种称为next-key locking的算法，该算法将索引行锁定与间隙锁定结合起来。InnoDB执行行级锁定的方式是，当它搜索或扫描表索引时，它在遇到的索引记录上设置共享或独占锁。因此，行级锁实际上是索引记录锁。此外，对索引记录的next-key锁也影响到索引记录前的“间隙”。也就是说，next-key锁是索引记录锁加上在索引记录前的间隙锁。如果一个会话在索引中的记录R上有一个共享或独占锁，那么另一个会话不能在索引顺序中R之前的间隙中插入一个新的索引记录。\n\n\n当InnoDB扫描索引时，它也可以锁定索引中最后一条记录后的间隙。就像在前面的例子中发生的那样：为了防止任何插入到表中的id值大于100的记录，InnoDB设置的锁包括在id值102后面的间隙上的锁。\n\n\n你可以使用next-key锁定在你的应用中实现唯一性检查：如果你以共享模式读取你的数据，并且没有看到你要插入的行的重复项，那么你可以安全地插入你的行，并知道在读取过程中在你的行的后继上设置的next-key锁阻止了任何人同时插入你的行的重复项。因此，next-key锁定使你能够在你的表中“锁定”某物的不存在。\n\n\n间隙锁定可以被禁用，这可能会导致幻影问题，因为当间隙锁定被禁用时，其他会话可以在间隙中插入新的行。\n\n\n# 理解体会\n\n\n幻影行问题是指在同一事务中，同一查询在不同时间产生不同的行集。为了防止这种情况，InnoDB使用了一种称为next-key locking的算法，该算法将索引行锁定与间隙锁定结合起来。这种锁定方式可以防止在事务期间插入新的行，从而保证了数据的一致性。然而，如果禁用了间隙锁定，可能会导致幻影问题，因为其他会话可以在间隙中插入新的行。\n\n\nNext-key锁定可以用于实现唯一性检查，即在插入新行之前，先以共享模式读取数据，如果没有发现要插入的行的重复项，那么就可以安全地插入新行。这是因为在读取过程中，对你的行的后继设置的next-key锁阻止了其他人同时插入你的行的重复项。这样，next-key锁定使你能够在你的表中“锁定”某物的不存在。\n\n\n总的来说，InnoDB的next-key锁定算法通过锁定索引记录和前后的间隙，有效地解决了幻影行问题，保证了事务的隔离性和数据的一致性。但是，如果禁用了间隙锁定，可能会导致幻影问题，因为其他会话可以在间隙中插入新的行。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-16",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day86",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day86【概念解析】Phantom Rows",
        "status": "Published",
        "urlname": "4474cf12-17c3-4237-b7bd-7f6730b09481",
        "updated": "2023-12-20 04:56:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "4474cf12-17c3-4237-b7bd-7f6730b09481"
        }
      ],
      "body": "",
      "realName": "Day86【概念解析】Phantom Rows",
      "relativePath": "/行业概念/Day86【概念解析】Phantom Rows.md"
    },
    {
      "id": "1315595e-fbbf-446e-8ee0-32c2aa4dc2ca",
      "doc_id": "1315595e-fbbf-446e-8ee0-32c2aa4dc2ca",
      "updated": 1703048160000,
      "body_original": "\n# 整理定义\n\n\n本章为死锁实践，主要是对于 Day85 的死锁概念进行一些拓展。\n\n\n# 复述展开\n\n\n## 数据准备：\n\n\n```sql\nmysql> SET GLOBAL innodb_print_all_deadlocks = ON;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> CREATE TABLE Animals (name VARCHAR(10) PRIMARY KEY, value INT) ENGINE = InnoDB;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> CREATE TABLE Birds (name VARCHAR(10) PRIMARY KEY, value INT) ENGINE = InnoDB;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> INSERT INTO Animals (name,value) VALUES (\"Aardvark\",10);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> INSERT INTO Birds (name,value) VALUES (\"Buzzard\",20);\nQuery OK, 1 row affected (0.00 sec)\n```\n\n\n创建两个表，Animals 和 Birds，各插入一条数据，并且设置 innodb_print_all_deadlocks 为开启状态\n\n\n## 开始操作\n\n\n**Session A**\n\n\n```sql\nmysql> START TRANSACTION;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT value FROM Animals WHERE name='Aardvark' FOR SHARE;\n+-------+\n| value |\n+-------+\n|    10 |\n+-------+\n1 row in set (0.00 sec)\n```\n\n\n**Session B**\n\n\n```sql\nmysql> START TRANSACTION;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT value FROM Birds WHERE name='Buzzard' FOR SHARE;\n+-------+\n| value |\n+-------+\n|    20 |\n+-------+\n1 row in set (0.00 sec)\n```\n\n\n对于Session A 与 Session B 的两个查找语句的性能展示\n\n\n```sql\nmysql> SELECT ENGINE_TRANSACTION_ID as Trx_Id, \n              OBJECT_NAME as `Table`, \n              INDEX_NAME as `Index`, \n              LOCK_DATA as Data, \n              LOCK_MODE as Mode, \n              LOCK_STATUS as Status, \n              LOCK_TYPE as Type \n        FROM performance_schema.data_locks;\n+-----------------+---------+---------+------------+---------------+---------+--------+\n| Trx_Id          | Table   | Index   | Data       | Mode          | Status  | Type   |\n+-----------------+---------+---------+------------+---------------+---------+--------+\n| 421291106147544 | Animals | NULL    | NULL       | IS            | GRANTED | TABLE  |\n| 421291106147544 | Animals | PRIMARY | 'Aardvark' | S,REC_NOT_GAP | GRANTED | RECORD |\n| 421291106148352 | Birds   | NULL    | NULL       | IS            | GRANTED | TABLE  |\n| 421291106148352 | Birds   | PRIMARY | 'Buzzard'  | S,REC_NOT_GAP | GRANTED | RECORD |\n+-----------------+---------+---------+------------+---------------+---------+--------+\n4 rows in set (0.00 sec)\n```\n\n\n可以看到：\n\n- 事务 `421291106147544`  给 表 Animals 加的是 **共享锁**，和**行锁**，还有**意向共享锁**的表锁\n- 事务 `421291106148352`  给 表 Birds 加的是 **共享锁**，和**行锁**，还有**意向共享锁**的表锁\n\n## 继续操作\n\n\nSession B\n\n\n```sql\nmysql> UPDATE Animals SET value=30 WHERE name='Aardvark';\n```\n\n\nSession B 继续执行更新操作，但是需要等待。\n\n\n查看下锁：\n\n\n```sql\nmysql> SELECT REQUESTING_ENGINE_LOCK_ID as Req_Lock_Id,\n              REQUESTING_ENGINE_TRANSACTION_ID as Req_Trx_Id,\n              BLOCKING_ENGINE_LOCK_ID as Blk_Lock_Id, \n              BLOCKING_ENGINE_TRANSACTION_ID as Blk_Trx_Id\n        FROM performance_schema.data_lock_waits;\n+----------------------------------------+------------+----------------------------------------+-----------------+\n| Req_Lock_Id                            | Req_Trx_Id | Blk_Lock_Id                            | Blk_Trx_Id      |\n+----------------------------------------+------------+----------------------------------------+-----------------+\n| 139816129437696:27:4:2:139816016601240 |      43260 | 139816129436888:27:4:2:139816016594720 | 421291106147544 |\n+----------------------------------------+------------+----------------------------------------+-----------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ENGINE_LOCK_ID as Lock_Id, \n              ENGINE_TRANSACTION_ID as Trx_id, \n              OBJECT_NAME as `Table`, \n              INDEX_NAME as `Index`, \n              LOCK_DATA as Data, \n              LOCK_MODE as Mode, \n              LOCK_STATUS as Status, \n              LOCK_TYPE as Type \n        FROM performance_schema.data_locks;\n+----------------------------------------+-----------------+---------+---------+------------+---------------+---------+--------+\n| Lock_Id                                | Trx_Id          | Table   | Index   | Data       | Mode          | Status  | Type   |\n+----------------------------------------+-----------------+---------+---------+------------+---------------+---------+--------+\n| 139816129437696:1187:139816016603896   |           43260 | Animals | NULL    | NULL       | IX            | GRANTED | TABLE  |\n| 139816129437696:1188:139816016603808   |           43260 | Birds   | NULL    | NULL       | IS            | GRANTED | TABLE  |\n| 139816129437696:28:4:2:139816016600896 |           43260 | Birds   | PRIMARY | 'Buzzard'  | S,REC_NOT_GAP | GRANTED | RECORD |\n| 139816129437696:27:4:2:139816016601240 |           43260 | Animals | PRIMARY | 'Aardvark' | X,REC_NOT_GAP | WAITING | RECORD |\n| 139816129436888:1187:139816016597712   | 421291106147544 | Animals | NULL    | NULL       | IS            | GRANTED | TABLE  |\n| 139816129436888:27:4:2:139816016594720 | 421291106147544 | Animals | PRIMARY | 'Aardvark' | S,REC_NOT_GAP | GRANTED | RECORD |\n+----------------------------------------+-----------------+---------+---------+------------+---------------+---------+--------+\n6 rows in set (0.00 sec)\n```\n\n\nInnoDB仅在事务尝试修改数据库时使用`顺序事务id`。因此，前一个只读事务id从`421291106148352`更改为`43260`。\n\n\n这时，如果 Session A要操作：\n\n\n```sql\nmysql> UPDATE Birds SET value=40 WHERE name='Buzzard';\nERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction\n```\n\n\n就会出现死锁：\n\n\nSession A 和 Session B 互相持有 表 Birds 与 Animals 的 行锁，而又需要同时去更新，这时都被锁住，导致无法继续。\n\n\nInnoDB回滚导致死锁的事务。来自客户端B的第一个更新现在可以继续了。\nThe Information Schema 包含死锁的数量：\n\n\n```sql\nmysql> SELECT `count` FROM INFORMATION_SCHEMA.INNODB_METRICS\n          WHERE NAME=\"lock_deadlocks\";\n+-------+\n| count |\n+-------+\n|     1 |\n+-------+\n1 row in set (0.00 sec)\n```\n\n\nInnoDB status包含有关死锁和事务的下列信息。它还显示只读事务id 421291106147544更改为顺序事务id 43261。\n\n\n```sql\nmysql> SHOW ENGINE INNODB STATUS;\n------------------------\nLATEST DETECTED DEADLOCK\n------------------------\n2022-11-25 15:58:22 139815661168384\n*** (1) TRANSACTION:\nTRANSACTION 43260, ACTIVE 186 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 4 lock struct(s), heap size 1128, 2 row lock(s)\nMySQL thread id 19, OS thread handle 139815619204864, query id 143 localhost u2 updating\nUPDATE Animals SET value=30 WHERE name='Aardvark'\n\n*** (1) HOLDS THE LOCK(S):\nRECORD LOCKS space id 28 page no 4 n bits 72 index PRIMARY of table `test`.`Birds` trx id 43260 lock mode S locks rec but not gap\nRecord lock, heap no 2 PHYSICAL RECORD: n_fields 4; compact format; info bits 0\n 0: len 7; hex 42757a7a617264; asc Buzzard;;\n 1: len 6; hex 00000000a8fb; asc       ;;\n 2: len 7; hex 82000000e40110; asc        ;;\n 3: len 4; hex 80000014; asc     ;;\n\n\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 27 page no 4 n bits 72 index PRIMARY of table `test`.`Animals` trx id 43260 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 2 PHYSICAL RECORD: n_fields 4; compact format; info bits 0\n 0: len 8; hex 416172647661726b; asc Aardvark;;\n 1: len 6; hex 00000000a8f9; asc       ;;\n 2: len 7; hex 82000000e20110; asc        ;;\n 3: len 4; hex 8000000a; asc     ;;\n\n\n*** (2) TRANSACTION:\nTRANSACTION 43261, ACTIVE 209 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 4 lock struct(s), heap size 1128, 2 row lock(s)\nMySQL thread id 18, OS thread handle 139815618148096, query id 146 localhost u1 updating\nUPDATE Birds SET value=40 WHERE name='Buzzard'\n\n*** (2) HOLDS THE LOCK(S):\nRECORD LOCKS space id 27 page no 4 n bits 72 index PRIMARY of table `test`.`Animals` trx id 43261 lock mode S locks rec but not gap\nRecord lock, heap no 2 PHYSICAL RECORD: n_fields 4; compact format; info bits 0\n 0: len 8; hex 416172647661726b; asc Aardvark;;\n 1: len 6; hex 00000000a8f9; asc       ;;\n 2: len 7; hex 82000000e20110; asc        ;;\n 3: len 4; hex 8000000a; asc     ;;\n\n\n*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 28 page no 4 n bits 72 index PRIMARY of table `test`.`Birds` trx id 43261 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 2 PHYSICAL RECORD: n_fields 4; compact format; info bits 0\n 0: len 7; hex 42757a7a617264; asc Buzzard;;\n 1: len 6; hex 00000000a8fb; asc       ;;\n 2: len 7; hex 82000000e40110; asc        ;;\n 3: len 4; hex 80000014; asc     ;;\n\n*** WE ROLL BACK TRANSACTION (2)\n------------\nTRANSACTIONS\n------------\nTrx id counter 43262\nPurge done for trx's n:o < 43256 undo n:o < 0 state: running but idle\nHistory list length 0\nLIST OF TRANSACTIONS FOR EACH SESSION:\n---TRANSACTION 421291106147544, not started\n0 lock struct(s), heap size 1128, 0 row lock(s)\n---TRANSACTION 421291106146736, not started\n0 lock struct(s), heap size 1128, 0 row lock(s)\n---TRANSACTION 421291106145928, not started\n0 lock struct(s), heap size 1128, 0 row lock(s)\n---TRANSACTION 43260, ACTIVE 219 sec\n4 lock struct(s), heap size 1128, 2 row lock(s), undo log entries 1\nMySQL thread id 19, OS thread handle 139815619204864, query id 143 localhost u2\n```\n\n\nThe error log 的信息\n\n\n```sql\nmysql> SELECT @@log_error;\n+---------------------+\n| @@log_error         |\n+---------------------+\n| /var/log/mysqld.log |\n+---------------------+\n1 row in set (0.00 sec)\n\nTRANSACTION 43260, ACTIVE 186 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 4 lock struct(s), heap size 1128, 2 row lock(s)\nMySQL thread id 19, OS thread handle 139815619204864, query id 143 localhost u2 updating\nUPDATE Animals SET value=30 WHERE name='Aardvark'\nRECORD LOCKS space id 28 page no 4 n bits 72 index PRIMARY of table `test`.`Birds` trx id 43260 lock mode S locks rec but not gap\nRecord lock, heap no 2 PHYSICAL RECORD: n_fields 4; compact format; info bits 0\n 0: len 7; hex 42757a7a617264; asc Buzzard;;\n 1: len 6; hex 00000000a8fb; asc       ;;\n 2: len 7; hex 82000000e40110; asc        ;;\n 3: len 4; hex 80000014; asc     ;;\n\nRECORD LOCKS space id 27 page no 4 n bits 72 index PRIMARY of table `test`.`Animals` trx id 43260 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 2 PHYSICAL RECORD: n_fields 4; compact format; info bits 0\n 0: len 8; hex 416172647661726b; asc Aardvark;;\n 1: len 6; hex 00000000a8f9; asc       ;;\n 2: len 7; hex 82000000e20110; asc        ;;\n 3: len 4; hex 8000000a; asc     ;;\n\nTRANSACTION 43261, ACTIVE 209 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 4 lock struct(s), heap size 1128, 2 row lock(s)\nMySQL thread id 18, OS thread handle 139815618148096, query id 146 localhost u1 updating\nUPDATE Birds SET value=40 WHERE name='Buzzard'\nRECORD LOCKS space id 27 page no 4 n bits 72 index PRIMARY of table `test`.`Animals` trx id 43261 lock mode S locks rec but not gap\nRecord lock, heap no 2 PHYSICAL RECORD: n_fields 4; compact format; info bits 0\n 0: len 8; hex 416172647661726b; asc Aardvark;;\n 1: len 6; hex 00000000a8f9; asc       ;;\n 2: len 7; hex 82000000e20110; asc        ;;\n 3: len 4; hex 8000000a; asc     ;;\n\nRECORD LOCKS space id 28 page no 4 n bits 72 index PRIMARY of table `test`.`Birds` trx id 43261 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 2 PHYSICAL RECORD: n_fields 4; compact format; info bits 0\n 0: len 7; hex 42757a7a617264; asc Buzzard;;\n 1: len 6; hex 00000000a8fb; asc       ;;\n 2: len 7; hex 82000000e40110; asc        ;;\n 3: len 4; hex 80000014; asc     ;;\n```\n\n\n# 理解体会\n\n\n从上面可以看出，我们用 Session A 与 Session B构造了一个死锁的示例，然后从\n\n\nperformance_schema.data_lock_waits  performance_schema.data_locks 可以看出数据等待锁以及数据锁。\n\n\n如果想看更细致的内容，可以使用命令：\n\n\n`SHOW ENGINE INNODB STATUS;`\n\n\n`SELECT` _**`@@log_error`**_`;`\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 15.7.5.1 An InnoDB Deadlock Example](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlock-example.html)\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 15.7.5.2 Deadlock Detection](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlock-detection.html)\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 15.7.5.3 How to Minimize and Handle Deadlocks](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlocks-handling.html)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-17",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day87",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day87 【概念解析】MySQL死锁实例",
        "status": "Published",
        "urlname": "1315595e-fbbf-446e-8ee0-32c2aa4dc2ca",
        "updated": "2023-12-20 04:56:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "1315595e-fbbf-446e-8ee0-32c2aa4dc2ca"
        }
      ],
      "body": "",
      "realName": "Day87 【概念解析】MySQL死锁实例",
      "relativePath": "/行业概念/Day87 【概念解析】MySQL死锁实例.md"
    },
    {
      "id": "1bc8c4f5-5de3-4b41-a82a-c96d8ba57c72",
      "doc_id": "1bc8c4f5-5de3-4b41-a82a-c96d8ba57c72",
      "updated": 1703048160000,
      "body_original": "\n# 整理定义\n\n\n死锁检测（**Deadlock Detection**）\n\n\n当启用死锁检测（默认）时，InnoDB会自动检测事务死锁并回滚一个或多个事务以打破死锁。 InnoDB 尝试选择小事务进行回滚，其中事务的大小由插入、更新或删除的行数决定。\n\n\n如果 `innodb_table_locks` = 1（默认值）且 `autocommit` = 0，则 InnoDB 会意识到表锁，而它上方的 MySQL 层知道行级锁。 否则，InnoDB 无法检测涉及 `MySQL LOCK TABLES` 语句设置的表锁或 `InnoDB` 以外的存储引擎设置的锁的死锁。 通过设置 `innodb_lock_wait_timeout` 系统变量的值来解决这些情况。\n\n\n如果 `InnoDB Monitor` 输出的 `LATEST DETECTED DEADLOCK` 部分包含一条消息，指出 `TOO DEEP OR LONG SEARCH IN THE LOCK TABLE WAITS-FOR GRAPH, WE WILL ROLL BACK FOLLOWING TRANSACTION`，这表明等待列表上的事务数量已达到 `200` 的上限。**超过 200 个事务的等待列表将被视为死锁，并且尝试检查等待列表的事务将被回滚。** 如果锁定线程必须查看等待列表上的事务拥有的超过 1,000,000 个锁，也可能会发生相同的错误。\n\n\n## 禁用死锁检测\n\n\n在高并发系统上，当大量线程等待同一锁时，死锁检测可能会导致速度减慢。 有时，禁用死锁检测并在发生死锁时依靠 innodb_lock_wait_timeout 设置进行事务回滚可能会更有效。 可以使用 innodb_deadlock_detect 变量禁用死锁检测。\n\n\n# 复述展开\n\n\n> **Deadlock Detection**\n\n\n\tWhen [deadlock detection](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_deadlock_detection) is enabled (the default), `InnoDB` automatically detects transaction [deadlocks](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_deadlock) and rolls back a transaction or transactions to break the deadlock. `InnoDB` tries to pick small transactions to roll back, where the size of a transaction is determined by the number of rows inserted, updated, or deleted.\n\n\n\t`InnoDB` is aware of table locks if `innodb_table_locks = 1` (the default) and [`autocommit = 0`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit), and the MySQL layer above it knows about row-level locks. Otherwise, `InnoDB` cannot detect deadlocks where a table lock set by a MySQL [`LOCK TABLES`](https://dev.mysql.com/doc/refman/8.0/en/lock-tables.html) statement or a lock set by a storage engine other than `InnoDB` is involved. Resolve these situations by setting the value of the [`innodb_lock_wait_timeout`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) system variable.\n\n\n\tIf the `LATEST DETECTED DEADLOCK` section of `InnoDB` Monitor output includes a message stating TOO DEEP OR LONG SEARCH IN THE LOCK TABLE WAITS-FOR GRAPH, WE WILL ROLL BACK FOLLOWING TRANSACTION, this indicates that the number of transactions on the wait-for list has reached a limit of 200. A wait-for list that exceeds 200 transactions is treated as a deadlock and the transaction attempting to check the wait-for list is rolled back. The same error may also occur if the locking thread must look at more than 1,000,000 locks owned by transactions on the wait-for list.\n\n\n\tFor techniques to organize database operations to avoid deadlocks, see [Section 15.7.5, “Deadlocks in InnoDB”](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlocks.html).\n\n\n\t**Disabling Deadlock Detection**\n\n\n\tOn high concurrency systems, deadlock detection can cause a slowdown when numerous threads wait for the same lock. At times, it may be more efficient to disable deadlock detection and rely on the [`innodb_lock_wait_timeout`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) setting for transaction rollback when a deadlock occurs. Deadlock detection can be disabled using the [`innodb_deadlock_detect`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_deadlock_detect) variable.\n\n\n\t——《[MySQL :: MySQL 8.0 Reference Manual :: 15.7.5.2 Deadlock Detection](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlock-detection.html)》\n\n\n# 理解体会\n\n\n在InnoDB中，死锁检测是一个重要的功能，它可以自动检测并解决事务死锁的问题。事务死锁是指两个或更多的事务在等待对方释放资源，从而导致所有事务都无法继续进行的情况。\n\n\n当启用死锁检测（默认情况下是启用的）时，InnoDB会自动检测这种死锁情况，并选择一个或多个事务进行回滚，以打破死锁。InnoDB通常会选择较小的事务进行回滚，这里的\"小\"是指事务涉及的行数较少。\n\n\nInnoDB可以感知到表级别的锁，如果设置了`innodb_table_locks = 1`（默认值）和`autocommit = 0`。然而，如果死锁涉及的是由MySQL的`LOCK TABLES`语句或者由其他存储引擎设置的锁，InnoDB则无法检测到。在这种情况下，可以通过设置`innodb_lock_wait_timeout`系统变量的值来解决。\n\n\n在某些情况下，例如高并发系统中，死锁检测可能会导致性能下降，因为可能有大量的线程在等待同一把锁。在这种情况下，可能更有效的策略是禁用死锁检测，而依赖于`innodb_lock_wait_timeout`设置来在发生死锁时进行事务回滚。可以通过设置`innodb_deadlock_detect`变量来禁用死锁检测。\n\n\n总的来说，InnoDB的死锁检测是一个强大的工具，可以帮助数据库自动解决可能的死锁问题，但在某些情况下，可能需要进行一些调整以优化性能。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-18",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day88",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day88 【概念解析】死锁检测",
        "status": "Published",
        "urlname": "1bc8c4f5-5de3-4b41-a82a-c96d8ba57c72",
        "updated": "2023-12-20 04:56:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "1bc8c4f5-5de3-4b41-a82a-c96d8ba57c72"
        }
      ],
      "body": "",
      "realName": "Day88 【概念解析】死锁检测",
      "relativePath": "/行业概念/Day88 【概念解析】死锁检测.md"
    },
    {
      "id": "8a43e44a-4180-4259-aa33-555a396c4107",
      "doc_id": "8a43e44a-4180-4259-aa33-555a396c4107",
      "updated": 1703048160000,
      "body_original": "\n# 整理定义\n\n\n本章为死锁实践，主要是对于 Day88 的死锁检测中进行一些拓展。\n\n\n解释了如何组织数据库操作以最大限度地减少死锁以及应用程序中所需的后续错误处理。\n\n\n死锁是事务数据库中的一个典型问题，但它们并不危险，除非它们太频繁以至于您根本无法运行某些事务。 通常，您必须编写应用程序，以便它们始终准备好在事务因死锁而回滚时重新发出事务。\n\n\nInnoDB 使用自动行级锁定。 即使事务只插入或删除一行，也可能会出现死锁。 这是因为这些操作并不是真正的“原子”； 它们自动在插入或删除的行的（可能是多个）索引记录上设置锁。\n\n- 随时使用 `SHOW ENGINE INNODB STATUS` 来确定最近一次死锁的原因。这可以帮助你调整应用程序以避免死锁。\n- 如果频繁的死锁警告引起关注，通过启用 `innodb_print_all_deadlocks` 变量来收集更多的调试信息。MySQL错误日志中会记录每一次死锁的信息，而不仅仅是最新的一次。在完成调试后禁用此选项。\n- 始终准备重新发起因死锁而失败的事务。死锁并不危险。只需再试一次。\n- 保持事务小而持续时间短，以使它们不太容易发生冲突。\n- 在进行一系列相关更改后立即提交事务，以使它们不太容易发生冲突。特别是，不要在交互式mysql会话中长时间保持未提交的事务。\n- 如果你使用锁定读（`SELECT ... FOR UPDATE` 或 `SELECT ... FOR SHARE`），尝试使用较低的隔离级别，如 `READ COMMITTED`。\n- 在事务中修改多个表，或在同一表中修改不同的行集时，每次都按照一致的顺序进行这些操作。这样，事务形成良好定义的队列，不会发生死锁。例如，在应用程序中将数据库操作组织成函数，或者调用存储过程，而不是在不同的地方编写多个类似的 INSERT、UPDATE 和 DELETE 语句序列。\n- 为你的表添加合适的索引，这样你的查询就会扫描更少的索引记录并设置更少的锁。使用 `EXPLAIN SELECT` 来确定 MySQL 服务器认为哪些索引最适合你的查询。\n- 使用更少的锁定。如果你可以允许 `SELECT` 返回旧快照中的数据，那么不要在它上面添加 `FOR UPDATE` 或 `FOR SHARE` 子句。在这里使用 `READ COMMITTED` 隔离级别是好的，因为同一事务中的每个一致读取都来自它自己的新鲜快照。\n- 如果其他方法都无效，可以通过表级锁来序列化你的事务。与事务性表（如InnoDB表）一起使用`LOCK TABLES`的正确方法是先用`SET autocommit = 0`（不是`START TRANSACTION`）开始一个事务，然后是`LOCK TABLES`，并且在你明确提交事务之前不要调用`UNLOCK TABLES`。例如，如果你需要对表t1进行写操作并从表t2读取，你可以这样做：\n\n\t```sql\n\tSET autocommit=0;\n\tLOCK TABLES t1 WRITE, t2 READ, ...;\n\t... 在这里对表t1和t2做一些操作 ...\n\tCOMMIT;\n\tUNLOCK TABLES;\n\t```\n\n\n\t表级锁阻止了对表的并发更新，以牺牲系统响应性为代价避免了死锁。\n\n- 另一种序列化事务的方法是创建一个只包含单行的辅助“信号量”表。在访问其他表之前，让每个事务更新那一行。这样，所有事务都会以串行方式发生。请注意，InnoDB即时死锁检测算法在这种情况下也有效，因为序列化锁是一个行级锁。对于MySQL表级锁，必须使用超时方法来解决死锁。\n\n# 复述展开\n\n\n> **How to Minimize and Handle Deadlocks**\n\n\n\tThis section builds on the conceptual information about deadlocks in [Section 15.7.5.2, “Deadlock Detection”](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlock-detection.html). It explains how to organize database operations to minimize deadlocks and the subsequent error handling required in applications.\n\n\n\t[Deadlocks](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_deadlock) are a classic problem in transactional databases, but they are not dangerous unless they are so frequent that you cannot run certain transactions at all. Normally, you must write your applications so that they are always prepared to re-issue a transaction if it gets rolled back because of a deadlock.\n\n\n\t`InnoDB` uses automatic row-level locking. You can get deadlocks even in the case of transactions that just insert or delete a single row. That is because these operations are not really “atomic”; they automatically set locks on the (possibly several) index records of the row inserted or deleted.\n\n\n\tYou can cope with deadlocks and reduce the likelihood of their occurrence with the following techniques:\n\n\t- At any time, issue [`SHOW ENGINE INNODB STATUS`](https://dev.mysql.com/doc/refman/8.0/en/show-engine.html) to determine the cause of the most recent deadlock. That can help you to tune your application to avoid deadlocks.\n\t- If frequent deadlock warnings cause concern, collect more extensive debugging information by enabling the [`innodb_print_all_deadlocks`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) variable. Information about each deadlock, not just the latest one, is recorded in the MySQL [error log](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_error_log). Disable this option when you are finished debugging.\n\t- Always be prepared to re-issue a transaction if it fails due to deadlock. Deadlocks are not dangerous. Just try again.\n\t- Keep transactions small and short in duration to make them less prone to collision.\n\t- Commit transactions immediately after making a set of related changes to make them less prone to collision. In particular, do not leave an interactive [**mysql**](https://dev.mysql.com/doc/refman/8.0/en/mysql.html) session open for a long time with an uncommitted transaction.\n\t- If you use [locking reads](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_locking_read) ([`SELECT ... FOR UPDATE`](https://dev.mysql.com/doc/refman/8.0/en/select.html) or [`SELECT ... FOR SHARE`](https://dev.mysql.com/doc/refman/8.0/en/select.html)), try using a lower isolation level such as [`READ COMMITTED`](https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html#isolevel_read-committed).\n\t- When modifying multiple tables within a transaction, or different sets of rows in the same table, do those operations in a consistent order each time. Then transactions form well-defined queues and do not deadlock. For example, organize database operations into functions within your application, or call stored routines, rather than coding multiple similar sequences of `INSERT`, `UPDATE`, and `DELETE` statements in different places.\n\t- Add well-chosen indexes to your tables so that your queries scan fewer index records and set fewer locks. Use [`EXPLAIN SELECT`](https://dev.mysql.com/doc/refman/8.0/en/explain.html) to determine which indexes the MySQL server regards as the most appropriate for your queries.\n\t- Use less locking. If you can afford to permit a [`SELECT`](https://dev.mysql.com/doc/refman/8.0/en/select.html) to return data from an old snapshot, do not add a `FOR UPDATE` or `FOR SHARE` clause to it. Using the [`READ COMMITTED`](https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html#isolevel_read-committed) isolation level is good here, because each consistent read within the same transaction reads from its own fresh snapshot.\n\t- If nothing else helps, serialize your transactions with table-level locks. The correct way to use [`LOCK TABLES`](https://dev.mysql.com/doc/refman/8.0/en/lock-tables.html) with transactional tables, such as `InnoDB` tables, is to begin a transaction with `SET autocommit = 0` (not [`START TRANSACTION`](https://dev.mysql.com/doc/refman/8.0/en/commit.html)) followed by [`LOCK TABLES`](https://dev.mysql.com/doc/refman/8.0/en/lock-tables.html), and to not call [`UNLOCK TABLES`](https://dev.mysql.com/doc/refman/8.0/en/lock-tables.html) until you commit the transaction explicitly. For example, if you need to write to table `t1` and read from table `t2`, you can do this:\n\n\t\t`SET autocommit=0;\n\t\tLOCK TABLES t1 WRITE, t2 READ, ...;`\n\t\t_`... do something with tables t1 and t2 here ...`_`COMMIT;\n\t\tUNLOCK TABLES;`\n\n\n\t\tTable-level locks prevent concurrent updates to the table, avoiding deadlocks at the expense of less responsiveness for a busy system.\n\n\t- Another way to serialize transactions is to create an auxiliary “semaphore” table that contains just a single row. Have each transaction update that row before accessing other tables. In that way, all transactions happen in a serial fashion. Note that the `InnoDB` instant deadlock detection algorithm also works in this case, because the serializing lock is a row-level lock. With MySQL table-level locks, the timeout method must be used to resolve deadlocks.\n\n\t——《[MySQL :: MySQL 8.0 Reference Manual :: 15.7.5.3 How to Minimize and Handle Deadlocks](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlocks-handling.html)》\n\n\n# 理解体会\n\n\n上面的内容偏向实战一些，可以多多考虑下。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-19",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day89",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day89 【概念解析】How to Minimize and Handle Deadlocks",
        "status": "Published",
        "urlname": "8a43e44a-4180-4259-aa33-555a396c4107",
        "updated": "2023-12-20 04:56:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "8a43e44a-4180-4259-aa33-555a396c4107"
        }
      ],
      "body": "",
      "realName": "Day89 【概念解析】How to Minimize and Handle Deadlocks",
      "relativePath": "/行业概念/Day89 【概念解析】How to Minimize and Handle Deadlocks.md"
    },
    {
      "id": "e49a71ec-c929-47bf-8116-aab954b01885",
      "doc_id": "e49a71ec-c929-47bf-8116-aab954b01885",
      "updated": 1703233980000,
      "body_original": "\n> 😀 最近发现一个不错的网站封面制作的网站——《[https://coverview.vercel.app/](https://coverview.vercel.app/)》，通过使用它，我生成了非常多的自定义的图片封面。一次偶然间，发现里面的图片都是 unsplash 提供的。为何我不试试看自己实现一个获取 unsplash 免费图片的接口呢？于是就有了这篇文章。\n\n\n# 什么是 **unsplash？**\n\n\n## 网站欣赏——**Unsplash**\n\n\n[bookmark](https://unsplash.com/)\n\n\n下面我们重点欣赏下这个网站：\n\n\n> **Photos for everyone**\n\n\n\tOver 3 million free high-resolution images brought to you by the world’s most generous community of photographers.\n\n\n![](https://image.kuangyichen.com/image/unsplash1.webp)\n\n\n![](https://image.kuangyichen.com/image/unsplash2.webp)\n\n\n## 维基百科\n\n\n**从维基百科上也可以看出：**\n\n\n[bookmark](https://en.wikipedia.org/wiki/Unsplash)\n\n\n> **Unsplash** is a website dedicated to proprietary [stock photography](https://en.wikipedia.org/wiki/Stock_photography). Since 2021, it has been owned by [Getty Images](https://en.wikipedia.org/wiki/Getty_Images). The website claims over 330,000 contributing [photographers](https://en.wikipedia.org/wiki/Photographer) and generates more than 13 billion photo impressions per month on their growing library of over 5 million photos (as of April 2023).[[1]](https://en.wikipedia.org/wiki/Unsplash#cite_note-unsplashhistory-1)[[2]](https://en.wikipedia.org/wiki/Unsplash#cite_note-2) Unsplash has been cited as one of the world's leading photography websites by [_Forbes_](https://en.wikipedia.org/wiki/Forbes), Design Hub, [CNET](https://en.wikipedia.org/wiki/CNET), [Medium](https://en.wikipedia.org/wiki/Medium_(website)) and [The Next Web](https://en.wikipedia.org/wiki/The_Next_Web).[[3]](https://en.wikipedia.org/wiki/Unsplash#cite_note-3)[[4]](https://en.wikipedia.org/wiki/Unsplash#cite_note-4)[[5]](https://en.wikipedia.org/wiki/Unsplash#cite_note-5)[[6]](https://en.wikipedia.org/wiki/Unsplash#cite_note-6)[[7]](https://en.wikipedia.org/wiki/Unsplash#cite_note-7)\n\n\nUnsplash 是一个致力于专有图库摄影的网站。 自 2021 年起，它归盖蒂图片社所有。 该网站声称拥有超过**330,000**名贡献摄影师，其不断增长的超过**500万**张照片库（截至2023年4月）每月产生超过**130亿**张照片展示。**Unsplash 被福布斯、Design Hub、CNET、Medium 和 The Next Web 评为世界领先的摄影网站之一**。\n\n\n## 听听 ChatGPT怎么说\n\n\n> 【**ChatGPT4-turbo**的回答】\n\n\n\tUnsplash 是一个互联网上的免费（商用）照片分享平台，它提供高分辨率的照片，由全球的摄影师无偿上传，并可以由任何人免费下载和使用。这些照片涵盖了广泛的主题和场景，包括自然风光、城市景观、人物肖像、办公环境等等。\n\n\n\tUnsplash 的优势和特点包括：\n\n\t1. **高质量的图片**：Unsplash 上的图片都是由专业人士或有才华的摄影爱好者拍摄的，因此图片质量通常很高，适合用于商业项目、博客文章、网站设计等。\n\t2. **免费使用**：Unsplash 上的图片都可以免费下载和使用，甚至用于商业用途，而无需支付版权费用或署名摄影师（尽管给予信用和感谢总是受到鼓励的）。\n\t3. **简单的使用条款**：Unsplash 提供了非常简单和宽松的使用条款，用户可以对图片进行复制、修改、分发和使用，而不需要请求许可。\n\t4. **易于访问和搜索**：Unsplash 网站提供了一个简单直观的界面，用户可以轻松地搜索和浏览不同类型的图片。\n\t5. **API支持**：Unsplash 提供了一个功能强大的API，允许开发者在自己的应用程序中集成Unsplash 图库的功能，如搜索图片、获取随机图片等。\n\t6. **社区支持**：Unsplash 拥有一个活跃的社区，摄影师们可以分享他们的作品，用户可以与创作者互动，这为平台带来了持续的内容更新和多样性。\n\t7. **创意灵感**：对于设计师和创意工作者来说，Unsplash 是一个寻找灵感的好地方。它的广泛图片类别和高质量内容可以激发新的创意想法。\n\n\tUnsplash 的这些特点使其成为设计师、博客作者、企业家和创意专业人士寻找高质量图片的热门选择。\n\n\n# 如何用起来呢？\n\n\n这个网站这么强，如何使用起来呢？\n\n\n很巧，它提供了可供使用的开发者API使用。下面说下如何快速使用unsplash API。\n\n\n**下面是Unsplash API文档**\n\n\n[bookmark](https://unsplash.com/documentation)\n\n\n## 如何快速实现获取免费图片接口\n\n\n> 💡 **步骤说明**：  \n> 1. 创建一个 **Unsplash账户**  \n>   \n> 2. 创建一个APP  \n> 创建之后未Demo状态，请求限制在**50次一个小时，**如果需要进阶，可以进行升级，按需使用  \n>   \n> 3. 获取账户提供的密钥： 主要是AccessKey  \n>   \n> 4. 编写一个简单接口调用代码【代码附在文末】  \n> Search Photo: [Unsplash API Documentation | Free HD Photo API | Unsplash](https://unsplash.com/documentation#search-photos)  \n> Get Random Photo: [Unsplash API Documentation | Free HD Photo API | Unsplash](https://unsplash.com/documentation#get-a-random-photo)\n\n\n## 图片使用\n\n\n图片的使用方式，可以在附录中看到示例，一般从 urls 字段中获取，可以按需使用，可供选择的有：\n\n\t1. raw (原图)返回一个基本图像 URL，其中仅包含照片路径和 API 应用程序的“ixid”参数。 使用它可以轻松添加其他图像参数来构建您自己的图像 URL。\n\t2. full （全幅，没有裁剪）返回 jpg 格式的照片及其最大尺寸。 出于性能目的，我们不建议使用此选项，因为用户的照片加载速度会很慢。\n\t3. regular（宽度为 `1080 pixels` 的图）\n\t4. small（宽度为 `400 pixels` 的图）\n\t5. thumb （宽度为 `200 pixels` 长度的图）\n\n> 【[Unsplash API Documentation | Free HD Photo API | Unsplash](https://unsplash.com/documentation#example-image-use)】\n\n\t- `full` returns the photo in jpg format with its maximum dimensions. For performance purposes, we don’t recommend using this as the photos will load slowly for your users.\n\t- `regular` returns the photo in jpg format with a width of 1080 pixels.\n\t- `small` returns the photo in jpg format with a width of 400 pixels.\n\t- `thumb` returns the photo in jpg format with a width of 200 pixels.\n\t- `raw` returns a base image URL with just the photo path and the `ixid` parameter for your API application. Use this to easily add additional image parameters to construct your own image URL.\n\n**示例说明：**\n\n\n如果您的应用程序需要宽度为 1500px、DPR 为 2 的图像，请获取原始 URL 并添加 w=1500 和 dpr=2 参数来创建新图像：\n\n\n```json\nphoto.urls.raw + \"&w=1500&dpr=2\";\n// => [https://images.unsplash.com/photo-1461988320302-91bde64fc8e4?ixid=2yJhcHBfaWQiOjEyMDd9&w=1500&dpr=2](https://images.unsplash.com/photo-1461988320302-91bde64fc8e4?ixid=2yJhcHBfaWQiOjEyMDd9&w=1500&dpr=2)\n```\n\n\n如果应用程序的另一部分需要相同的图像，但宽度为一半，您可以轻松构建另一个 URL，而无需再次访问 API：\n\n\n```json\nphoto.urls.raw + \"&w=750&dpr=2\";\n// => [https://images.unsplash.com/photo-1461988320302-91bde64fc8e4?ixid=2yJhcHBfaWQiOjEyMDd9&w=750&dpr=2](https://images.unsplash.com/photo-1461988320302-91bde64fc8e4?ixid=2yJhcHBfaWQiOjEyMDd9&w=750&dpr=2)\n```\n\n\n> 🚫 **注意事项**  \n> 1. 在创建Unsplash账户时，可能会出现【**reCaptcha人机验证无法显示**】，这个问题一度困扰我很久。  \n> 参考这篇文章《[reCaptcha人机验证无法显示和CSP问题解决方案 – Azure Zeng Blog](https://blog.azurezeng.com/recaptcha-use-in-china/comment-page-10/)》基本可以解决\n\n\n# 总结\n\n\n注册好 unsplash 网站的账户之后，新建一个APP用于图片接口的开发，就能自己使用接口来做一些事情了。例如根据自己需要获取相关的图片，使用各种大小格式的图片进行网站的使用，甚至是二次加工使用，都非常方便。\n\n\n# 附录\n\n\n## unsplash_client.py 示例代码展示\n\n\n[embed](https://gist.github.com/EachenKuang/e302c07c6accd070e48b2f2ec90e0208)\n\n\n## 随机图片返回示例\n\n\n```json\n{\n  \"id\": \"Dwu85P9SOIk\",\n  \"created_at\": \"2016-05-03T11:00:28-04:00\",\n  \"updated_at\": \"2016-07-10T11:00:01-05:00\",\n  \"width\": 2448,\n  \"height\": 3264,\n  \"color\": \"#6E633A\",\n  \"blur_hash\": \"LFC$yHwc8^$yIAS$%M%00KxukYIp\",\n  \"downloads\": 1345,\n  \"likes\": 24,\n  \"liked_by_user\": false,\n  \"description\": \"A man drinking a coffee.\",\n  \"exif\": {\n    \"make\": \"Canon\",\n    \"model\": \"Canon EOS 40D\",\n    \"exposure_time\": \"0.011111111111111112\",\n    \"aperture\": \"4.970854\",\n    \"focal_length\": \"37\",\n    \"iso\": 100\n  },\n  \"location\": {\n    \"name\": \"Montreal, Canada\",\n    \"city\": \"Montreal\",\n    \"country\": \"Canada\",\n    \"position\": {\n      \"latitude\": 45.473298,\n      \"longitude\": -73.638488\n    }\n  },\n  \"current_user_collections\": [ // The *current user's* collections that this photo belongs to.\n    {\n      \"id\": 206,\n      \"title\": \"Makers: Cat and Ben\",\n      \"published_at\": \"2016-01-12T18:16:09-05:00\",\n      \"last_collected_at\": \"2016-06-02T13:10:03-04:00\",\n      \"updated_at\": \"2016-07-10T11:00:01-05:00\",\n      \"cover_photo\": null,\n      \"user\": null\n    },\n    // ... more collections\n  ],\n  \"urls\": {\n    \"raw\": \"https://images.unsplash.com/photo-1417325384643-aac51acc9e5d\",\n    \"full\": \"https://images.unsplash.com/photo-1417325384643-aac51acc9e5d?q=75&fm=jpg\",\n    \"regular\": \"https://images.unsplash.com/photo-1417325384643-aac51acc9e5d?q=75&fm=jpg&w=1080&fit=max\",\n    \"small\": \"https://images.unsplash.com/photo-1417325384643-aac51acc9e5d?q=75&fm=jpg&w=400&fit=max\",\n    \"thumb\": \"https://images.unsplash.com/photo-1417325384643-aac51acc9e5d?q=75&fm=jpg&w=200&fit=max\"\n  },\n  \"links\": {\n    \"self\": \"https://api.unsplash.com/photos/Dwu85P9SOIk\",\n    \"html\": \"https://unsplash.com/photos/Dwu85P9SOIk\",\n    \"download\": \"https://unsplash.com/photos/Dwu85P9SOIk/download\"\n    \"download_location\": \"https://api.unsplash.com/photos/Dwu85P9SOIk/download\"\n  },\n  \"user\": {\n    \"id\": \"QPxL2MGqfrw\",\n    \"updated_at\": \"2016-07-10T11:00:01-05:00\",\n    \"username\": \"exampleuser\",\n    \"name\": \"Joe Example\",\n    \"portfolio_url\": \"https://example.com/\",\n    \"bio\": \"Just an everyday Joe\",\n    \"location\": \"Montreal\",\n    \"total_likes\": 5,\n    \"total_photos\": 10,\n    \"total_collections\": 13,\n    \"instagram_username\": \"instantgrammer\",\n    \"twitter_username\": \"crew\",\n    \"links\": {\n      \"self\": \"https://api.unsplash.com/users/exampleuser\",\n      \"html\": \"https://unsplash.com/exampleuser\",\n      \"photos\": \"https://api.unsplash.com/users/exampleuser/photos\",\n      \"likes\": \"https://api.unsplash.com/users/exampleuser/likes\",\n      \"portfolio\": \"https://api.unsplash.com/users/exampleuser/portfolio\"\n    }\n  }\n}\n```\n\n\n## 搜索图片返回示例\n\n\n```json\n{\n  \"total\": 133,\n  \"total_pages\": 7,\n  \"results\": [\n    {\n      \"id\": \"eOLpJytrbsQ\",\n      \"created_at\": \"2014-11-18T14:35:36-05:00\",\n      \"width\": 4000,\n      \"height\": 3000,\n      \"color\": \"#A7A2A1\",\n      \"blur_hash\": \"LaLXMa9Fx[D%~q%MtQM|kDRjtRIU\",\n      \"likes\": 286,\n      \"liked_by_user\": false,\n      \"description\": \"A man drinking a coffee.\",\n      \"user\": {\n        \"id\": \"Ul0QVz12Goo\",\n        \"username\": \"ugmonk\",\n        \"name\": \"Jeff Sheldon\",\n        \"first_name\": \"Jeff\",\n        \"last_name\": \"Sheldon\",\n        \"instagram_username\": \"instantgrammer\",\n        \"twitter_username\": \"ugmonk\",\n        \"portfolio_url\": \"http://ugmonk.com/\",\n        \"profile_image\": {\n          \"small\": \"https://images.unsplash.com/profile-1441298803695-accd94000cac?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=7cfe3b93750cb0c93e2f7caec08b5a41\",\n          \"medium\": \"https://images.unsplash.com/profile-1441298803695-accd94000cac?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=5a9dc749c43ce5bd60870b129a40902f\",\n          \"large\": \"https://images.unsplash.com/profile-1441298803695-accd94000cac?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=32085a077889586df88bfbe406692202\"\n        },\n        \"links\": {\n          \"self\": \"https://api.unsplash.com/users/ugmonk\",\n          \"html\": \"http://unsplash.com/@ugmonk\",\n          \"photos\": \"https://api.unsplash.com/users/ugmonk/photos\",\n          \"likes\": \"https://api.unsplash.com/users/ugmonk/likes\"\n        }\n      },\n      \"current_user_collections\": [],\n      \"urls\": {\n        \"raw\": \"https://images.unsplash.com/photo-1416339306562-f3d12fefd36f\",\n        \"full\": \"https://hd.unsplash.com/photo-1416339306562-f3d12fefd36f\",\n        \"regular\": \"https://images.unsplash.com/photo-1416339306562-f3d12fefd36f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=92f3e02f63678acc8416d044e189f515\",\n        \"small\": \"https://images.unsplash.com/photo-1416339306562-f3d12fefd36f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=263af33585f9d32af39d165b000845eb\",\n        \"thumb\": \"https://images.unsplash.com/photo-1416339306562-f3d12fefd36f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=8aae34cf35df31a592f0bef16e6342ef\"\n      },\n      \"links\": {\n        \"self\": \"https://api.unsplash.com/photos/eOLpJytrbsQ\",\n        \"html\": \"http://unsplash.com/photos/eOLpJytrbsQ\",\n        \"download\": \"http://unsplash.com/photos/eOLpJytrbsQ/download\"\n      }\n    },\n    // more photos ...\n  ]\n}\n```\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-22",
        "type": "Post",
        "category": "技术分享",
        "slug": "unsplash",
        "tags": [
          "工具",
          "开发"
        ],
        "summary": "最近发现一个不错的网站封面制作的网站——《https://coverview.vercel.app/》，通过使用它，我生成了非常多的自定义的图片封面。一次偶然间，发现里面的图片都是 unsplash 提供的。为何我不试试看自己实现一个获取 unsplash 免费图片的接口呢？于是就有了这篇文章。",
        "title": "[分享]unsplash免费图片接口使用与实战",
        "status": "Published",
        "urlname": "e49a71ec-c929-47bf-8116-aab954b01885",
        "updated": "2023-12-22 08:33:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "e49a71ec-c929-47bf-8116-aab954b01885"
        }
      ],
      "body": "",
      "realName": "[分享]unsplash免费图片接口使用与实战",
      "relativePath": "/技术分享/[分享]unsplash免费图片接口使用与实战.md"
    },
    {
      "id": "7f0e9c68-f40d-44c7-a58b-10cf142c14f0",
      "doc_id": "7f0e9c68-f40d-44c7-a58b-10cf142c14f0",
      "updated": 1703048220000,
      "body_original": "\n# 整理定义\n\n\n## **Transaction Scheduling**\n\n\n> In the fields of [databases](https://en.wikipedia.org/wiki/Database) and [transaction processing](https://en.wikipedia.org/wiki/Transaction_processing) (transaction management), a **schedule** (or **history**) of a system is an abstract model to describe [execution](https://en.wikipedia.org/wiki/Execution_(computing)) of transactions running in the system. Often it is a _list_ of operations (actions) ordered by time, performed by a set of [transactions](https://en.wikipedia.org/wiki/Database_transaction) that are executed together in the system. If the order in time between certain operations is not determined by the system, then a [_partial order_](https://en.wikipedia.org/wiki/Partial_order) is used. Examples of such operations are requesting a read operation, reading, writing, aborting, [committing](https://en.wikipedia.org/wiki/Commit_(data_management)), requesting a [lock](https://en.wikipedia.org/wiki/Lock_(computer_science)), locking, etc. Not all transaction operation types should be included in a schedule, and typically only selected operation types (e.g., data access operations) are included, as needed to reason about and describe certain phenomena. Schedules and schedule properties are fundamental concepts in database [concurrency control](https://en.wikipedia.org/wiki/Concurrency_control) theory.\n\n\n**事务调度：**<u>在数据库和事务处理（事务管理）领域中，系统的调度（或历史）是描述系统中运行的事务的执行的抽象模型</u>。 通常，它是按时间排序的操作（动作）列表，由系统中一起执行的一组事务执行。 如果某些操作之间的时间顺序不是由系统确定的，则使用部分顺序。 此类操作的示例包括请求读操作、读取、写入、中止、提交、请求锁、加锁等。并非所有事务操作类型都应包含在调度中，并且通常仅包含选定的操作类型（例如，数据访问操作） ）根据需要被包括在内，以推理和描述某些现象。 调度和调度属性是数据库并发控制理论中的基本概念。\n\n\n# 复述展开\n\n\n## CATS\n\n\nCATS：Contention-Aware Transaction Scheduling algorithm\n\n\nInnoDB使用`CATS算法`来优先处理等待锁的事务。当多个事务在等待同一个对象上的锁时，CATS算法通过分配一个调度权重来确定哪个事务首先获得锁，这个权重是基于一个事务阻塞的其他事务数量来计算的。\n例如，如果有两个事务在等待同一个对象上的锁，那么<u>阻塞更多事务的那个事务</u>会被分配<u>更高的调度权重</u>。如果权重相同，优先权将给予<u>等待时间最长</u>的事务。\n\n\n> ⛔ **注意**  \n> 在`MySQL 8.0.20`之前，InnoDB还使用先进先出（FIFO）算法来调度事务，只有在锁争用非常激烈的情况下才使用CATS算法。MySQL 8.0.20中CATS算法的增强使得FIFO算法变得多余，允许其被移除。自MySQL 8.0.20起，之前由FIFO算法执行的事务调度工作由CATS算法来执行。在某些情况下，这一变化可能会影响事务获得锁的顺序。\n\n\n你可以通过查询信息模式INNODB_TRX表中的TRX_SCHEDULE_WEIGHT列来查看事务调度权重。权重只为等待中的事务计算。等待中的事务是指那些处于LOCK WAIT事务执行状态的事务，如TRX_STATE列所报告的。一个不在等待锁的事务会报告一个NULL的TRX_SCHEDULE_WEIGHT值。\n\n\nINNODB_METRICS计数器提供了用于监控代码级别事务调度事件的功能。\n\n- `lock_rec_release_attempts`：尝试释放记录锁的次数。单次尝试可能导致零个或多个记录锁被释放，因为在单个结构中可能有零个或多个记录锁。\n- `lock_rec_grant_attempts`：尝试授予记录锁的次数。单次尝试可能导致零个或多个记录锁被授予。\n- `lock_schedule_refreshes`：分析等待图以更新调度事务权重的次数。\n\n# 理解体会\n\n\nInnoDB中的Contention-Aware Transaction Scheduling（CATS）算法是一种用于管理数据库锁争用的高级调度机制。在数据库系统中，当多个事务试图同时访问同一资源（如行、页或表）时，就会发生锁争用。为了维护数据的一致性和完整性，数据库管理系统（DBMS）必须确保在任何给定时间，只有一个事务可以修改特定的数据项。\n\n\n在传统的锁调度机制中，如先进先出（FIFO）策略，事务是按照它们到达的顺序获得锁的。然而，这种方法并不总是最优的，因为它没有考虑到事务之间的依赖关系。一个事务可能阻塞了多个其他事务，而另一个事务可能只阻塞了一个。在这种情况下，让阻塞更多事务的那个事务先行，可能会更快地解决锁争用，从而提高整体的并发性和性能。\n\n\nCATS算法正是基于这样的思想。它通过分配一个调度权重来优先处理等待锁的事务。这个权重是基于一个事务阻塞的其他事务的数量来计算的。如果一个事务阻塞了许多其他事务，它将获得更高的权重，因此有更高的优先级来获得锁。这样做的目的是尽量减少整体的等待时间和提高事务吞吐量。\n\n\n如果两个事务的调度权重相同，CATS算法会考虑它们的等待时间，优先给予等待时间最长的事务。这种方法既考虑了事务的影响范围，也考虑了公平性。\n\n\n从MySQL 8.0.20版本开始，由于CATS算法的增强，原有的FIFO算法被移除，所有的事务调度都由CATS算法来执行。这意味着在高并发和锁争用的环境下，CATS算法可以更智能地调度事务，减少锁等待时间，提高数据库的性能。\n\n\n总的来说，CATS算法是一种更加智能和动态的事务调度方法，它通过考虑事务之间的相互影响和等待时间，来优化锁的分配，从而提高数据库的并发处理能力和整体性能。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-20",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day90",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day90【概念解析】Transaction Scheduling",
        "status": "Published",
        "urlname": "7f0e9c68-f40d-44c7-a58b-10cf142c14f0",
        "updated": "2023-12-20 04:57:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "7f0e9c68-f40d-44c7-a58b-10cf142c14f0"
        }
      ],
      "body": "",
      "realName": "Day90【概念解析】Transaction Scheduling",
      "relativePath": "/行业概念/Day90【概念解析】Transaction Scheduling.md"
    },
    {
      "id": "a379bc15-440b-42a6-9d06-369c4cdc17c6",
      "doc_id": "a379bc15-440b-42a6-9d06-369c4cdc17c6",
      "updated": 1703246700000,
      "body_original": "\n> 😄 本文主要介绍下 InnoDB引擎中的一些最值。其中包含 InnoDB 表、索引、表空间和其他方面的最值限制。\n\n\n# 整理定义\n\n\n**InnoDB Limits（InnoDB中的最值）**\n\n\n没有明确的行业含义，主要是对InnoDB引擎中的各个方面的值的限制进行整理和归纳说明。\n\n\n参考原文【[MySQL :: MySQL 8.0 Reference Manual :: 15.22 InnoDB Limits](https://dev.mysql.com/doc/refman/8.0/en/innodb-limits.html)】\n\n\n# 复述展开\n\n\n## 表限制\n\n- 一个表最多可以包含**1017**列，包括虚拟生成列在内。\n- 一个表最多可以包含**64**个二级索引。\n\n## 索引限制\n\n- 对于使用`DYNAMIC`或`COMPRESSED`行格式的InnoDB表，索引键前缀长度限制为**3072**字节。\n\n\t对于使用`REDUNDANT`或`COMPACT`行格式的InnoDB表，索引键前缀长度限制为**767**字节。例如，如果使用utf8mb4字符集，一个TEXT或VARCHAR列的列前缀索引超过**191**个字符可能会触发这个限制，因为每个字符最多使用4个字节。\n\n\n\t> 🎈 **注意事项**  \n\t> - 尝试使用超过限制的索引键前缀长度会返回错误。  \n\t>   \n\t> - 如果在创建MySQL实例时通过指定`innodb_page_size`选项将InnoDB页面大小减少到8KB或4KB，最大索引键长度会按比例降低，基于16KB页面大小的3072字节限制。即页面大小为8KB时，最大索引键长度为1536字节；页面大小为4KB时，为768字节。  \n\t>   \n\t> - 适用于索引键前缀的限制也适用于完整列索引键。\n\n- 多列索引最多允许16列。超过限制会返回错误。\n\n\t```json\n\tERROR 1070 (42000): Too many key parts specified; max 16 parts allowed\n\t```\n\n\n## 行限制\n\n- 对于 4KB、8KB、16KB 和 32KB 页面大小，最大行大小（不包括存储在页外的任何可变长度列）略小于页面的一半。 \n例如，默认 innodb_page_size 16KB 的最大行大小约为 8000 字节。 但是，对于 64KB 的 InnoDB 页大小，最大行大小约为 16000 字节。 LONGBLOB 和 LONGTEXT 列必须小于 4GB，并且总行大小（包括 BLOB 和 TEXT 列）必须小于 4GB。\n\n\t如果一行的长度小于半个页面，那么它的全部内容都会存储在页面内。如果超过半个页面，那么会选择可变长度的列进行外部存储，直到行的大小适合半个页面为止。\n\n- 虽然InnoDB内部支持大于65535字节的行大小，但MySQL本身对所有列的组合大小施加了65535字节的行大小限制。\n\n## 文件限制\n\n- 在一些较旧的操作系统上，文件必须小于**2GB**。这不是InnoDB的限制。如果你需要一个大型的系统表空间，请使用几个较小的数据文件而不是一个大型数据文件进行配置，或者将表数据分布在每个表的文件和通用表空间数据文件中。\n- InnoDB日志文件的组合最大为512GB。\n\n## 表空间限制\n\n- 最小表空间的容量略大于10MB。最大表空间的容量取决于InnoDB页面的大小。\n\n\t最大表空间的容量也是单个表的最大容量。\n\n\n\t| I**nnoDB Page Size** | **Maximum Tablespace Size** |\n\t| -------------------- | --------------------------- |\n\t| 4KB                  | 16TB                        |\n\t| 8KB                  | 32TB                        |\n\t| 16KB                 | 64TB                        |\n\t| 32KB                 | 128TB                       |\n\t| 64KB                 | 256TB                       |\n\n- 一个 InnoDB 实例最多支持 $2^{32}$ (4294967296) 个表空间，其中少量表空间保留用于撤消表和临时表。\n- 共享表空间最多支持 $2^{32} $(4294967296) 个表。\n- 表空间文件的路径（包括文件名）不能超过 Windows 上的 MAX_PATH 限制。 在 Windows 10 之前，MAX_PATH 限制为 260 个字符。 从 Windows 10 版本1607 开始，常见 Win32 文件和目录函数中删除了 MAX_PATH 限制，但必须启用新行为。\n\n# 理解体会\n\n\n本章整理了下InnoDB引擎的表、索引、文件、行、表空间的限制值，作为平时使用时稍加注意。\n\n\n这些限制是由InnoDB的内部结构和MySQL数据库的设计决定的。了解这些限制对于数据库架构设计和性能优化至关重要。\n\n\n最后整理了一个表格，用于快速记录：\n\n\n| 类别      | 限制项                           | 最值/限制描述                                                         |\n| ------- | ----------------------------- | --------------------------------------------------------------- |\n| 表       | 列的最大数量                        | 最多1017列，包括虚拟生成列。                                                |\n| 表       | 行的最大大小                        | 约为页面大小的一半，16KB页面为8000字节，64KB页面为16000字节。LONGBLOB/LONGTEXT < 4GB。 |\n| 索引      | 辅助索引的最大数量                     | 最多64个。                                                          |\n| 索引      | 索引键前缀长度限制（DYNAMIC/COMPRESSED） | 最大3072字节。                                                       |\n| 索引      | 索引键前缀长度限制（REDUNDANT/COMPACT）  | 最大767字节。                                                        |\n| 索引      | 多列索引的列数限制                     | 最多16列。                                                          |\n| 表空间     | 最小表空间大小                       | 略大于10MB。                                                        |\n| 表空间     | 最大表空间大小                       | 取决于页面大小，16KB页面为256TB。                                           |\n| 表空间     | 一个InnoDB实例容纳表空间数量             | $2^{32}$ (4294967296)个表空间                                       |\n| 日志文件    | InnoDB日志文件的最大大小               | 总最大512GB。                                                       |\n| 操作系统    | 文件大小限制                        | 在一些旧操作系统上，文件必须小于2GB。                                            |\n| MySQL限制 | MySQL行大小限制                    | 所有列的组合大小限制为65,535字节。                                            |\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-21",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day91",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day91【概念解析】 InnoDB Limits",
        "status": "Published",
        "urlname": "a379bc15-440b-42a6-9d06-369c4cdc17c6",
        "updated": "2023-12-22 12:05:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "a379bc15-440b-42a6-9d06-369c4cdc17c6"
        }
      ],
      "body": "",
      "realName": "Day91【概念解析】 InnoDB Limits",
      "relativePath": "/行业概念/Day91【概念解析】 InnoDB Limits.md"
    },
    {
      "id": "5519ed7b-ce9d-4e4d-acd3-f5039d58c34d",
      "doc_id": "5519ed7b-ce9d-4e4d-acd3-f5039d58c34d",
      "updated": 1703246700000,
      "body_original": "\n> 😄 本章主要讲讲 InnoDB的磁盘IO行为，重点从 **Read-Ahead** 与 **Doublewrite Buffer** 两方面展开。之前在Buffer Pool 与 Doublewrite Buffer 这两章有着重介绍过，本章不再赘述。\n\n\n# 整理定义\n\n\nInnoDB在可能的情况下使用异步磁盘I/O，通过创建多个线程来处理I/O操作，同时允许其他数据库操作在I/O仍在进行中时继续进行。在Linux和Windows平台上，InnoDB使用可用的操作系统和库函数来执行“原生”的异步I/O。在其他平台上，InnoDB仍然使用I/O线程，但这些线程可能实际上会等待I/O请求完成；这种技术被称为“模拟”的异步I/O。\n\n\n# 复述展开\n\n\n## 预读（Read-Ahead）\n\n\n如果InnoDB能够确定有高概率需要某些数据，它会执行预读操作，将这些数据带入缓冲池，以便数据在内存中可用。对连续数据进行少数几次大的读取请求比进行多次小的、分散的请求更有效率。InnoDB中有两种预读启发式方法：\n\n\n在顺序预读中，如果InnoDB注意到对表空间中的段的访问模式是顺序的，它会提前批量发布数据库页面的读取请求到I/O系统。\n\n\n在随机预读中，如果InnoDB注意到表空间中的某个区域似乎正在被完全读入缓冲池，它会将剩余的读取请求发布到I/O系统。\n\n\n[bookmark](https://kuangyichen.com/article/industry-day59)\n\n\n## 双写缓冲区（Doublewrite Buffer）\n\n\nInnoDB使用一种称为双写缓冲区的新颖文件刷新技术，默认情况下在大多数情况下是启用的（innodb_doublewrite=ON）。它为意外退出或断电后的恢复增加了安全性，并且通过减少对fsync()操作的需求，在大多数Unix变体上提高了性能。\n\n\n在将页面写入数据文件之前，InnoDB首先将它们写入称为双写缓冲区的存储区域。只有在写入和刷新到双写缓冲区完成后，InnoDB才将页面写入数据文件的适当位置。如果在页面写入过程中出现操作系统、存储子系统故障或意外的mysqld进程退出（导致“撕裂页面”情况），InnoDB可以在恢复期间从双写缓冲区中找到页面的良好副本。\n\n\n[bookmark](https://kuangyichen.com/article/industry-day65)\n\n\n# 理解体会\n\n\n**总结：**\n\n- InnoDB在可能的情况下使用异步磁盘I/O，以提高效率。\n- 在Linux和Windows上，InnoDB执行原生异步I/O；在其他平台上，执行模拟异步I/O。\n- InnoDB有两种预读机制来提高数据访问效率：顺序预读和随机预读。\n\t- **顺序预读**：当检测到对表空间段的顺序访问时，InnoDB会提前批量请求读取数据库页面。\n\t- **随机预读**：当检测到表空间的某个区域正在被读入缓冲池时，InnoDB会请求读取剩余的页面。\n- InnoDB使用双写缓冲区来提高数据的安全性和提升性能。\n\t- 在数据写入数据文件之前，先写入双写缓冲区。\n\t- 这样做可以在系统崩溃或断电后，通过双写缓冲区恢复完好的页面数据。\n- 双写缓冲区默认启用，并且在大多数Unix系统上减少了对fsync()操作的需求，从而提高了性能。\n\n了解和配置这些特性可以帮助数据库管理员优化InnoDB的性能，并确保数据的完整性和可靠性。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-22",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day92",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day92【概念解析】InnoDB Disk I/O",
        "status": "Published",
        "urlname": "5519ed7b-ce9d-4e4d-acd3-f5039d58c34d",
        "updated": "2023-12-22 12:05:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "5519ed7b-ce9d-4e4d-acd3-f5039d58c34d"
        }
      ],
      "body": "",
      "realName": "Day92【概念解析】InnoDB Disk I!O",
      "relativePath": "/行业概念/Day92【概念解析】InnoDB Disk I!O.md"
    },
    {
      "id": "f0baef65-459b-42b1-a40d-47199f028309",
      "doc_id": "f0baef65-459b-42b1-a40d-47199f028309",
      "updated": 1703304300000,
      "body_original": "\n> 😄 本章对于InnoDB的文件空间管理进行整理，会从不同类型的表空间开始展开，然后从文件存储的各个单元（页、区、段、表空间）进行阐述，然后谈谈关于这些文件管理的一些配置。\n\n\n# 整理定义\n\n\n首先我们看看 Tablespace，Segment， Extend， Page的关系图\n\n\n![](https://image.kuangyichen.com/image/innodb_tablespaces.png)\n\n\n# 复述展开\n\n\n## Tablespace 表空间\n\n\n关于表空间，可以在【InnoDB Tablespace】中回顾。下面引用之前文章中的部分定义：\n\n\n[bookmark](https://kuangyichen.com/article/industry-day68)\n\n\n**定义**\n\n\n> **表空间**是InnoDB存储系统的逻辑单位，它包含了用于存储表数据、索引、元数据等的数据文件。在物理层面，表空间可以是一个或多个文件，这些文件可以分布在文件系统的不同位置。\n\n\n**分类**\n\n\n> InnoDB的表空间可以分为以下几类：\n\n\t1. **系统表空间**：这是InnoDB初始化时创建的表空间，通常包含在名为`ibdata1`的文件中。系统表空间不仅存储了系统表的数据和索引，还包括了撤销日志（undo logs）、数据字典、双写缓冲区（doublewrite buffer）和插入缓冲区（insert buffer）等。\n\t2. **文件每表表空间**：从MySQL 5.6.6版本开始，InnoDB默认为每个表创建独立的表空间文件，这些文件的扩展名通常是`.ibd`。这种方式使得每个表的数据和索引被隔离在单独的文件中，便于管理和优化。\n\t3. **通用表空间**：这是MySQL 5.7版本引入的特性，允许用户创建共享的表空间，多个表可以共享同一个表空间文件。这种方式提供了更灵活的数据管理选项。\n\t4. **临时表空间**：用于存储临时表的数据和索引。这些临时表主要用于查询处理过程中的排序和哈希操作。\n\t5. **撤销表空间**：用于存储撤销日志的表空间。在MySQL 5.7及更高版本中，可以配置多个撤销表空间，以提高并发事务的性能。\n\n您在配置文件中使用 `innodb_data_file_path` 配置选项定义的数据文件组成了 InnoDB 系统表空间。这些文件在逻辑上串联起来形成系统表空间。这里没有使用条带化技术。您无法定义表在系统表空间内的具体分配位置。在新创建的系统表空间中，InnoDB 从第一个数据文件开始分配空间。\n\n\n[bookmark](https://kuangyichen.com/article/industry-day69)\n\n\n为了避免将所有表和索引存储在系统表空间内带来的问题，您可以启用 innodb_file_per_table 配置选项（默认情况下启用），该选项将每个新创建的表存储在一个单独的表空间文件中（扩展名为 .ibd）。对于以这种方式存储的表，在磁盘文件中的碎片更少，当表被截断时，空间会被返回给操作系统，而不是仍然被 InnoDB 在系统表空间内保留。【关于文件每表表空间，可以参考之前的[文章](https://kuangyichen.com/article/industry-day70)】\n\n\n[bookmark](https://kuangyichen.com/article/industry-day70)\n\n\n您还可以将表存储在通用表空间中。通用表空间是使用 CREATE TABLESPACE 语法创建的共享表空间。它们可以在 MySQL 数据目录之外创建，能够容纳多个表，并支持所有行格式的表。【关于通用表空间，可以参考】\n\n\n[bookmark](https://kuangyichen.com/article/industry-day71)\n\n\n## Page 页\n\n\n**一种表示 InnoDB 在任意时刻在磁盘（数据文件）和内存（缓冲池）之间传输多少数据的单位**。 一页可以包含一行或多行，具体取决于每行中的数据量。 如果一行不能完全放入一页，InnoDB 会设置额外的指针式数据结构，以便有关该行的信息可以存储在一页中。\n\n\n在每个页面中容纳更多数据的一种方法是使用压缩行格式。 对于使用 BLOB 或大型文本字段的表，紧凑行格式允许将这些大型列与行的其余部分分开存储，从而减少不引用这些列的查询的 I/O 开销和内存使用量。\n\n\n当 InnoDB 批量读取或写入一组页面以增加 I/O 吞吐量时，它一次读取或写入一个范围。\n\n\n**MySQL实例中的所有InnoDB磁盘数据结构共享相同的页面大小。**\n\n\n> What is Page ([MySQL :: MySQL 8.0 Reference Manual :: MySQL Glossary](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_page))\n\n\n\tA unit representing how much data `InnoDB` transfers at any one time between disk (the _**data files**_) and memory (the _**buffer pool**_). A page can contain one or more _**rows**_, depending on how much data is in each row. If a row does not fit entirely into a single page, `InnoDB` sets up additional pointer-style data structures so that the information about the row can be stored in one page.\n\n\n\tOne way to fit more data in each page is to use _**compressed row format**_. For tables that use BLOBs or large text fields, _**compact row format**_ allows those large columns to be stored separately from the rest of the row, reducing I/O overhead and memory usage for queries that do not reference those columns.\n\n\n\tWhen `InnoDB` reads or writes sets of pages as a batch to increase I/O throughput, it reads or writes an _**extent**_ at a time.\n\n\n\tAll the `InnoDB` disk data structures within a MySQL instance share the same _**page size**_.\n\n\n## **Extent 区**\n\n\n**Tablespace 中的一组 Page**。 **对于 16KB 的****默认页面****大小，一个 Extent 包含 64 个Page。** \n\n\n| InnoDB 页面大小            | Extent 大小 | Page数量/Extend |\n| ---------------------- | --------- | ------------- |\n| 4KB                    | 1MB       | 256           |\n| 8KB                    | 1MB       | 128           |\n| 16KB（默认大小）             | 1MB       | 64            |\n| 32KB (自 MySQL 5.7.6 起) | 2MB       | 64            |\n| 64KB (自 MySQL 5.7.6 起) | 4MB       | 64            |\n\n\n> 💡 在 MySQL 5.6 中，InnoDB 实例的页面大小可以是 4KB、8KB 或 16KB，由 `innodb_page_size` 配置选项控制。 对于 4KB、8KB 和 16KB 页面大小，**Extent**大小始终为 1MB（或 1048576 字节）。  \n> MySQL 5.7.6 中添加了对 32KB 和 64KB InnoDB 页大小的支持。 对于 32KB 页面大小，**Extent**大小为 2MB。 对于 64KB 页面大小，扩展区大小为 4MB。  \n>   \n> InnoDB 功能（例如段、预读请求和双写缓冲区）使用一次读取、写入、分配或释放数据的 I/O 操作。\n\n\n> What is Extend ([MySQL :: MySQL 8.0 Reference Manual :: MySQL Glossary](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_extent))\n\n\n\tA group of _**pages**_ within a _**tablespace**_. For the default _**page size**_ of 16KB, an extent contains 64 pages. In MySQL 5.6, the page size for an `InnoDB` instance can be 4KB, 8KB, or 16KB, controlled by the [`innodb_page_size`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size) configuration option. For 4KB, 8KB, and 16KB pages sizes, the extent size is always 1MB (or 1048576 bytes).\n\n\n\tSupport for 32KB and 64KB `InnoDB` page sizes was added in MySQL 5.7.6. For a 32KB page size, the extent size is 2MB. For a 64KB page size, the extent size is 4MB.\n\n\n\t`InnoDB` features such as _**segments**_, _**read-ahead**_ requests and the _**doublewrite buffer**_ use I/O operations that read, write, allocate, or free data one extent at a time.\n\n\n## **Segment 段**\n\n\nInnoDB 表空间内的分区。 如果表空间类似于目录，那么 segment 就类似于该目录中的文件。 segment可以增长，也可以创建新segment。\n\n\n例如，在 _**file-per-table**_ tablespace 中，表数据位于一个segment中，每个关联索引位于其自己的segment中。 系统表空间包含许多不同的段，因为它可以容纳许多表及其关联的索引。 在 MySQL 8.0 之前，系统表空间还包含一个或多个用于撤消日志的回滚段。\n\n\n> ⛔ 注意，这里的回滚段（rollback segment 与 这里说的 segment 不同）  \n> > The storage area containing the _**undo logs**_. Rollback segments have traditionally resided in the _**system tablespace**_. As of MySQL 5.6, rollback segments can reside in _**undo tablespaces**_. As of MySQL 5.7, rollback segments are also allocated to the _global temporary tablespace_.\n\n\n随着数据的插入和删除，segment会增长和缩小。 当一个segment需要更多空间时，它一次扩展一个 extend（1MB）。 类似地，当不再需要某个范围内的所有数据时，段会释放该 extend 的空间。\n\n\n> What is Segment （[MySQL :: MySQL 8.0 Reference Manual :: MySQL Glossary](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_segment)）\n\n\n\tA division within an `InnoDB` _**tablespace**_. If a tablespace is analogous to a directory, the segments are analogous to files within that directory. A segment can grow. New segments can be created.\n\n\n\tFor example, within a _**file-per-table**_ tablespace, table data is in one segment and each associated index is in its own segment. The _**system tablespace**_ contains many different segments, because it can hold many tables and their associated indexes. Prior to MySQL 8.0, the system tablespace also includes one or more _**rollback segments**_ used for _**undo logs**_.\n\n\n\tSegments grow and shrink as data is inserted and deleted. When a segment needs more room, it is extended by one _**extent**_ (1 megabyte) at a time. Similarly, a segment releases one extent's worth of space when all the data in that extent is no longer needed.\n\n\n## Row 行与页的关系\n\n\n对于 4KB、8KB、16KB 和 32KB innodb_page_size 设置，最大行长度略小于数据库页大小的一半。 例如，对于默认的 16KB InnoDB 页面大小，最大行长度略小于 8KB。 对于 innodb_page_size = 64KB 的设置，最大行长度略小于 16KB。\n\n\n如果某行不超过最大行长度，则所有行都存储在本地页面内。 如果某行超过最大行长度，则会选择可变长度列进行**外部页外存储**，直到该行符合<u>最大行长度限制</u>。 可变长度列的外部页外存储因行格式而异：\n\n- 紧凑和冗余行格式【COMPACT and REDUNDANT Row Formats】\n\n\t当选择可变长度列用于外部页外存储时，InnoDB 将前 768 个字节存储在本地行中，其余部分存储在外部溢出页中。 每个这样的列都有自己的溢出页面列表。 768 字节前缀附带一个 20 字节值，该值存储列的真实长度并指向存储其余值的溢出列表。 请参见第 15.10 节“InnoDB 行格式”。\n\n- 动态和压缩行格式【DYNAMIC and COMPRESSED Row Formats】\n\n\t当选择可变长度列用于外部页外存储时，InnoDB 将 20 字节指针本地存储在行中，其余部分存储在外部溢出页中。 \n\n\n`LONGBLOB` 和 `LONGTEXT` 列必须小于 4GB，并且总行长度（包括 BLOB 和 TEXT 列）必须小于 4GB。\n\n\n这里可以联动下  InnoDB中的限制：\n\n\n[bookmark](https://kuangyichen.com/article/industry-day91)\n\n\n# 理解体会\n\n\n本章对于InnoDB的文件空间管理进行整理回顾。对于表空间、段、区、页、行进行了展开介绍，也回顾了之前学习的一些内容，并且整体对上述文件单元进行了概括。\n\n\n从这篇文章中，可以了解各个单元的组成以及相互之间的关系，还有各部分大小的换算等等。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-23",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day93",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day93【概念解析】File Space Management",
        "status": "Published",
        "urlname": "f0baef65-459b-42b1-a40d-47199f028309",
        "updated": "2023-12-23 04:05:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "f0baef65-459b-42b1-a40d-47199f028309"
        }
      ],
      "body": "",
      "realName": "Day93【概念解析】File Space Management",
      "relativePath": "/行业概念/Day93【概念解析】File Space Management.md"
    },
    {
      "id": "2729d946-80f9-4140-8e72-966a2b1e8283",
      "doc_id": "2729d946-80f9-4140-8e72-966a2b1e8283",
      "updated": 1703505660000,
      "body_original": "\n# 整理定义\n\n\n**InnoDB Checkpoints** （InnoDB 检查点）\n\n\n> As changes are made to data pages that are cached in the _**buffer pool**_, those changes are written to the _**data files**_ sometime later, a process known as _**flushing**_. The checkpoint is a record of the latest changes (represented by an _**LSN**_ value) that have been successfully written to the data files.\n\n\n当对缓存在缓冲池中的数据页进行更改时，这些更改会在稍后写入数据文件，这个过程称为刷新（Flushing）。 检查点是已成功写入数据文件的最新更改（由 LSN 值表示）的记录。\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: MySQL Glossary](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_checkpoint)\n\n\n**这里重新复习下之前学过的一些词汇：**\n\n1. Buffer pool：是InnoDB存储引擎的一个重要组成部分，它是InnoDB用于缓存表和索引数据的内存区域。\n\n\t[bookmark](https://kuangyichen.com/article/industry-day59)\n\n2. _**flushing:**_\n\n\t将更改写入已缓冲在内存区域或临时磁盘存储区域中的数据库文件。 定期刷新的InnoDB存储结构包括**重做日志**、**撤消日志**和**缓冲池**。\n\n\n\t刷新可能会发生，因为内存区域已满并且系统需要释放一些空间，因为提交操作意味着可以完成事务的更改，或者因为缓慢的关闭操作意味着所有未完成的工作都应该完成。 当一次刷新所有缓冲数据并不重要时，InnoDB 可以使用一种称为模糊检查点的技术来刷新小批量的页面，以分散 I/O 开销。\n\n\n\t> [MySQL :: MySQL 8.0 Reference Manual :: MySQL Glossary](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_flush)\n\n\n\t\tTo write changes to the database files, that had been buffered in a memory area or a temporary disk storage area. The `InnoDB` storage structures that are periodically flushed include the _**redo log**_, the _**undo log**_, and the _**buffer pool**_.\n\n\n\t\tFlushing can happen because a memory area becomes full and the system needs to free some space, because a _**commit**_ operation means the changes from a transaction can be finalized, or because a _**slow shutdown**_ operation means that all outstanding work should be finalized. When it is not critical to flush all the buffered data at once, `InnoDB` can use a technique called _**fuzzy checkpointing**_ to flush small batches of pages to spread out the I/O overhead.\n\n3. LSN(log sequence number):\n\n\tLSN 是“日志序列号”的缩写。 **这个任意的、不断增加的值表示与重做日志中记录的操作相对应的时间点**。 （这一时间点与事务边界无关；它可以落在一个或多个事务的中间。）它由 InnoDB 在崩溃恢复期间内部使用并用于管理缓冲池。\n\n\n\t> 💡 在 MySQL 5.6.3 之前，LSN 是一个 **4 字节无符号整数**。 当重做日志文件大小限制从 4GB 增加到 512GB 时，LSN 在 MySQL 5.6.3 中变成了 **8 字节无符号整数**，因为需要额外的字节来存储额外的大小信息。 在 MySQL 5.6.3 或更高版本上构建并使用 LSN 值的应用程序应使用 64 位而不是 32 位变量来存储和比较 LSN 值。\n\n\n\t> [MySQL :: MySQL 8.0 Reference Manual :: MySQL Glossary](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_lsn)\n\n\n\t\tAcronym for “log sequence number”. This arbitrary, ever-increasing value represents a point in time corresponding to operations recorded in the _**redo log**_. (This point in time is regardless of _**transaction**_ boundaries; it can fall in the middle of one or more transactions.) It is used internally by `InnoDB` during _**crash recovery**_ and for managing the _**buffer pool**_.\n\n\n\t\tPrior to MySQL 5.6.3, the LSN was a 4-byte unsigned integer. The LSN became an 8-byte unsigned integer in MySQL 5.6.3 when the redo log file size limit increased from 4GB to 512GB, as additional bytes were required to store extra size information. Applications built on MySQL 5.6.3 or later that use LSN values should use 64-bit rather than 32-bit variables to store and compare LSN values.\n\n\n\t\tIn the _**MySQL Enterprise Backup**_ product, you can specify an LSN to represent the point in time from which to take an _**incremental backup**_. The relevant LSN is displayed by the output of the **mysqlbackup** command. Once you have the LSN corresponding to the time of a full backup, you can specify that value to take a subsequent incremental backup, whose output contains another LSN for the next incremental backup.\n\n\n# 复述展开\n\n\n将日志文件设置得非常大可能会减少检查点期间的磁盘 I/O。 将日志文件的总大小设置为与缓冲池一样大甚至更大通常是有意义的。\n\n\n## **检查点处理的工作原理**\n\n\nInnoDB 实现了一种称为模糊检查点的检查点机制（fuzzy checkpointing）。 InnoDB 小批量地从缓冲池中刷新修改的数据库页面。 无需在单个批次中刷新缓冲池，否则会在检查点过程中中断用户 SQL 语句的处理。\n\n\n在崩溃恢复（crash recovery）期间，InnoDB 会查找写入日志文件的检查点标签。 它知道标签之前对数据库的所有修改都存在于数据库的磁盘映像中。 然后InnoDB从检查点向前扫描日志文件，将记录的修改应用到数据库。\n\n\ncrash recovery\n\n\n> [MySQL :: MySQL 8.0 Reference Manual :: MySQL Glossary](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_crash_recovery)  \n> The cleanup activities that occur when MySQL is started again after a _**crash**_. For _**InnoDB**_ tables, changes from incomplete transactions are replayed using data from the _**redo log**_. Changes that were _**committed**_ before the crash, but not yet written into the _**data files**_, are reconstructed from the _**doublewrite buffer**_. When the database is shut down normally, this type of activity is performed during shutdown by the _**purge**_ operation.  \n> During normal operation, committed data can be stored in the _**change buffer**_ for a period of time before being written to the data files. There is always a tradeoff between keeping the data files up-to-date, which introduces performance overhead during normal operation, and buffering the data, which can make shutdown and crash recovery take longer.\n\n\nfuzzy checkpointing\n\n\n> [MySQL :: MySQL 8.0 Reference Manual :: MySQL Glossary](https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_fuzzy_checkpointing)  \n> A technique that _**flushes**_ small batches of _**dirty pages**_ from the _**buffer pool**_, rather than flushing all dirty pages at once which would disrupt database processing.\n\n\n# 理解体会\n\n\nInnoDB 的检查点是一种优化磁盘 I/O 和确保数据一致性的机制。通过模糊检查点，InnoDB 能够在不中断数据库操作的情况下，逐步将缓冲池中更改过的页面刷新到磁盘。这种方法避免了在检查点时必须执行的大量磁盘写入操作，从而提高了系统的整体性能。\n\n\n在系统崩溃后，InnoDB 利用检查点机制来恢复数据。它通过检查点标签确定哪些数据已经安全写入磁盘，然后从该点开始应用日志文件中记录的更改，以确保数据库的完整性和一致性。通过这种方式，InnoDB 能够在系统崩溃后快速恢复到最后一致的状态。\n\n\n另外这章中，我们又学习几个概念：Buffer pool，flush，LSN，crash revovery, fuzzy checkpointing\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-24",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day94",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day94【概念解析】InnoDB Checkpoints",
        "status": "Published",
        "urlname": "2729d946-80f9-4140-8e72-966a2b1e8283",
        "updated": "2023-12-25 12:01:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "2729d946-80f9-4140-8e72-966a2b1e8283"
        }
      ],
      "body": "",
      "realName": "Day94【概念解析】InnoDB Checkpoints",
      "relativePath": "/行业概念/Day94【概念解析】InnoDB Checkpoints.md"
    },
    {
      "id": "cc986261-bc28-4f37-8493-883dd3bcf140",
      "doc_id": "cc986261-bc28-4f37-8493-883dd3bcf140",
      "updated": 1703507100000,
      "body_original": "\n# 整理定义\n\n\n**InnoDB Monitors（InnoDB 监视器）**\n\n\n`InnoDB` monitors provide information about the `InnoDB` internal state. This information is useful for performance tuning.\n\n\nInnoDB Monitors 是 MySQL 中的一组特殊工具，用于监控 InnoDB 存储引擎的内部工作状态。这些监控工具可以提供关于 InnoDB 性能和操作的详细信息，帮助数据库管理员诊断问题、优化性能以及更好地理解 InnoDB 的行为。\n\n\n# 复述展开\n\n\n## 分类\n\n\n有两种类型的“InnoDB”监视器：\n\n- The standard `InnoDB` Monitor （标准监视器）\n- The `InnoDB` Lock Monitor（锁监视器）\n\n其中\n\n\n标准监视器显示以下类型的信息：\n\n\t- 主后台线程完成的工作\n\t- 信号量等待\n\t- 有关最新外键和死锁错误的数据\n\t- 锁定等待交易\n\t- 活动事务持有的表和记录锁\n\t- 待处理的 I/O 操作和相关统计数据\n\t- 插入缓冲区和自适应哈希索引统计\n\t- 重做日志数据\n\t- 缓冲池统计\n\t- 行操作数据\n\n锁定监视器打印附加锁定信息作为标准“InnoDB”监视器输出的一部分。\n\n\n> [MySQL :: MySQL 8.0 Reference Manual :: 15.17.1 InnoDB Monitor Types](https://dev.mysql.com/doc/refman/8.0/en/innodb-monitor-types.html)\n\n\n\tThere are two types of `InnoDB` monitor:\n\n\t- The standard `InnoDB` Monitor displays the following types of information:\n\t\t- Work done by the main background thread\n\t\t- Semaphore waits\n\t\t- Data about the most recent foreign key and deadlock errors\n\t\t- Lock waits for transactions\n\t\t- Table and record locks held by active transactions\n\t\t- Pending I/O operations and related statistics\n\t\t- Insert buffer and adaptive hash index statistics\n\t\t- Redo log data\n\t\t- Buffer pool statistics\n\t\t- Row operation data\n\t- The `InnoDB` Lock Monitor prints additional lock information as part of the standard `InnoDB` Monitor output.\n\n# 理解体会\n\n\n启用这些监控器通常涉及到在 MySQL 服务器上执行特定的 SQL 命令或设置系统变量。一些监控器，如标准监控器，可以临时启用以获取即时的状态报告；而其他监控器可能需要将输出重定向到一个文件中，以便进行持续监控和后续分析。\n\n\n需要注意的是，虽然 InnoDB 监控器是强大的诊断工具，但它们也可能对系统性能产生影响，特别是在高负载的生产环境中。因此，建议仅在需要时启用它们，并在分析完毕后关闭。此外，监控器输出的信息可能非常庞大和复杂，需要一定的专业知识来正确解读和利用这些数据。\n\n\n总的来说，InnoDB 监控器是数据库管理员和开发人员的宝贵资源，可以帮助他们深入了解数据库的内部运作，并在必要时进行优化和故障排除。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-25",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day95",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day95【概念解析】InnoDB Monitors",
        "status": "Published",
        "urlname": "cc986261-bc28-4f37-8493-883dd3bcf140",
        "updated": "2023-12-25 12:25:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "cc986261-bc28-4f37-8493-883dd3bcf140"
        }
      ],
      "body": "",
      "realName": "Day95【概念解析】InnoDB Monitors",
      "relativePath": "/行业概念/Day95【概念解析】InnoDB Monitors.md"
    },
    {
      "id": "9b2cbca7-67d1-4084-8439-fa2631cb762e",
      "doc_id": "9b2cbca7-67d1-4084-8439-fa2631cb762e",
      "updated": 1703672760000,
      "body_original": "\n# 整理定义\n\n\n## What is PEST Analysis\n\n\n在商业分析中，PEST 分析（“政治、经济、社会文化和技术”）描述了战略管理的环境扫描部分中使用的宏观环境因素框架。 它是进行战略分析或市场研究时外部环境分析的一部分，并概述了需要考虑的不同宏观环境因素。 它是了解市场增长或衰退、业务地位、潜力和运营方向的战略工具。\n\n\n> In [business analysis](https://en.wikipedia.org/wiki/Business_analysis), **PEST analysis** (\"political, economic, socio-cultural and technological\") describes a framework of macro-environmental factors used in the [environmental scanning](https://en.wikipedia.org/wiki/Environmental_scanning) component of [strategic management](https://en.wikipedia.org/wiki/Strategic_management). It is part of an external environment analysis when conducting a strategic analysis or doing [market research](https://en.wikipedia.org/wiki/Market_research), and gives an overview of the different macro-environmental factors to be taken into consideration. It is a strategic tool for understanding market growth or decline, business position, potential and direction for operations.\n\n\n\t——《[PEST analysis - Wikipedia](https://en.wikipedia.org/wiki/PEST_analysis)》\n\n\n## The first developer\n\n\nPEST 分析由 `Aguilar` 于 `1967` 年开发，作为<u>环境扫描框架</u>。`Aguilar`认为，企业必须扫描可能影响战略的经济、技术、政治和社会类别（ETPS），将环境扫描定义如下：“扫描有关公司外部环境中的事件和关系的信息，这些信息将有助于高层管理人员 管理层的任务是制定公司未来的行动方针。”\n\n\n> PEST analysis was developed in 1967 by [Aguilar](https://en.wikipedia.org/wiki/Francis_J._Aguilar) as an [environmental scanning](https://en.wikipedia.org/wiki/Environmental_scanning) framework.[[1]](https://en.wikipedia.org/wiki/PEST_analysis#cite_note-:0-1) Aguilar argued that firms must scan the economic, technical, political and social categories (ETPS) that may affect strategy, defining environmental scanning as follows, “scanning for information about events and relationships in a company’s outside environment, the knowledge of which would assist top management in its task of charting the company’s future course of action.”\n\n\n# 复述展开\n\n\n## PEST 组成（_**P**__**olitical，**__**E**__**conomic，**__**S**__**ocial，**__**T**__**echnological**_）\n\n- **政治因素**与政府如何干预经济有关。 具体来说，政治因素包括<u>税收政策、劳动法、环境法、贸易限制、关税和政治稳定</u>等。 政治因素还可能包括<u>政府旨在提供或被提供的商品和服务（优点商品）以及政府不希望提供的商品和服务（缺点商品或缺点）</u>。 此外，政府对一个<u>国家的健康、教育和基础设施</u>具有很大影响。\n- **经济因素**包括<u>经济增长、汇率、通货膨胀率和利率</u>。 这些因素会极大地影响企业的运营方式。 例如，利率会影响公司的资本成本，从而影响企业增长和扩张的程度。\n- **社会因素**包括<u>文化方面和健康意识、人口增长率、年龄分布、职业态度和对安全的重视程度</u>。 社会因素的高趋势会影响对公司产品的需求以及公司的运营方式。 例如，人口老龄化可能意味着劳动力规模较小且意愿较差（从而增加劳动力成本）。 此外，公司可能会改变各种管理策略以适应由此引起的社会趋势（例如招聘老年工人）。\n- **技术因素**包括<u>研发活动、自动化、技术激励和技术变革速度等技术方面</u>。 这些可以确定进入壁垒、最低有效生产水平并影响外包决策。 此外，技术转变会影响成本、质量并带来创新\n\n## PEST Composition\n\n\n> The basic PEST analysis includes four factors:\n\n\t- _**Political**_ factors relate to how the [government](https://en.wikipedia.org/wiki/Government) intervenes in the economy. Specifically, political factors have areas including [tax policy](https://en.wikipedia.org/wiki/Tax_policy), [labour law](https://en.wikipedia.org/wiki/Labour_law), [environmental law](https://en.wikipedia.org/wiki/Environmental_law), [trade restrictions](https://en.wikipedia.org/wiki/Trade_restriction), [tariffs](https://en.wikipedia.org/wiki/Tariffs), and political stability. Political factors may also include goods and services which the government aims to provide or be provided ([merit goods](https://en.wikipedia.org/wiki/Merit_good)) and those that the government does not want to be provided ([demerit goods](https://en.wikipedia.org/wiki/Demerit_good) or merit bads). Furthermore, governments have a high impact on the [health](https://en.wikipedia.org/wiki/Health), [education](https://en.wikipedia.org/wiki/Education), and [infrastructure](https://en.wikipedia.org/wiki/Infrastructure) of a nation.\n\t- _**Economic**_ factors include [economic growth](https://en.wikipedia.org/wiki/Economic_growth), [exchange rates](https://en.wikipedia.org/wiki/Exchange_rate), [inflation rate](https://en.wikipedia.org/wiki/Inflation_rate), and [interest rates](https://en.wikipedia.org/wiki/Interest_rate). These factors can drastically affect how a business operates. For example, interest rates affect a firm's [cost of capital](https://en.wikipedia.org/wiki/Cost_of_capital) and therefore to what extent a business grows and expands.\n\t- _**Social**_ factors include the cultural aspects and health consciousness, population growth rate, age distribution, career attitudes and emphasis on safety. High trends in social factors affect the demand for a company's products and how that company operates. For example, the ageing population may imply a smaller and less-willing workforce (thus increasing the cost of labour). Furthermore, companies may change various management strategies to adapt to social trends caused from this (such as recruiting older workers).\n\t- _**Technological**_ factors include technological aspects like [R&D](https://en.wikipedia.org/wiki/R%26D) activity, [automation](https://en.wikipedia.org/wiki/Automation), technology incentives and the rate of [technological change](https://en.wikipedia.org/wiki/Technological_change). These can determine [barriers to entry](https://en.wikipedia.org/wiki/Barrier_to_entry), minimum efficient production level and influence the [outsourcing](https://en.wikipedia.org/wiki/Outsourcing) decisions. Furthermore, technological shifts would affect costs, quality, and lead to [innovation](https://en.wikipedia.org/wiki/Innovation)\n\n## 适用性\n\n\n该模型的因素对特定公司的重要性将根据其行业和生产的商品而有所不同。例如，消费者和[B2B](https://en.wikipedia.org/wiki/Business-to-business)公司往往更容易受到社会因素的影响，而全球国防承包商往往更容易受到政治因素的影响。此外，未来更有可能发生变化或与特定公司更相关的因素将变得更加重要。例如，一家大量借贷的公司需要更多地关注经济因素（尤其是利率）。此外，生产各种产品的企业集团公司（如索尼、迪斯尼或英国石油公司）可能会发现，使用 PESTEL 模型一次分析公司的一个部门更有用，从而专注于与该部门相关的特定因素。公司可能还希望将因素划分为地理相关性，例如本地、国家和全球。\n\n\n## 限制性\n\n\n虽然PEST分析在商业实践中被广泛使用，但批评者认为它有局限性。PEST分析有助于解释过去的市场变化，但并不总是适合预测或预见即将到来的市场变化。原因是PEST分析提供了广泛的类别，这些类别可能非常简单，因为它们缺乏关于究竟是什么催化了破坏的具体标准。换言之，PEST分析没有为在类别中强调什么和不强调什么提供指导。因此，公司可能会被无法在类别中整齐定义的中断所蒙蔽。\n\n\n# 理解体会\n\n\nPEST 分析是一种在战略管理和市场研究中常用的宏观环境分析工具。它的目的是识别影响组织的外部因素，这些因素通常超出组织的直接控制范围。PEST 是政治（Political）、经济（Economic）、社会（Social）和技术（Technological）四个单词的首字母缩写，这四个方面构成了 PEST 分析的基本框架。\n\n- **政治（Political）**：\n这一类别包括政府政策、政治稳定性、税收政策、贸易限制和法律法规等因素。这些因素可能会影响组织的运营、成本结构和市场需求。\n- **经济（Economic）**：\n经济因素涉及经济周期、利率、汇率、通货膨胀率、经济增长和消费者信心等。这些因素会影响购买力、成本和公司的财务状况。\n- **社会（Social）**：\n社会趋势、人口统计、教育水平、文化因素、生活方式变化和社会意识等都属于社会类别。这些因素可以影响组织的市场规模和品牌形象。\n- **技术（Technological）**：\n技术因素包括技术发展、创新、自动化、研发活动和技术意识。技术进步可以改变生产方式、产品和市场。\n\nPEST 分析是一种有力的工具，可以帮助组织识别和分析影响其运营和表现的宏观环境因素。通过对这些外部因素的深入了解，组织可以更好地制定策略，抓住机遇，规避风险，并在竞争激烈的市场中保持竞争力。然而，PEST 分析也有局限性，它可能无法涵盖所有相关因素，且分析结果可能受到主观判断的影响。因此，**它最好与其他分析工具结合使用，以获得更全面的视角**。例如，对内，可以使用 SWOT 分析法，对外，使用PEST分析法，两者结合起来。\n\n\n# 参考\n\n\n[PEST analysis - Wikipedia](https://en.wikipedia.org/wiki/PEST_analysis)\n\n\n[What Is a PEST Analysis? (businessnewsdaily.com)](https://www.businessnewsdaily.com/5512-pest-analysis-definition-examples-template.html)\n\n\n[PEST Analysis - Identifying \"Big Picture\" Opportunities and Threats (mindtools.com)](https://www.mindtools.com/aqa3q37/pest-analysis)\n\n\n[PEST-Analysis_2023.pdf (nova-live-content.s3.eu-west-2.amazonaws.com)](https://nova-live-content.s3.eu-west-2.amazonaws.com/public/content-downloadable/PEST-Analysis_2023.pdf)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-26",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day96",
        "tags": [
          "行业概念",
          "分析"
        ],
        "summary": "",
        "title": "Day96【概念解析】PEST Analysis",
        "status": "Published",
        "urlname": "9b2cbca7-67d1-4084-8439-fa2631cb762e",
        "updated": "2023-12-27 10:26:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "9b2cbca7-67d1-4084-8439-fa2631cb762e"
        }
      ],
      "body": "",
      "realName": "Day96【概念解析】PEST Analysis",
      "relativePath": "/行业概念/Day96【概念解析】PEST Analysis.md"
    },
    {
      "id": "a657dc01-1842-48f0-99f0-1eec78437ce0",
      "doc_id": "a657dc01-1842-48f0-99f0-1eec78437ce0",
      "updated": 1703670960000,
      "body_original": "\n> 😀 今天CR代码时，看到有人使用 `!=` 来比较 `Integer`类型以及`String`类型的大小，编译器提示：  \n> `Number object are compared using ‘!=’, not ‘equals()’` ，今天就来说说 Java中的类型比较吧。\n\n\n# 相等比较\n\n\n为什么不能使用`!=` 或者 `==` 来比较 Integer 和 String 是否相等？\n\n\n`!=` 或者 `==` 使用时，实际上比较的是两个对象的引用是否相同，如果不是同一个引用的话，会返回不符合预期的结果。\n\n\n**示例1：**\n\n\n```java\njshell> Integer i1 = 128;\ni1 ==> 128\n\njshell> Integer i2 = 128;\ni2 ==> 128\n\njshell> System.out.print(i1==i2)\nfalse\n```\n\n\n**示例2：**\n\n\n```java\njshell> String s1 = \"kuang\";\ns1 ==> \"kuang\"\n\njshell> String s2 = new String(\"kuang\");\ns2 ==> \"kuang\"\n\njshell> System.out.print(s1==s2);\nfalse\n```\n\n\n# 原理分析\n\n\n对于经常使用C++的同学来说，很容用错。\n\n\n在 Java 中，对于基本类型的比较，可以直接使用  `!=` 或者 `==` 。`Integer` 是 基本类型 `int` 的包装类型，是一个对象。`String`也是对象，使用 `!=` 或者 `==` 都是比较对象的引用而不是实际的值，所以逻辑上会有问题。\n\n\n```java\njshell> Integer i5 = 129;\ni5 ==> 129\n\njshell> Integer i6 = 129;\ni6 ==> 129\n\njshell> System.identityHashCode(i5);\n$15 ==> 485041780\n\njshell> System.identityHashCode(i6);\n$16 ==> 117244645\n```\n\n\n可以看到，i5 和 i6 两者的地址是不一样的，所以比较的话，使用 `==` 肯定是返回 false 了。\n\n\n同理，s7 和 s8 也是不一样的。\n\n\n```java\njshell> String s7 = \"kuang\";\ns7 ==> \"kuang\"\n\njshell> String s8 = new String(\"kuang\");\ns8 ==> \"kuang\"\n\njshell> String s9 = \"kuang\";\ns9 ==> \"kuang\"\n\njshell> String s10 = new String(\"kuang\");\ns10 ==> \"kuang\"\n\njshell> System.identityHashCode(s7);\n$19 ==> 832947102\n\njshell> System.identityHashCode(s8);\n$20 ==> 507084503\n\njshell> System.identityHashCode(s9);\n$22 ==> 832947102\n\njshell> System.identityHashCode(s10);\n$24 ==> 1845904670\n```\n\n\n在Java中，字符串有两种创建方式：一种是直接使用双引号创建，如 `String s7 = \"kuang\"`；另一种是通过`new`关键字创建，如 `String s8 = new String(\"kuang\")`。\n\n1. 当我们使用双引号创建字符串时，Java会首先在字符串常量池中查找是否已经存在值为\"kuang\"的字符串。如果存在，就直接返回这个字符串的引用；如果不存在，就在字符串常量池中创建一个新的字符串，并返回这个新字符串的引用。**这种方式创建的字符串，相同内容的字符串在内存中只有一份，可以节省内存**。\n2. 当我们使用`new`关键字创建字符串时，Java会在堆内存中**创建一个新的字符串对象**，不管字符串常量池中是否已经存在值为\"kuang\"的字符串。**这种方式创建的字符串，即使内容相同，也会在内存中创建多份**。\n\n在上面的例子中，`s7`、`s8`、`s9`、`s10`虽然内容相同，但是它们在内存中的位置是不同的。`s7`是在字符串常量池中创建的，而`s8`是在堆内存中创建的。`System.identityHashCode()`方法返回的是对象在内存中的地址，所以`s7`和`s8`的地址是不同的。\n\n\n> 🔥 **特别注意**  \n> 在Java中，`Integer`是一个类，用于封装基本数据类型`int`的数据。`Integer`的值是不可变的，一旦创建，其值就不能改变。  \n>   \n> Java为了提高性能和减少内存消耗，对-128到127之间的`Integer`对象进行了缓存，这些对象在Java虚拟机启动时就已经创建好了。当我们调用`Integer.valueOf()`方法或者直接赋值（如`Integer i = 127`）时，如果值在-128到127之间，Java就会直接返回缓存中的对象，而不是新创建一个对象。这就是为什么在这个范围内，两个相同值的`Integer`对象的`System.identityHashCode()`返回的值是相同的。  \n>   \n> 然而，对于超过这个范围的值，如129，Java会新创建一个`Integer`对象。所以，即使两个`Integer`对象的值相同，它们在内存中的地址也是不同的，`System.identityHashCode()`返回的值也是不同的。  \n>   \n> ```java  \n> jshell> Integer i3 = 12;  \n> i3 ==> 12  \n>   \n> jshell> Integer i4 = 12;  \n> i4 ==> 12  \n>   \n> jshell> System.out.print(i3==i4);  \n> true  \n> ```\n\n\n# 正确使用方法？\n\n\n使用 `equals` ，它比较的是两个对象的值是否一致。\n\n\n**Integer 类型：**\n\n\n```java\nInteger i1 = 1200;\nInteger i2 = 1200;\nboolean isEqual = i1.equals(i2);\n```\n\n\n**String 类型：**\n\n\n```java\nString str1 = \"hello\";\nString str2 = \"world\";\nboolean isEqual = str1.equals(str2); // false\nint comparisonResult = str1.compareTo(str2); // negative value, because \"hello\" is less than \"world\"\n```\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-27",
        "type": "Post",
        "category": "技术分享",
        "slug": "java-compare",
        "tags": [
          "Java"
        ],
        "summary": "",
        "title": "[实践]谈Java中的比较",
        "status": "Published",
        "urlname": "a657dc01-1842-48f0-99f0-1eec78437ce0",
        "updated": "2023-12-27 09:56:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "a657dc01-1842-48f0-99f0-1eec78437ce0"
        }
      ],
      "body": "",
      "realName": "[实践]谈Java中的比较",
      "relativePath": "/技术分享/[实践]谈Java中的比较.md"
    },
    {
      "id": "fdc6b065-8f6a-4b0d-985f-4cf43664b2b2",
      "doc_id": "fdc6b065-8f6a-4b0d-985f-4cf43664b2b2",
      "updated": 1703672760000,
      "body_original": "\n# 整理定义\n\n\n## SWOT 分析（Strengths, Weaknesses, Opportunities, and Threats）\n\n\nSWOT 分析（或 SWOT 矩阵）是一种**战略规划**和**战略管理技术**，用于帮助**个人**或**组织**识别与业务竞争或项目规划相关的优**势、劣势、机会和威胁**。 有时称为情境评估或情境分析。\n\n\n> [SWOT analysis - Wikipedia](https://en.wikipedia.org/wiki/SWOT_analysis)\n\n\n\t**SWOT analysis** (or **SWOT matrix**) is a [strategic planning](https://en.wikipedia.org/wiki/Strategic_planning) and [strategic management](https://en.wikipedia.org/wiki/Strategic_management) technique used to help a person or organization identify Strengths, Weaknesses, Opportunities, and Threats related to [business](https://en.wikipedia.org/wiki/Business) competition or [project planning](https://en.wikipedia.org/wiki/Project_planning). It is sometimes called [situational assessment](https://en.wikipedia.org/wiki/Risk_management) or situational analysis.[[1]](https://en.wikipedia.org/wiki/SWOT_analysis#cite_note-1) Additional acronyms using the same components include TOWS and WOTS-UP.[[2]](https://en.wikipedia.org/wiki/SWOT_analysis#cite_note-Weihrich1982-2)[[3]](https://en.wikipedia.org/wiki/SWOT_analysis#cite_note-3)\n\n\n\tThis technique is designed for use in the preliminary stages of decision-making processes and can be used as a tool for evaluation of the strategic position of organizations of many kinds (for-profit enterprises, local and national governments, NGOs, etc.).[[4]](https://en.wikipedia.org/wiki/SWOT_analysis#cite_note-4) It is intended to identify the internal and external factors that are favorable and unfavorable to achieving the objectives of the venture or project. Users of a SWOT analysis often ask and answer questions to generate meaningful information for each category to make the tool useful and identify their [competitive advantage](https://en.wikipedia.org/wiki/Competitive_advantage). SWOT has been described as a tried-and-true tool of strategic analysis,[[5]](https://en.wikipedia.org/wiki/SWOT_analysis#cite_note-5) but has also been criticized for its limitations, and alternatives have been developed.\n\n\n# 复述展开\n\n\n## SWOT组成\n\n\nSWOT(Strengths, Weaknesses, Opportunities, and Threats)\n\n- Strengths 优势：业务或项目比其他业务或项目具有优势的特征\n- Weaknesses 劣势：使企业或项目相对于其他企业或项目处于劣势的特征\n- Opportunities 机会：环境中企业或项目可以利用的元素来发挥其优势\n- Threats 威胁：环境中可能给业务或项目带来麻烦的元素\n\n> [SWOT analysis - Wikipedia](https://en.wikipedia.org/wiki/SWOT_analysis)\n\n\n\tThe name is an acronym for the four components the technique examines:\n\n\t- _Strengths_: characteristics of the business or project that give it an advantage over others\n\t- _Weaknesses_: characteristics that place the business or project at a disadvantage relative to others\n\t- _Opportunities_: elements in the environment that the business or project could exploit to its advantage\n\t- _Threats_: elements in the environment that could cause trouble for the business or project\n\n\tResults of the assessment are often presented in the form of a [matrix](https://en.wikipedia.org/wiki/Table_(information)),[[6]](https://en.wikipedia.org/wiki/SWOT_analysis#cite_note-Ansoff1980-6) or simply as paragraphs.\n\n\n下图是 SWOT分析的矩阵，左上角是S，左下角为O，右上角为W，右下角为T：\n\n\n纵向来看，Strengths 与 Opportunities 是对我们有利的，Weaknesses 与 Threats 对我们不利的；\n\n\n横向来看，Strengths 与 Weaknesses 是内部元素，Opportunities 与 Threats 是外部元素。\n\n\n![](https://image.kuangyichen.com/image/202312271807612.png)\n\n\n## 为何要使用SWOT\n\n1. **确定机会领域：**进行分析的最大好处之一是确定增长机会。 对于那些知道自己想要改进但不确定如何开始的初创公司和团队来说，这是一个很好的起点。\n\n\t机会可以来自许多不同的途径，例如外部因素（例如产品多样化以获得竞争优势）或内部因素（例如改进团队的工作流程）。 无论哪种方式，利用机会都是团队成长的绝佳方式。\n\n2. **确定可以改进的领域**：在 SWOT 分析过程中识别弱点和威胁可以为更好的业务战略铺平道路。\n\n\t最终，从错误中吸取教训是取得卓越成就的最佳途径。 一旦找到需要简化的领域，您就可以与团队成员一起集思广益，制定行动计划。 这将使您能够利用已知的有效方法并增强公司的优势。\n\n3. **识别可能存在风险的领域：**无论您是否有风险登记册，在风险引起关注之前识别风险始终至关重要。 SWOT 分析可以帮助您掌握可能在风险决策过程中发挥作用的可操作项目。\n\n\t将 SWOT 分析与 PEST 分析结合起来可能会有所帮助，PEST 分析会检查政治、经济、社会和技术因素等外部解决方案，所有这些都可以帮助您识别和规划项目风险。\n\n\n## 优点\n\n- **简单：**<u>SWOT 分析的简单性使其成为许多人的首选工具</u>。 因为它很简单，所以它消除了战略规划的神秘感，让人们批判性地思考他们的情况，而不会感到不知所措。\n\n\t例如，一家想要扩大业务的小型面包店可以使用 SWOT 分析来轻松了解其当前状况。 识别忠诚客户群等优势、座位空间有限等劣势、手工烘焙食品的上升趋势等机遇以及附近大型连锁面包店的威胁，这些都可以在没有任何专业知识或技术专长的情况下完成。\n\n- **多功能性：**<u>其多功能性使得 SWOT 分析可以跨多个领域使用</u>。 无论是企业制定未来战略还是个人规划职业道路，SWOT 分析都非常适合。\n\n\t例如，竞争激烈的硅谷环境中的一家科技初创企业可以利用 SWOT 来引导其盈利之路。 优势可能包括技术精湛的开发团队； 弱点可能是缺乏品牌认知度； 机会可能存在于新兴市场； 威胁可能包括老牌科技巨头。\n\n- **有意义的分析：**<u>SWOT 擅长识别可能影响绩效的外部因素</u>。 它促使组织超越当前并预测未来潜在的情况。\n\n\t例如，零售公司可以使用 SWOT 分析来识别电子商务中的机会以及消费者行为变化或新竞争对手进入市场带来的威胁。 通过这样做，公司可以制定如何利用在线平台通过增强客户体验或采用新技术来促进销售和应对威胁的策略。\n\n\n## 缺点\n\n- **主观性和偏见**：<u>SWOT 分析的主观性可能会导致偏差</u>。 它在很大程度上依赖于个人的看法，有时可能会忽视关键数据或误解信息，从而导致有偏差的结论。\n\n\t例如，由于管理层过度自信，一家制造公司可能会低估市场新进入者的威胁。 这种主观性可能导致缺乏竞争性定价策略的准备，最终影响公司的市场份额。\n\n- **缺乏优先顺序：**<u>SWOT 分析列出了问题，但未能确定问题的优先顺序</u>。 组织可能很难确定哪些要素值得立即关注和资源。\n\n\t例如，一家医疗保健提供者发现了许多扩展新服务的机会，但可能会因选择而不知所措。 如果没有明确的方法对这些机会进行排名，资源可能会分散得太分散，或者分配给影响力不大的项目，从而导致结果不太理想。\n\n- **静态分析**：<u>由于 SWOT 分析捕捉的是特定时刻的快照，因此它可能会错过挑战和机遇不断变化的性质，从而可能导致过时的策略</u>。 \n一个例子是，一家传统零售企业进行了 SWOT 分析，并决定专注于扩大实体店，而忽视了电子商务的增长趋势。 随着网上购物的不断发展和普及，静态分析可能会导致投资回报递减的领域，而错过蓬勃发展的电子商务市场趋势。\n\n# 理解体会\n\n\nSWOT分析的目的是帮助我们更好地理解自己的优势和弱点，以及外部环境的机会和威胁，从而制定出更有效的战略。通过SWOT分析，我们可以发现自己的优势并加以利用，改善自己的弱点，抓住机会，应对威胁，从而实现目标。仅仅使用 SWOT 还是不够的，还可以介绍 PEST分析法，从内部和外部一起分析。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-27",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day97",
        "tags": [
          "行业概念",
          "分析"
        ],
        "summary": "",
        "title": "Day97【概念解析】SWOT Analysis",
        "status": "Published",
        "urlname": "fdc6b065-8f6a-4b0d-985f-4cf43664b2b2",
        "updated": "2023-12-27 10:26:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "fdc6b065-8f6a-4b0d-985f-4cf43664b2b2"
        }
      ],
      "body": "",
      "realName": "Day97【概念解析】SWOT Analysis",
      "relativePath": "/行业概念/Day97【概念解析】SWOT Analysis.md"
    },
    {
      "id": "dfa743c9-c01d-435a-9339-c29995b7ca57",
      "doc_id": "dfa743c9-c01d-435a-9339-c29995b7ca57",
      "updated": 1703850960000,
      "body_original": "\n# 题目\n\n\n> **下面的t1表中的数据为用户A的访问记录，请计算每个月的访问的天数。返回 year,month,days 格式。**\n\n\n```sql\nCREATE TABLE t1 (year YEAR, month INT UNSIGNED,\n             day INT UNSIGNED);\nINSERT INTO t1 VALUES(2000,1,1),(2000,1,20),(2000,1,30),(2000,2,2),\n            (2000,2,23),(2000,2,23);\n```\n\n\n正确结果返回应该为：\n\n\n```sql\n+------+-------+------+\n| year | month | days |\n+------+-------+------+\n| 2000 |     1 |    3 |\n| 2000 |     2 |    2 |\n+------+-------+------+\n```\n\n\n## 答案一\n\n\n```sql\nSELECT year,month,BIT_COUNT(BIT_OR(1<<day)) AS days FROM t1 GROUP BY year,month;\n```\n\n\n## 答案二\n\n\n```sql\nSELECT year, month, COUNT(day) AS days FROM (SELECT DISTINCT year,month,day FROM t1) as t2 GROUP BY year, month;\n```\n\n\n# 分析\n\n\n## 我的答案\n\n\n一开始，我想着，先对年月日进行一次去重，因为只需要计算一个月的天数，所以重复的数据是没有用的。\n\n\n```sql\nSELECT DISTINCT year,month,day FROM t1;\n```\n\n\n然后，在上面的结果的基础上，根据年月进行分组计算日的数量。\n\n\n```sql\nSELECT year, month, COUNT(day) AS days FROM (SELECT DISTINCT year,month,day FROM t1) as t2 GROUP BY year, month;\n```\n\n\n## 标准答案\n\n\n```sql\nSELECT year, month, COUNT(day) AS days FROM (SELECT DISTINCT year,month,day FROM t1) as t2 GROUP BY year, month;\n```\n\n\n然而，看了一眼标准答案，惊为天人，用了两个位运算的函数 `BIT_COUNT` 与 `BIT_OR` ，还有左移符号 `<<` 。\n\n\n看第一眼，没看懂了，看第二眼，还是没有看懂。\n\n- `BIT_COUNT` 计算对应的数的二进制中的1的数量，例如\n\n```sql\nmysql> SELECT BIT_COUNT(4); \n+--------------+\n| BIT_COUNT(4) |\n+--------------+\n|            1 |\n+--------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT BIT_COUNT(\"64\");\n+-----------------+\n| BIT_COUNT(\"64\") |\n+-----------------+\n|               1 |\n+-----------------+\n1 row in set (0.00 sec)\n```\n\n- `BIT_OR` 可以理解为按位或，就是对 select出来的字段的值的列表，进行所有按位或操作。\n\n```sql\n可以这样理解，BIT_OR(column) # column 包含 1,3,4,5\n那么最终结果为 1|3|4|5 = 7\n```\n\n\n**继续分析：**\n\n1. `1<<day`：这是一个位左移操作。它将数字1向左移动`day`位。在这里，`day`很可能是一个代表月份中某一天的字段。例如，如果`day`是2，那么`1<<day`的结果是4（二进制中的`100`），这相当于2的`day`次方。\n2. `BIT_OR(1<<day)`：`BIT_OR`是一个聚合函数，它对组内所有行执行位或（bitwise OR）操作。在这个查询中，它将同一个`year`和`month`组内的所有`1<<day`的结果进行位或操作。这样，每个不同的`day`都会在结果中设置一个位。因为每个月的天数是唯一的，所以这个操作最终会产生一个整数，其二进制表示中的位数表示该月中出现的不同天数。【不超过32天，位数不会超过31，可以使用`BIT_OR`】\n3. `BIT_COUNT(BIT_OR(1<<day))`：`BIT_COUNT`函数计算一个数字的二进制表示中1的数量。在这个查询中，它计算上一步`BIT_OR`操作结果中的位数，这个位数就是该月中有记录的不同天数。\n4. `GROUP BY year,month`：这个语句指示MySQL按照年和月来分组记录。对于每个组，上述的位运算将单独执行。\n\n综上所述，这个查询对于每个月份，计算了`t1`表中有记录的不同天数。这种方法特别适用于处理稀疏数据，即不是每一天都有记录的情况。通过位运算，它能高效地对存在记录的天数进行计数，而不需要存储一个完整的日期列表。\n\n\n# 总结\n\n\n位运算的函数还是挺有效的，学习了。\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 3.6.8 Calculating Visits Per Day](https://dev.mysql.com/doc/refman/8.0/en/calculating-days.html)\n\n\n[MySQL :: MySQL 8.0 Reference Manual :: 12.12 Bit Functions and Operators](https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-29",
        "type": "Post",
        "category": "技术分享",
        "slug": "a-sql-problem-thinking",
        "tags": [
          "SQL",
          "MySQL"
        ],
        "summary": "",
        "title": "[实践]一道SQL题引发的思考",
        "status": "Published",
        "urlname": "dfa743c9-c01d-435a-9339-c29995b7ca57",
        "updated": "2023-12-29 11:56:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "dfa743c9-c01d-435a-9339-c29995b7ca57"
        }
      ],
      "body": "",
      "realName": "[实践]一道SQL题引发的思考",
      "relativePath": "/技术分享/[实践]一道SQL题引发的思考.md"
    },
    {
      "id": "f5b9b26b-1453-4d4f-bdf9-d82cbe607d92",
      "doc_id": "f5b9b26b-1453-4d4f-bdf9-d82cbe607d92",
      "updated": 1703852040000,
      "body_original": "\n# 整理定义\n\n\n二进制日志（binary log）是一个文件，记录了所有试图更改表数据的语句或行更改。在复制场景中，可以重放二进制日志的内容以使副本保持最新状态，或者在从备份恢复表数据后使数据库保持最新状态。二进制日志功能可以开启或关闭，尽管Oracle建议如果使用复制或执行备份，应始终启用它。\n\n\n您可以使用`mysqlbinlog`命令检查二进制日志的内容，或者在复制或恢复期间重放它。\n\n\n对于MySQL企业备份产品，二进制日志的文件名和文件内当前位置是重要的细节。在复制上下文中进行备份时，您可以指定`--slave-info`选项来记录源的这些信息。\n\n\n在MySQL 5.0之前，有一个类似的功能可用，称为更新日志。在MySQL 5.0及更高版本中，二进制日志取代了更新日志。\n\n\n> **binary log(bin log)**\n\n\n\tA file containing a record of all statements or row changes that attempt to change table data. The contents of the binary log can be replayed to bring replicas up to date in a _**replication**_ scenario, or to bring a database up to date after restoring table data from a backup. The binary logging feature can be turned on and off, although Oracle recommends always enabling it if you use replication or perform backups.\n\tYou can examine the contents of the binary log, or replay it during replication or recovery, by using the [**mysqlbinlog**](https://dev.mysql.com/doc/refman/8.0/en/mysqlbinlog.html) command. For full information about the binary log, see [Section 5.4.4, “The Binary Log”](https://dev.mysql.com/doc/refman/8.0/en/binary-log.html). For MySQL configuration options related to the binary log, see [Section 17.1.6.4, “Binary Logging Options and Variables”](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html).\n\tFor the _**MySQL Enterprise Backup**_ product, the file name of the binary log and the current position within the file are important details. To record this information for the source when taking a backup in a replication context, you can specify the `--slave-info` option.\n\tPrior to MySQL 5.0, a similar capability was available, known as the update log. In MySQL 5.0 and higher, the binary log replaces the update log.\n\n\n# 复述展开\n\n\n在这个基础上，我们可以总结一些关于二进制日志的关键点：\n\n1. **重要性**：二进制日志对于数据库的复制和恢复至关重要，它确保了数据的一致性和可恢复性。\n2. **功能**：它记录了所有更改数据库表数据的操作，这些操作可以被重放以同步副本服务器或恢复数据。\n3. **配置**：二进制日志可以通过MySQL的配置选项进行管理，包括启用或禁用日志记录。\n4. **工具**：`mysqlbinlog`工具用于查看和处理二进制日志文件，它是数据库管理员进行故障恢复和数据分析的重要工具。\n5. **备份与复制**：在进行备份和设置复制时，记录二进制日志的当前位置是必要的，这有助于确保数据的一致性和准确的复制。\n6. **历史**：二进制日志取代了之前版本中的更新日志，提供了更加完善和高效的数据变更记录方式。\n7. **版本兼容性**：从MySQL 5.0版本开始，二进制日志成为了标准功能，如果你正在使用更旧的版本，那么升级到新版本后，你会使用二进制日志而不是更新日志。\n8. **性能考量**：虽然二进制日志对于复制和恢复非常有用，但它也可能对性能产生影响，因为记录每个数据更改需要额外的磁盘I/O。因此，对于非复制环境，如果不需要进行点对点的恢复，有时可以考虑关闭二进制日志以提高性能。\n9. **数据安全**：启用二进制日志有助于数据安全，因为即使在系统崩溃的情况下，也可以使用二进制日志恢复到崩溃前的状态。\n10. **监控和审计**：二进制日志可以用于监控数据库的更改，帮助数据库管理员追踪问题和不正常的数据库活动，也可以作为审计的一部分。\n11. **日志管理**：管理二进制日志包括定期清理旧的日志文件，以防止它们占用过多的磁盘空间。这通常通过设置过期策略或手动清理来完成。\n12. **复制策略**：在复制配置中，二进制日志可以用于基于语句的复制（SBR）、基于行的复制（RBR）或两者的混合模式（MIXED），具体取决于复制的需求和环境。\n13. **故障转移和灾难恢复**：在主从复制架构中，如果主服务器发生故障，可以使用二进制日志快速将从服务器提升为新的主服务器，最小化服务中断时间。\n14. **备份策略**：在使用如MySQL企业备份等工具时，二进制日志的信息（如文件名和位置）对于确保备份的完整性和一致性至关重要。\n\n# 理解体会\n\n\nbinary log 是MySQL非常重要的日志文件，用于数据的恢复很重要。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-29",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day98",
        "tags": [
          "行业概念",
          "MySQL"
        ],
        "summary": "",
        "title": "Day98【概念解析】Bin Log",
        "status": "Published",
        "urlname": "f5b9b26b-1453-4d4f-bdf9-d82cbe607d92",
        "updated": "2023-12-29 12:14:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "f5b9b26b-1453-4d4f-bdf9-d82cbe607d92"
        }
      ],
      "body": "",
      "realName": "Day98【概念解析】Bin Log",
      "relativePath": "/行业概念/Day98【概念解析】Bin Log.md"
    },
    {
      "id": "04ac4579-d4f8-49d4-b653-922a3886bc2f",
      "doc_id": "04ac4579-d4f8-49d4-b653-922a3886bc2f",
      "updated": 1703942280000,
      "body_original": "\n# 整理定义\n\n\n## 维基百科的定义：\n\n\n> **NoSQL** (originally referring to \"non-[SQL](https://en.wikipedia.org/wiki/SQL)\" or \"non-relational\")[[1]](https://en.wikipedia.org/wiki/NoSQL#cite_note-1) is an approach to [database](https://en.wikipedia.org/wiki/Database) design that focuses on providing a mechanism for [storage](https://en.wikipedia.org/wiki/Computer_data_storage) and [retrieval](https://en.wikipedia.org/wiki/Data_retrieval) of data that is modeled in means other than the tabular relations used in [relational databases](https://en.wikipedia.org/wiki/Relational_database). Instead of the typical tabular structure of a relational database, NoSQL databases house data within one data structure. Since this non-relational database design does not require a schema, it offers rapid scalability to manage large and typically unstructured data sets.[[2]](https://en.wikipedia.org/wiki/NoSQL#cite_note-2) NoSQL systems are also sometimes called _\"Not only SQL\"_ to emphasize that they may support [SQL](https://en.wikipedia.org/wiki/SQL)-like query languages or sit alongside SQL databases in [polyglot-persistent](https://en.wikipedia.org/wiki/Polyglot_persistence) architectures.[[3]](https://en.wikipedia.org/wiki/NoSQL#cite_note-3)[[4]](https://en.wikipedia.org/wiki/NoSQL#cite_note-4)\n\n\n\t—— 《[NoSQL - Wikipedia](https://en.wikipedia.org/wiki/NoSQL)》\n\n\n## 百度百科的定义\n\n\n> NoSQL，泛指非关系型的数据库。随着互联网[web2.0](https://baike.baidu.com/item/web2.0/97695?fromModule=lemma_inlink)网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的[SNS](https://baike.baidu.com/item/SNS/10242?fromModule=lemma_inlink)类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。\n\n\n\t——《[NoSQL_百度百科 (baidu.com)](https://baike.baidu.com/item/NoSQL/8828247)》\n\n\n# 复述展开\n\n\nNoSQL 一般用来指代非关系型数据库（RDBMS）。\n\n\nNoSQL = No + SQL\n\n\n一般有两种说法：\n\n- 一种是 `Non SQL` 或者 `non-relational SQL`\n- 另一种 `Not only SQL`  不仅仅是SQL，现在一般更推崇这种说法\n\nNoSQL现在飞速增长，常常用于大数据和实时网站应用。\n\n\n##  分类\n\n- 键值对数据库（Key-value database）\n- 列存储数据库（Column database）\n- 文档数据库（Document database）\n- 图数据库（Graph database）\n\n## 特点\n\n- 易扩展\n- 大数据量、高性能\n- 灵活的数据模型\n- 高可用\n\n# 理解体会\n\n\nNoSQL的水还是比较深的，需要学习的还是挺多的。比较常见的有Mongo DB 还有 Redis，这两个还是比较热门的。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-30",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day100",
        "tags": [
          "行业概念",
          "NoSQL"
        ],
        "summary": "",
        "title": "Day100【概念解析】NoSQL",
        "status": "Published",
        "urlname": "04ac4579-d4f8-49d4-b653-922a3886bc2f",
        "updated": "2023-12-30 13:18:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "04ac4579-d4f8-49d4-b653-922a3886bc2f"
        }
      ],
      "body": "",
      "realName": "Day100【概念解析】NoSQL",
      "relativePath": "/行业概念/Day100【概念解析】NoSQL.md"
    },
    {
      "id": "05966e8d-2d37-4359-af41-01af22f90cd6",
      "doc_id": "05966e8d-2d37-4359-af41-01af22f90cd6",
      "updated": 1703942280000,
      "body_original": "\n# 整理定义\n\n\nMongoDB 是一个开源、跨平台、面向文档的数据库程序。 MongoDB 被归类为 NoSQL 数据库产品，利用具有可选模式的类似 JSON 的文档。 MongoDB 由 MongoDB Inc. 开发，当前版本已根据服务器端公共许可证 (SSPL) 获得许可。 MongoDB 是 MACH 联盟的成员。\n\n\n> **MongoDB** is a [source-available](https://en.wikipedia.org/wiki/Source-available), [cross-platform](https://en.wikipedia.org/wiki/Cross-platform), [document-oriented database](https://en.wikipedia.org/wiki/Document-oriented_database) program. Classified as a [NoSQL](https://en.wikipedia.org/wiki/NoSQL) database product, MongoDB utilizes [JSON](https://en.wikipedia.org/wiki/JSON)-like documents with optional [schemas](https://en.wikipedia.org/wiki/Database_schema). MongoDB is developed by [MongoDB Inc.](https://en.wikipedia.org/wiki/MongoDB_Inc.) and current versions are licensed under the [Server Side Public License](https://en.wikipedia.org/wiki/Server_Side_Public_License) (SSPL). MongoDB is a member of the [MACH Alliance](https://en.wikipedia.org/wiki/MACH_Alliance).\n\n\n\t——《[MongoDB - Wikipedia](https://en.wikipedia.org/wiki/MongoDB)》\n\n\n> MongoDB是一个基于分布式文件存储 [1]的数据库。由[C++](https://baike.baidu.com/item/C++/99272?fromModule=lemma_inlink)语言编写。旨在为WEB应用提供可扩展的高性能数据[存储解决方案](https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/10864850?fromModule=lemma_inlink)。\n\n\n\tMongoDB是一个介于[关系数据库](https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/1237340?fromModule=lemma_inlink)和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。它支持的[数据结构](https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450?fromModule=lemma_inlink)非常松散，是类似[json](https://baike.baidu.com/item/json/0?fromModule=lemma_inlink)的[bson](https://baike.baidu.com/item/bson/0?fromModule=lemma_inlink)格式，因此可以存储比较复杂的[数据类型](https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/10997964?fromModule=lemma_inlink)。Mongo最大的特点是它支持的[查询语言](https://baike.baidu.com/item/%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/2661811?fromModule=lemma_inlink)非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。\n\n\n\t——《[mongodb_百度百科 (baidu.com)](https://baike.baidu.com/item/mongodb?fromModule=lemma_search-box)》\n\n\n# 复述展开\n\n\nMongoDB 是文档型数据库，是一种NoSQL。\n\n\n# 理解体会\n\n\nMonggoDB是一种非关系型数据库，支持分布式存储，可以存储较复杂的数据结构。\n\n\n[MongoDB：应用程序数据平台 | MongoDB](https://www.mongodb.com/zh-cn)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-29",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day99",
        "tags": [
          "行业概念",
          "NoSQL"
        ],
        "summary": "",
        "title": "Day99【概念解析】MongoDB",
        "status": "Published",
        "urlname": "05966e8d-2d37-4359-af41-01af22f90cd6",
        "updated": "2023-12-30 13:18:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "05966e8d-2d37-4359-af41-01af22f90cd6"
        }
      ],
      "body": "",
      "realName": "Day99【概念解析】MongoDB",
      "relativePath": "/行业概念/Day99【概念解析】MongoDB.md"
    },
    {
      "id": "52011588-d4d4-43c6-8cec-94fac3aa32b7",
      "doc_id": "52011588-d4d4-43c6-8cec-94fac3aa32b7",
      "updated": 1704073140000,
      "body_original": "\n**1、这100天写的是哪个行业？梳理了多少概念？完成了多少字？**\n\n\n这100天写的是互联网行业。梳理了100个概念。完成的字数，按照每篇2000字计算，大概在20W字左右。\n\n\n**2、对行业的认识与理解方面，有什么收获与体会？**\n\n\n纵观这100个概念，前期主要是一些聚合的概念，像“软件工程”类，“排序算法类”，“数据库”类，然后在某个领域下进行进一步细分，像10大排序算法，23个设计模式，MySQL数据库的理论知识，乃至存储引擎InnoDB的一些技术细节。\n\n\n从宏观到微观，我先对软件工程这个学科进行了整体的介绍与了解，然后针对一些在软件开发中常见的一些技术知识点进行展开分析，无论是排序算法、设计模式、还是数据库理论，都是非常实用的一些软件开发的知识。在梳理概念的过程中，重温了一些经典概念，然后对之前的理解进一步加深，并且对一些有联系的知识点进行了进一步封装。并且，这些聚合过的知识点，能够成为专题来进行反复学习。\n\n\n**3、在这100天的学习和行动中，遇到有什么挑战？有什么感悟？**\n\n\n挑战的话就是，一度陷入到知识海洋之中，在InnoDB中写了40多个概念，发现内容真的很深，要掌握的知识很多。对于这个挑战，对概念进行划分，主要梳理常见的、更有价值的一些概念。这里的感悟还是挺深刻的，当时是直接对着MySQL官网来进行概念梳理，要对比不同的主要版本的一些区别，最新的8.0与之前的5.7版本，对于英语原文进行啃下来。虽然这之前用了Google翻译以及ChatGPT来协助翻译，也是花费了不少功夫的。这个过程中，体会到，英语原文还是更地道，其他人翻译过一层的还是难免会缺少原汁原味的。这更坚定了去读原著、原始语料来找寻概念的信心。\n\n\n**4、下一步有什么行动与计划？**\n\n\n虽然100个概念的任务已经完成，但是知识的储备是不会停下的，下一步的行动，就是针对现在的一些专题进行知识补齐。在这个基础上，进行二次加工处理，形成自己的知识库存储，我的博客就是一种很好的载体。继续深耕领域，加油！\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-31",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-100-recall",
        "tags": [
          "行业概念"
        ],
        "summary": "",
        "title": "概念打卡100天复盘",
        "status": "Published",
        "urlname": "52011588-d4d4-43c6-8cec-94fac3aa32b7",
        "updated": "2024-01-01 01:39:00"
      },
      "catalog": [
        {
          "title": "行业概念",
          "doc_id": "52011588-d4d4-43c6-8cec-94fac3aa32b7"
        }
      ],
      "body": "",
      "realName": "概念打卡100天复盘",
      "relativePath": "/行业概念/概念打卡100天复盘.md"
    },
    {
      "id": "8a587d45-a199-4228-b2e4-12c11e467366",
      "doc_id": "8a587d45-a199-4228-b2e4-12c11e467366",
      "updated": 1704072960000,
      "body_original": "\n# 十二月小结\n\n\n> 😄 今天是十二月的最后一天，也是2023年的最后一天了，是时候给自己总结和复盘一下了。\n\n\n整个12月，八个字总结：多点开花，稳步上升\n\n\n**数据如下：**\n\n1. **运动：**运动次数23次，跑步12次，共计100.8KM，瑜伽7次，骑行1次，共计18.1KM\n\n\t四个字总结：**多点开花**\n\n\t- 跑步上增加了次数，增加了距离，大多为长距离，其中龙华半马，刷新PB\n\t- 运动形式上也增多了，全面发展，包括乒乓球、骑车、椭圆机、划船机、登山等活动，多元化\n2. **学习：**坚持每天学习，参与概念打卡活动全勤，完成全部打卡任务\n3. 体重控制在130左右，再接再厉\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/92965388-fe4c-4edf-b8d5-15676d66a535/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240101%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240101T014121Z&X-Amz-Expires=3600&X-Amz-Signature=e376e01635d85b2b3fc9b298c33225d103d1520427c6b2587e0bd58d0605a486&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n[bookmark](https://kuangyichen.com/running)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-31",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202312",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2023年12月",
        "status": "Published",
        "urlname": "8a587d45-a199-4228-b2e4-12c11e467366",
        "updated": "2024-01-01 01:36:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "8a587d45-a199-4228-b2e4-12c11e467366"
        }
      ],
      "body": "",
      "realName": "[阶段小结]2023年12月",
      "relativePath": "/三省吾身/[阶段小结]2023年12月.md"
    },
    {
      "id": "df5630db-714c-4a01-b2e7-af87019c3cde",
      "doc_id": "df5630db-714c-4a01-b2e7-af87019c3cde",
      "updated": 1736344020000,
      "body_original": "\n# 引言\n\n\n> 😄 2024年注定是不平凡的一年，还好之前有每个月度小结，总结下就成了年度总结。\n\n\n# 核心目标\n\n\n2024年初，我没有给自己定年度OKR，做自己想做的事情，最自己认为正确的事情！\n\n\n运动，读书，养娃，自律！\n\n\n# 主要成就\n\n\n## 📓读书篇\n\n\n全年大部分读书都是在微信读书上完成的，数据也是源自微信读书的2024年总结。阅读73小时，读过4**0**本书，读完9本书，158天有在阅读，笔记279条。\n\n\n《福格行为模型》《认知驱动》《亲密关系》《认知觉醒》《高效人士的七个习惯》等等\n\n\n相比2023年，2024年的读书少了很多，需要再接再厉！\n\n\n## 🏃🏻运动篇\n\n\n**今年的运动数据相比去年应该有较大进步的，下面的去年的总结：**\n\n\n> 说到运动，我还是挺惊喜的，尽管2023年的前三个季度，因为偷懒或者其他借口没有好好锻炼，但是从第四季度开始，运动量突飞猛进。说说数据吧：\n\n\n\t**全年144天运动**\n\n\t- 跑步超过**350**KM（其中第四季度提供280+KM），完成3场半马以上级别的赛事，突破个人历史PB\n\t- 瑜伽从小白渐入佳境，可以完整熟练达成拜日式A、B式两种瑜伽，这里需要感谢大宝的支持和鼓励\n\t- 其他运动，诸如登山、骑车、划船机、椭圆机、乒乓、羽球、板球都略有涉猎，达成**百花齐放**成就\n\n\t**2024年的目标，就是再跑两个以上马拉松，****半马成绩破2****！坚持跑步，坚持锻炼，****全年突破1000KM！**\n\n\n> 💌 618购物节时，老婆给我买了高驰手表，开了跑步的新征程。 \n\n\n**今年的数据数据展示：**\n\n\n> **459.88**km  69次 跑步  \n> **240.67**km  20次 骑行  \n> 93.88km   41次 健走\n\n\n今年的数据更加聚焦一些：跑步上更进一步，次数和跑量都上去了；骑行也非常给力，突破200km大关；健走也接近100km。\n\n\n(⊙︿⊙)比较遗憾的是，今年没有中一个马拉松比赛，只能线下跑跑看，马拉松的目标需要留到2025年去实现了。 \n\n\n2025年的目标，争取跑上一个半马，**半马成绩破2****！坚持跑步，坚持锻炼，****全年突破1000KM！**\n\n\n## 🏙️生活篇\n\n\n**1+1=3 多了一个小盼盼**\n\n\n2024年4月16日，我家的小公主诞生了，我做爸爸了！生活中，多了一个女儿，很幸福啊，我也是有“小棉袄”的人了。从此，生命中多了一份牵挂，多了一份责任，也多了一份期许。\n\n\n第一次做爸爸，有些许紧张，也有些许期待。我会试着做一个称职的好爸爸，陪伴盼盼长大。\n\n\n**2025年的目标**：在2025年给盼盼开通一个抖音号，随时随地记录美好生活。然后每周给盼盼写一封信，记录生活的小瞬间，陪着女儿长大。\n\n\n## 👤个人提升\n\n\n**个人博客**\n\n\n`kuangyichen.com` 继续为自己的博客添砖加瓦！！！！\n\n\n**证券从业资格考试(通过)**\n\n\n因为工作行业原因，在2023年拿下了基金从业资格证，2024年要征战证券\n\n\n> 2023年，比较遗憾的是 “证券从业资格考试” 有一门差0.5分没有拿到证书\n\n\n证券的这门考试，是因为去年的基础知识差0.5分没过，导致今年需要补考，为此还特地买了一本最新的教材。\n\n\n最终的结果还是挺满意的，66分过了，对得起自己靠前一周的努力。\n\n\n**高级软件设计师证书(遗憾差两分)**\n\n\n> 在朋友的鼓励下，因缘巧合去考了中级软考证书，顺利拿下。（基础知识：51分，应用技术：67分，两门的满分都是75分）\n\n\n去年搞定了中级，今年第一次征战高级，成绩还是满意的。虽然没有拿到证，但是在如此短的时间内，三门过了两门，有一门差了两分，还是证明自己又实力的。\n\n\n# 结语\n\n\n23年末的结语如下：\n\n\n> 2023是如此神奇的一年，我的而立之年，谢谢家人的陪伴，谢谢朋友们的支持，也谢谢自己的坚持，感恩世界，爱与和平！期待盼盼的到来，并希望你不虚此行！\n\n\n24年的结语：\n\n\n2024年，对于我，是美好的一年，也是重要的一年，盼盼的到来会让这个家更加发光发热，我希望自己能够扮演好自己的角色，做一个好丈夫，做一个好爸爸，也做一个好儿子，在社会中，发挥自己的青年才俊的力量去做出自己的贡献。\n\n\n2025年，奋斗吧，少年！永远年轻，永远热泪盈眶！\n\n\n[bookmark](https://kuangyichen.com/)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2025-01-08",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-2024",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "2024年度总结",
        "status": "Published",
        "urlname": "df5630db-714c-4a01-b2e7-af87019c3cde",
        "updated": "2025-01-08 13:47:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "df5630db-714c-4a01-b2e7-af87019c3cde"
        }
      ],
      "body": "",
      "realName": "2024年度总结",
      "relativePath": "/三省吾身/2024年度总结.md"
    },
    {
      "id": "a3b5727f-b0ee-4ee7-926e-0c1af377edbf",
      "doc_id": "a3b5727f-b0ee-4ee7-926e-0c1af377edbf",
      "updated": 1705567260000,
      "body_original": "\n[bookmark](https://segmentfault.com/a/1190000040896781)\n\n\n如果你电脑上的git能在大部分地方进行同步，但是在某处地方的网络下无法同步，并且运行`git pull`或`git push`长久没有反映，最后出现`ssh: connect to host github.com port 22: Connection timed out`，很可能是你的网络供应商（比如广电网）在出口防火墙上屏蔽了22端口，这意味着你将无法访问其他主机的22端口。\n\n\n对此，github提供了一种解决方案，允许你使用443端口进行ssh连接，因为443端口是访问https网站所必须的，大部分防火墙都会允许通过，但如果使用代理服务器可能产生干扰。如果连443端口都被屏蔽，那你应该无法浏览这篇文章。\n\n\n运行这段命令，看看是否有成功提示，如果成功，则可以使用这个解决方案。\n\n\n```text\nssh -T -p 443 git@ssh.github.com\n```\n\n\n简单地配置一下，让你每次ssh连接github都通过443端口。如果你使用Linux，在`~/.ssh/config`内，添加这些内容，指明ssh连接`git@github.com`或`git@ssh.github.com`走443端口。\n\n\n```sql\nHost github.com\nHostname ssh.github.com\nPort 443\nUser git\n```\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-01-17",
        "type": "Post",
        "category": "技术分享",
        "slug": "github-connect",
        "tags": [
          "工具"
        ],
        "summary": "",
        "title": "Github连接不上怎么办？",
        "status": "Published",
        "urlname": "a3b5727f-b0ee-4ee7-926e-0c1af377edbf",
        "updated": "2024-01-18 08:41:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "a3b5727f-b0ee-4ee7-926e-0c1af377edbf"
        }
      ],
      "body": "",
      "realName": "Github连接不上怎么办？",
      "relativePath": "/技术分享/Github连接不上怎么办？.md"
    },
    {
      "id": "f4887c92-5fa4-4282-a804-691387dce8d4",
      "doc_id": "f4887c92-5fa4-4282-a804-691387dce8d4",
      "updated": 1706098620000,
      "body_original": "\n> 😀 **本文是读完《做自己保险规划师：明明白白买保险》(小雨伞保险) 的笔记，归纳了配置保险的两个原则，四要素以及常见的三个误区。**\n\n\n# 配置保险的两个原则\n\n\n### 原则1：先大人后小孩\n\n\n> 💡 **核心理念**：家庭中的成年人，尤其是经济支柱的健康和安全对家庭的稳定至关重要。如果家长出现健康问题，整个家庭的经济和情感支持都可能受到影响，而孩子在这种情况下无法提供相应的支持。\n\n\n> ✅ **实践建议**：在为家庭配置保险时，应优先考虑为成年人，特别是家庭经济支柱配置足够的保险，以确保在发生意外或疾病时，家庭不会因此陷入经济困境。孩子的保险可以暂时放在次要位置，先确保基础的保障。\n\n\n### 原则2：先保障后理财\n\n\n> 💡 **核心理念**：保险的本质是为了提供风险保障，而不是作为理财工具。保险应该首先满足家庭在面临各种风险时的保障需求。\n\n\n> ✅ **实践建议**：在有限的预算下，应该首先配置**保障类保险**，如健康保险、意外伤害保险和寿险等，确保在发生不测时能够得到必要的经济补偿和支持。待保障需求得到满足后，再考虑投资理财型保险产品，如年金保险或投资连结保险等，以实现资产的增值和财富积累。\n\n\n# 配置保险的四要素：\n\n1. **需求**：根据个人或家庭在不同人生阶段的保障需求，合理规划保险配置，先做足核心保障，再逐步完善。\n2. **产品**：选择适合自己需求的保险产品，包括医疗险、重疾险、寿险等，并注意产品的保障、储蓄或投资功能的侧重点。\n3. **收入**：根据个人或家庭的收入情况，合理安排保费支出，一般建议保费支出占年收入的5%～15%，并利用不同的保障期限、缴费期间等策略来平衡预算。\n4. **条款**：仔细阅读并理解保险条款，特别是**保险责任**和**免责条款**，确保保险产品符合自己的需求和预期。\n\n在配置保险时，应遵循先保障后理财、先大人后小孩的原则，确保保险配置与个人或家庭的实际需求、财务状况和风险承受能力相匹配。通过动态配置，随着时间的推移和情况的变化，适时调整保险策略，以达到最佳的保障效果。\n\n\n# 新手配置保险常见的三个误区\n\n\n### 误区1：选择大而全的保险产品\n\n\n> ❌ **问题**：这类保险产品听起来很吸引人，因为它们提供了全面的保障。然而，它们往往价格不菲，而且在同等价格下可能无法提供最优的保障或最高的保额。\n\n\n> ✅ **建议**：对于经济条件有限的年轻人，更合理的做法是根据自己的实际需求和预算选择专门的保险产品，而不是一揽子的综合保障计划。\n\n\n### 误区2：返还型保险的误解\n\n\n> ❌ **问题**：返还型保险听起来像是一个很好的交易——如果你没有提出索赔，你的保费会被返还。但实际上，这类保险的杠杆率低，保费高，保额低，实际上并不划算。\n\n\n> ✅ **建议**：考虑购买消费型保险，这类保险通常保费更低，保额更高。同时，可以将节省下来的资金投资于其他渠道，比如储蓄或投资产品，这可能会带来更高的长期回报。\n\n\n### 误区3：跟风购买“网红”保险产品\n\n\n> ❌ **问题**：市场上经常会出现所谓的“爆款”保险产品，受到众多推广和热议。但这些产品可能并不适合每个人的个人需求。\n\n\n> ✅ **建议**：购买保险时，不应该仅仅因为一款产品在网上很受欢迎就盲目跟风。应该根据自己的具体情况、家庭风险和经济承受能力来定制保障方案。保险应该是个性化的，根据个人的健康状况、职业风险、家庭责任等因素来选择最合适的保险产品。\n\n\n总的来说，选择保险产品时应该避免一刀切的思维，而是要进行细致的个人需求分析，选择最适合自己的保险计划。同时，也要有意识地提高自己对保险产品的理解和认知，以便做出更明智的决策。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-01-24",
        "type": "Post",
        "category": "保险",
        "slug": "configure-insurance",
        "tags": [
          "保险配置"
        ],
        "summary": "本文是读完《做自己保险规划师：明明白白买保险》(小雨伞保险) 的笔记，归纳了配置保险的两个原则，四要素以及常见的三个误区。",
        "title": "新手应该如何配置保险",
        "status": "Published",
        "urlname": "f4887c92-5fa4-4282-a804-691387dce8d4",
        "updated": "2024-01-24 12:17:00"
      },
      "catalog": [
        {
          "title": "保险",
          "doc_id": "f4887c92-5fa4-4282-a804-691387dce8d4"
        }
      ],
      "body": "",
      "realName": "新手应该如何配置保险",
      "relativePath": "/保险/新手应该如何配置保险.md"
    },
    {
      "id": "c45fad48-0246-4d63-b940-005347df3096",
      "doc_id": "c45fad48-0246-4d63-b940-005347df3096",
      "updated": 1706790600000,
      "body_original": "\n# 一月小结\n\n\n> 😄 2024年转眼就过去了一个月了，又到了总结的时候了！\n\n\n## 运动篇\n\n- 运动14天，7次瑜伽，4次骑行，5次跑步\n- 运动累计长度：72KM\n- 运动累计时长：765分钟\n\n![](https://image.kuangyichen.com/image/202402012024846.png)\n\n\n## 读书篇\n\n\n![](https://image.kuangyichen.com/image/202402012027763.png)\n\n\n## 生活篇\n\n\n写了五篇日记，研究了下保险，也种植了新的花。\n\n\n![](https://image.kuangyichen.com/image/579461706579652_.pic_hd.jpg)\n\n\n[bookmark](https://kuangyichen.com/running)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-02-01",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202401",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年1月",
        "status": "Published",
        "urlname": "c45fad48-0246-4d63-b940-005347df3096",
        "updated": "2024-02-01 12:30:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "c45fad48-0246-4d63-b940-005347df3096"
        }
      ],
      "body": "",
      "realName": "[阶段小结]2024年1月",
      "relativePath": "/三省吾身/[阶段小结]2024年1月.md"
    },
    {
      "id": "7bc081e2-0d78-4bdc-a110-28add6b58ee7",
      "doc_id": "7bc081e2-0d78-4bdc-a110-28add6b58ee7",
      "updated": 1708825380000,
      "body_original": "\n> 😀 最近发现大家都在讨论16种人格，什么 INTJ 啥，所以我也做了一番功课。\n\n\n## **1. MBTI 是什么？**\n\n\nMBTI（Myers-Briggs Type Indicator）是一种广泛使用的性格测试，用于测量和描述人们的心理偏好。这种测试基于瑞士心理学家卡尔·荣格的理论，由凯瑟琳·库克·布里格斯和她的女儿伊莎贝尔·布里格斯·迈尔斯在 20 世纪 40 年代进一步发展。\n\n\n## **2. 历史起源**\n\n\nMBTI 的起源可以追溯到卡尔·荣格的类型理论。荣格认为，人们的行为模式可以归类为几种不同的类型。布里格斯和迈尔斯对荣格的理论进行了扩展，创建了一个更详细的性格类型框架，这就是 MBTI。\n\n\n## **3. MBTI 的原理和性格类型**\n\n\nMBTI 测试基于四个维度来描述性格类型：外向 (E) 或内向 (I)，感知 (S) 或直觉 (N)，思考 (T) 或感觉 (F)，判断 (J) 或感知 (P)。这四个维度组合在一起，形成了 16 种不同的性格类型。\n\n- 外向 (E) 和内向 (I)：这个维度描述了你是更倾向于从外部世界获取能量（外向），还是从内心世界获取能量（内向）。\n- 感知 (S) 和直觉 (N)：这个维度描述了你是更倾向于依赖具体、实际的信息（感知），还是依赖直觉和可能性（直觉）。\n- 思考 (T) 和感觉 (F)：这个维度描述了你在做决定时是更倾向于依赖逻辑和理性（思考），还是依赖情感和价值观（感觉）。\n- 判断 (J) 和感知 (P)：这个维度描述了你是更倾向于有计划和组织（判断），还是更倾向于灵活和开放（感知）。\n\n这 16 种性格类型每一种都有其独特的特征和倾向，可以帮助我们更好地理解自己和他人。\n\n\n| MBTI 的四个向度 |                     |                     |\n| ---------- | ------------------- | ------------------- |\n| 能量态度       | 外向型  (Extraversion) | 内向型  (Introversion) |\n| 感知功能       | 实感型  (Sensing)      | 直觉型  (Intuition)    |\n| 判断功能       | 思考型  (Thinking)     | 情感型  (Feeling)      |\n| 生活态度       | 判断型  (Judging)      | 感知型  (Perceiving)   |\n\n\n![](https://image.kuangyichen.com/image/my_note/202402241059789.png)\n\n\n## **4. 总结**\n\n\nMBTI 性格测试是一个有用的工具，可以帮助我们更好地理解自己和他人的行为模式和倾向。然而，我们也需要记住，MBTI 只是一个框架，不能完全定义一个人。每个人都是独一无二的，我们的性格可能会受到许多其他因素的影响。\n\n\n## **参考**\n\n\n[Myers–Briggs Type Indicator - Wikipedia](https://en.wikipedia.org/wiki/Myers%E2%80%93Briggs_Type_Indicator)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-02-25",
        "type": "Post",
        "category": "技术分享",
        "slug": "mbti-test",
        "tags": [
          "性格测试"
        ],
        "summary": "最近发现大家都在讨论16种人格，什么 INTJ 啥，所以我也做了一番功课。",
        "title": "深入理解 MBTI 性格测试",
        "status": "Published",
        "urlname": "7bc081e2-0d78-4bdc-a110-28add6b58ee7",
        "updated": "2024-02-25 01:43:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "7bc081e2-0d78-4bdc-a110-28add6b58ee7"
        }
      ],
      "body": "",
      "realName": "深入理解 MBTI 性格测试",
      "relativePath": "/技术分享/深入理解 MBTI 性格测试.md"
    },
    {
      "id": "65c23b2f-0001-4a45-bb33-5074d99a1128",
      "doc_id": "65c23b2f-0001-4a45-bb33-5074d99a1128",
      "updated": 1709295720000,
      "body_original": "\n# 二月小结\n\n\n> 😄 二月过的很快，一半时间在过年，悄然就从身边溜走了。\n\n\n整个2月，一句话总结：每逢佳节胖三斤，何况春节！\n\n\n## 运动篇\n\n\n![](https://image.kuangyichen.com/image/my_note/202403011946889.png)\n\n\n运动共计10天，4次瑜伽。流感的侵袭导致两周没有运动！！！！三月我要补回来。\n\n\n## 阅读篇\n\n\n**读完：《认知觉醒》**\n\n\n> 💡 阅读的深度比速度重要，阅读的质量比数量重要。读得多、读得快并不一定是好事，这很可能是自我陶醉的假象。如果读书只是完成了文字扫视，但并不真正理解，那又有什么效率可言呢？如果阅读只是知道了那些道理，而自己并没有发生任何实质改变，那又有什么意义呢？所以读书慢不要紧，即使你一个月只能读完一本书，但能读通、读透，产生巨大的改变，那也比3天读1本书不知要强多少倍\n\n\n**在读：《福格行为模型》**\n\n\n> 💡 我希望你能多使用福格行为模型来观察世界。这样做有两个原因：其一，这样做很有趣；其二，它能帮助你根据动机、能力和提示3个要素去剖析行为，从而识别自身或他人的行为驱动因素。本章末尾的微练习，可以帮助你掌握福格行为模型的用法。 \n\n\n## 生活篇\n\n\n### 甲流来袭 + 我给医院拜个早年\n\n\n第一次在深圳过年，爸妈也一起过来了，体会了一次不一样的年。本以为可以好好过一个年，没想到，除夕夜就体验到了甲流的侵袭，随着家人一个接一个中招，初一就去了医院，后面几天连去了好几趟医院。果然是不一样的年啊。\n\n\n### 家人的陪伴才是长久的\n\n\n过年的那些天，一家四口最快乐的就是晚上在家打麻将，年轻两公婆VS年长两公婆，亦或是 经验丰富的麻将侠侣 VS 崭露头角的雀氏天才 + 门外汉。不知是老两口放水还是幸运之神眷顾，小两口在多次战斗中的竟然还能赢多输少。\n\n\n### 二老深圳过生日\n\n\n今年老爸59岁了，按照传统惯例，是需要过寿礼的，老妈尽管还未到时候，也是跟老爸一同过的。这次，在深圳给二老过60大寿，主打一个温馨和简单。在御蝶坊定了一个8英寸的水果蛋糕，然后，亲手下厨了几个拿手小菜，晚上自然还是打麻将。后来，给老爸老妈各发了2000元红包作为寿礼。\n\n\n![](https://image.kuangyichen.com/image/my_note/202403012007374.jpg)\n\n\n## 总结\n\n\n二月，很温馨，很有趣，很幸福。期待三月会更好！\n\n\n[bookmark](https://kuangyichen.com/running)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-03-01",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202402",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年2月",
        "status": "Published",
        "urlname": "65c23b2f-0001-4a45-bb33-5074d99a1128",
        "updated": "2024-03-01 12:22:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "65c23b2f-0001-4a45-bb33-5074d99a1128"
        }
      ],
      "body": "",
      "realName": "[阶段小结]2024年2月",
      "relativePath": "/三省吾身/[阶段小结]2024年2月.md"
    },
    {
      "id": "b1a6ea69-704f-4ee7-8f94-e185c464d084",
      "doc_id": "b1a6ea69-704f-4ee7-8f94-e185c464d084",
      "updated": 1711162200000,
      "body_original": "\n> 😀 最近在读《福格行为模型》，读到第六章 高频率小成功，让小改变自然生长，发现有些好的知识点跟大家分享下。\n\n\n养成良好习惯并改变人生并非一个神秘过程，而是一个系统性的技巧学习过程。就像学习任何技能一样，改变也需要通过不断的练习来掌握。作者将改变的技巧分为五类，并设计了相应的微习惯策略来教授这些技巧。\n\n\n> 💡 有哪些技巧呢：  \n> 1. 行为加工  \n>   \n> 2. 自我洞察  \n>   \n> 3. 循序渐进  \n>   \n> 4. 情境设计  \n>   \n> 5. 心态调整\n\n\n下面是我总结的这五个技巧的一些关键内容：\n\n\n| **技巧类别** | **概念说明**                  | **关键点**                  | **实践指南**                                  |\n| -------- | ------------------------- | ------------------------ | ----------------------------------------- |\n| 行为加工     | 逐步建立和调整习惯，以适应个人能力和生活节奏    | 知道自己一次能养成多少新习惯，以及何时能增加更多 | - 专注于感兴趣的事物\n- 拥抱多样性\n- 保持灵活性               |\n| 自我洞察     | 深入了解自己的需求和愿望，以此为基础选择和培养习惯 | 知道哪些新习惯对你有意义             | - 新习惯助力成为理想中的自己\n- 新习惯帮助实现重要愿望\n- 新习惯虽小但影响大 |\n| 循序渐进     | 逐步提升习惯的难度和复杂性，以促进个人成长     | 知道何时该推自己一把，超越微习惯，提升习惯难度  | - 不要过度施压\n- 让动机指导行动\n- 为额外努力庆祝\n- 利用情感标志找到边界 |\n| 情境设计     | 创建有利于习惯养成的外部环境和条件         | 重新设计情境使习惯更易于执行           | - 边执行边调整情境\n- 大胆质疑传统\n- 购买所需装备              |\n| 心态调整     | 改变自我认知和心理状态，以更好地适应新习惯     | 拥抱新身份                    | - 接受自己正在改变\n- 放弃旧身份\n- 拥抱新身份                |\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-03-13",
        "type": "Post",
        "category": "读书笔记",
        "slug": "fogg-202403131201",
        "tags": [
          "福格行为模型",
          "思考"
        ],
        "summary": "",
        "title": "掌握技巧，变身“行为忍者”",
        "status": "Published",
        "urlname": "b1a6ea69-704f-4ee7-8f94-e185c464d084",
        "updated": "2024-03-23 02:50:00"
      },
      "catalog": [
        {
          "title": "读书笔记",
          "doc_id": "b1a6ea69-704f-4ee7-8f94-e185c464d084"
        }
      ],
      "body": "",
      "realName": "掌握技巧，变身“行为忍者”",
      "relativePath": "/读书笔记/掌握技巧，变身“行为忍者”.md"
    },
    {
      "id": "7289f576-ef76-40f5-ba09-861a67fd1d1c",
      "doc_id": "7289f576-ef76-40f5-ba09-861a67fd1d1c",
      "updated": 1710860460000,
      "body_original": "\n> 😀 为什么选择这个标题呢？今天在刷内部论坛时，发现了这样一句话：想多了全是问题 ，做多了全是答案。\n\n\n顿时惊呆了，这说的真对啊。在面对问题和困难时，过多的思考和犹豫可能会让人陷入无休止的纠结和困惑中，反而会让人失去行动的勇气。但是，只有通过积极的行动，才能获得真正的经验和知识，从而找到问题的答案并解决问题。\n\n\n在现代生活中，人们总是**想**得太多，而**做**的太少了。而且在科技生活越发丰富时，各式各样的电子诱惑，乱花渐欲迷人眼。有刷不完的短视频，有刷不完的朋友圈。有事没事，拿出手机，刷刷刷，吃饭、睡觉、走路。在这样的生活下，别说做了，就是想也想的不多了。\n\n\n> ✅ **孔子**曰：<u>学而不思则罔，思而不学则殆</u>。  \n> **王阳明**说：<u>夫学、问、思、辨，皆所以为学，未有学而不行者也</u>。  \n> **教员**说过：<u>实践是检验真理的唯一标准</u>。\n\n\n思考的确很重要，三思而行，三思而行。但是，得先行动起来啊，行动+思考，理论联系实际。只有先行动起来，才能发现有哪些问题，边行动边思考，只有这样，才能不断前进。\n\n\n思考了这么多，当然也得行动起来，明天开始，刻意减少把玩手机的时间，至少吃饭的时候不主动玩手机吧。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-03-19",
        "type": "Post",
        "category": "心情随笔",
        "slug": "think-and-acition",
        "tags": [
          "思考"
        ],
        "summary": "",
        "title": "想多了全是问题，做多了全是答案",
        "status": "Published",
        "urlname": "7289f576-ef76-40f5-ba09-861a67fd1d1c",
        "updated": "2024-03-19 15:01:00"
      },
      "catalog": [
        {
          "title": "心情随笔",
          "doc_id": "7289f576-ef76-40f5-ba09-861a67fd1d1c"
        }
      ],
      "body": "",
      "realName": "想多了全是问题，做多了全是答案",
      "relativePath": "/心情随笔/想多了全是问题，做多了全是答案.md"
    },
    {
      "id": "b0380602-ca68-4f3f-a958-fef575fe90c2",
      "doc_id": "b0380602-ca68-4f3f-a958-fef575fe90c2",
      "updated": 1711162320000,
      "body_original": "\n# 前言\n\n\n![](https://image.kuangyichen.com/image/my_note202403031212963.png)\n\n\n最近读了一本书《**福格**行为模型》，这书咋一眼看像是《**逼格**行为模型》，实际上是斯坦福大学的福格教授提出的行为模型。福格博士被誉为“行为设计学”的鼻祖和“硅谷亿万富翁制造机”。本文就来浅浅解析下什么是福格行为模型以及福格行为模型给我带来的帮助吧。\n\n\n# 本书相关\n\n\n最近读了一本书《福格行为模型》，是 Dr. BJ.Fogg《Tiny Habits》的中文版\n\n\n\n![](https://cdn.weread.qq.com/weread/cover/39/YueWen_41147996/t7_YueWen_41147996.jpg)\n\n\n\n\n| 书名    | 福格行为模型                                                               |\n| ----- | -------------------------------------------------------------------- |\n| 作者    | B.J.福格                                                               |\n| 出版时间  | 2021-10-11                                                           |\n| 出版社   | 天津科学技术出版社                                                            |\n| PC 地址 | [微信读书](https://weread.qq.com/web/bookDetail/614325a07273de5c614b852) |\n\n\n\n\n> 😀 **书本简介**  \n> 在这本书中，福格博士亲自拆解了他提出的福格行为模型，揭示了驱动人类所有行为的 3 个关键要素，解析了每一个要素在驱动人类行为中的重要作用，提供了激发每一个要素以更好地推动行为改变的有效方法。此外，福格博士还给出了让福格行为模型更好地发挥作用的两个方法，通过设计情绪来设计行为，通过打造高频率小成功让小改变自然生长。本书不仅能够帮助人们毫不费力地养成好习惯，也能够指导人们成功对抗坏习惯；不仅能够帮助个人实现改变，也能够帮助群体直面挑战。只要掌握福格行为模型的精髓并加以灵活运用，每个人都能够轻松改变自己的工作与生活，成为自己想要成为的那个人。本书给出了福格行为设计工具箱，包含 15 种人生情景与挑战、300 个微习惯配方、100 种庆祝方式，手把手地教你减重、减压、改善睡眠质量、摆脱坏习惯、提升效率……\n\n\n# 福格行为模型\n\n\n## **福格行为模型公式**\n\n\n![](https://image.kuangyichen.com/image/my_note/202403011241580.png)\n\n\n当**动机 (motivation)**、**能力 (ability)** 和**提示 (prompt)** 同时出现的时候，**行为（behavior）**就会发生。\n\n- **动机**是_做出行为的欲望_\n- **能力**是_去做某个行为的执行能力_\n- **提示**是_提醒你做出行为的信号_\n\n下面举个例子来描述下行为模型公式：\n\n\n![](https://image.kuangyichen.com/image/my_note/202403011252951.png)\n\n\n上图中，横轴为能力轴，纵轴为动机轴，图中那个大圆点，它代表 A 同学整理办公桌的习惯。**圆点的位置代表收到提示采取行动时，A 的动机和能力所处的位置**。\n\n\n从图中可以看出，A 的动机处于中间位置，而能力则更偏向“容易做到”。中间的曲线就是行动线，可以看出：\n\n- 如果行为提示位于行动线上方，那么行为就会发生。\n- 能成为习惯的行为一定会落在行动线上方。\n\n## **分析福格行为模型的 4 个原则**\n\n\n### **1. 动机越强，行为就越有可能做到**\n\n\n例如，**为母则刚**，当母亲为救孩子，她甚至可以与熊对抗，尽管她的能力难以做到，但在这一瞬间，她有着极强的动机去保护孩子，所以行为还是发生了。\n\n\n![](https://image.kuangyichen.com/image/my_note/202403231013426.webp)\n\n\n这里给到的启示是：你需要有足够强大的动机才会去做困难的事情。\n\n\n### **2. 行为越容易，就越有可能成为习惯**\n\n\n这里比较容易理解，当动机不强时，行为越容易，就越有可能成为习惯，就譬如读完整本书和只看封面，当然是后者更容易做到了。\n\n\n![](https://image.kuangyichen.com/image/my_note/202403231014055.webp)\n\n\n### **3. 动机和能力要像队友一样密切配合**\n\n\n既有动机又有能力，才能让行为落到行动线上方，而这两大要素可以像队友那样密切配合。如果其中一方较弱，那另一方就需要很强才能促进行动，让行为落到行动线上方。\n\n\n**熟能生巧**，对于大多数的行为来说，如果不断重复，就会更容易做到。\n\n\n**福格行为模型 - 重复行为 (图)**\n\n\n![](https://image.kuangyichen.com/image/my_note/202403011300493.png)\n\n\n### **4. 没有提示，任何行为都不会发生**\n\n\n如果没有得到提示，那么无论你的动机和能力有多么强烈都没用。要么得到行动的提示，要么得到不行动的提示。总之，没有提示，就没有行为。\n\n\n**福格行为模型 - 提示（图）**\n\n\n![](https://image.kuangyichen.com/image/my_note/202403011303538.png)\n\n\n## **理解行为，就能影响行为**\n\n\n在知道上述的三个元素和四个原则之后，其实我们已经可以理解行为和影响行为了。\n\n\n福格教授表示：要想高效地改变自身行为或其他任何人的行为，关键就在于学会使用福格行为模型。只要对行为的运作模式有了清晰的认识，你就能解读自己和他人的行为了，这是一项很强大的技能。你可以开始**培养好习惯、戒掉坏习惯**，进而理解他人不甚如意的行为。\n\n\n## **解决行为问题的3个步骤**\n\n\n你可以遵循如下步骤，按顺序逐个尝试。如果第一步没效果，那就到下一步，依此类推。\n\n\n1. 检查有没有行为提示。\n2. 检查有没有行为能力。\n3. 检查有没有行为动机。\n\n\n大多数人都以为要想实施某种行为，就必须先解决动机问题，但实际上它是最后一步要解决的问题。\n\n\n# 实战检验\n\n\n## **练习 1：探索终止习惯的方法**\n\n\n福格行为模型适用于所有类型的行为改变。在此练习中，你将探索终止习惯的简便方法。\n\n\n1. 写下 3 个你想要停止的习惯。尽量写得具体一些。比如，要写“终止午餐时买汽水”，而不是“终止喝汽水”。\n2. 对每一个习惯，想出 3 种可以消除（或避免）提示的方法。如果什么都想不出来也没关系，继续下一步即可。\n3. 对每一个习惯，思考可以增加难度（能力）的方法。\n4. 对每一个习惯，思考可以削弱动机的方法。\n5. 对每一个习惯，从步骤 2 到步骤 4 里选出你的最佳解决方案。\n\n\n## **eachen 的第一次练习**\n\n\n从我自身入手，我搜集了下我需要改掉的习惯，然后整理出了下表：\n\n- 习惯一：终止睡觉前长时间玩手机\n- 习惯二：终止每周至少一次吃 KFC\n- 习惯三：终止每天晚睡\n\n|     | 习惯说明          | 消除提示的方法                                                               | 增加难度（能力）的方法                                          | 削弱动机的方法                                                      |\n| --- | ------------- | --------------------------------------------------------------------- | ---------------------------------------------------- | ------------------------------------------------------------ |\n| 习惯一 | 终止睡觉前长时间玩手机   | 无                                                                     | 睡前将手机放在离自己比较远的桌子上，开启飞行模式                             | 无                                                            |\n| 习惯二 | 终止每周至少一次吃 KFC | 1. 不要提及 KFC 或者麦当劳、可乐相关的词汇2. 减少周一 M 记或者周四 K 记活动的推送3. 卸载对应的 KFC、MDC APP | 1. 不走有 KFC 以及麦当劳的店的那条路2. 友好拒绝同事的邀请，并表示近段时间不吃3. 尽量吃食堂 | 1. 吃 KFC 或者麦当劳影响健身，可乐是不健康的饮料                                 |\n| 习惯三 | 终止每天晚睡（熬夜）    | 无                                                                     | 1. 每天尽量早点回家2. 每天晚上一回家就准备好洗漱、涂脸护肤等睡前事项3. 睡前不玩手机       | 1. 告诉自己晚睡或者熬夜对自己的身体有影响，对家人也有影响，我需要对家人负责2. 晚睡影响第二天早起，对工作状态有影响 |\n\n\n这里分析完之后，发现确实比较容易实践起来，在实践了一段实践之后，最终的效果还是挺显著的，睡前几乎不玩手机了，每周也几乎不怎么吃KFC，还能提前进入梦乡。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-03-23",
        "type": "Post",
        "category": "读书笔记",
        "slug": "about-fogg-s1",
        "tags": [
          "福格行为模型",
          "思考"
        ],
        "summary": "",
        "title": "浅析福格行为模型（一）",
        "status": "Published",
        "urlname": "b0380602-ca68-4f3f-a958-fef575fe90c2",
        "updated": "2024-03-23 02:52:00"
      },
      "catalog": [
        {
          "title": "读书笔记",
          "doc_id": "b0380602-ca68-4f3f-a958-fef575fe90c2"
        }
      ],
      "body": "",
      "realName": "浅析福格行为模型（一）",
      "relativePath": "/读书笔记/浅析福格行为模型（一）.md"
    },
    {
      "id": "435af85e-bf48-4668-a4ad-fbe7715d0efb",
      "doc_id": "435af85e-bf48-4668-a4ad-fbe7715d0efb",
      "updated": 1711418520000,
      "body_original": "\n> 😄 今天在编写一个造数逻辑时，触发了一个 Bug，在调试时查了小半个小时，终于发现了问题，总结来说就是 python for 循环的作用域与外部作用域中同名的变量覆盖，导致逻辑有误。\n\n\n在编写 Python 代码时，我们经常会使用 for 循环来遍历列表或序列中的元素。然而，如果不注意变量的作用域和命名，很容易引入难以察觉的 bug。这类 bug 通常发生在循环变量覆盖了外部作用域中的同名变量时。下面，我们将通过一个具体的场景来探讨这个问题，并提供解决方案。\n\n\n## 场景描述\n\n\n假设我们有一个函数，它根据不同的批次 ID (`batch_id`) 来执行不同的操作。在某个条件分支中，我们需要对一系列的批次 ID 进行操作，并在操作完成后，使用原始的 `batch_id` 来调用另一个函数。代码如下：\n\n\n```python\nif batch_id == SettleBatchId.BATCH_ID_HUOJI:\n    # ... 省略代码 ...\nelse:\n    if batch_id.is_public_fund():\n        for current_batch_id in [\n            # ... 省略代码 ...\n        ]:\n            # ... 省略代码 ...\n        # 使用原始的 batch_id\n        return self.__create_index_prepare_settle_data_by_item(\n            # ... 省略代码 ...\n        )\n\n```\n\n\n## 问题分析\n\n\n在上述代码中，`batch_id` 在 `for` 循环中被重新赋值，这导致了原始的 `batch_id` 值丢失。因此，当我们在 `for` 循环之后调用 `self.__create_index_prepare_settle_data_by_item(...)` 时，传递的 `batch_id` 实际上是循环中的最后一个值，而不是最初传递给函数的 `batch_id` 值。\n\n\n## 解决方案\n\n\n为了避免这种变量覆盖的问题，我们可以采取以下几种解决方案：\n\n\n**1. 使用不同的变量名：**\n\n\n最简单的解决方案是在 `for` 循环中使用一个不同的变量名，这样就不会影响到外部作用域的变量。\n\n\n```python\nif batch_id == SettleBatchId.BATCH_ID_HUOJI:\n\t# ... 省略代码 ...\nelse:\n\tif batch_id.is_public_fund():\n\t\tfor current_batch_id in [\n\t\t\t# ... 省略代码 ...\n\t\t]:\n\t\t\t# ... 省略代码 ...\n\t\t# 使用保存的原始值\n\t\treturn self.__create_index_prepare_settle_data_by_item(\n\t\t\t# ... 省略代码 ...\n\t\t)\n\n```\n\n\n**2. 保存原始值：**\n\n\n另一种方法是在 `for` 循环开始之前保存原始的 `batch_id` 值。\n\n\n```python\noriginal_batch_id = batch_id\nif batch_id == SettleBatchId.BATCH_ID_HUOJI:\n\t# ... 省略代码 ... else:\n\tif batch_id.is_public_fund():\n\t\tfor batch_id in [\n\t\t\t# ... 省略代码 ...\n\t\t]:\n\t\t\t# ... 省略代码 ...\n\t\t# 使用保存的原始值\n\t\treturn self.__create_index_prepare_settle_data_by_item(\n\t\t\t# ... 省略代码 ...\n\t\t)\n```\n\n\n**3. 重构代码逻辑：**\n\n\n如果可能，我们还可以考虑重构代码逻辑，以避免在 `for` 循环中使用可能会覆盖外部变量的同名变量。\n\n\n## 结论\n\n\n在 Python 中，变量的作用域和命名需要特别注意，尤其是在使用 `for` 循环时。通过采用上述解决方案，我们可以避免因变量覆盖而引入的 bug，确保代码的健壮性和可维护性。\n\n\n### 最佳实践\n\n\n为了防止未来的错误，我们可以遵循一些最佳实践：\n\n- **明确变量作用域**：了解 Python 中变量作用域的规则，确保在合适的作用域内定义和使用变量。\n- **合理命名变量**：避免使用可能引起混淆的通用变量名，尤其是在嵌套的代码块中。选择有意义且能够清晰表达变量用途的名称。\n- **限制变量的生命周期**：尽量减少变量的生命周期，这意味着在最小的作用域内定义变量，并在不再需要时立即释放。\n- **代码审查**：定期进行代码审查，可以帮助发现潜在的作用域和命名问题，以及其他可能的代码缺陷。\n\n### 结语\n\n\n在 Python 编程中，`for` 循环是一个强大且常用的结构，但如果不小心处理，它也可能成为 bug 的来源。通过理解变量作用域、采用清晰的命名约定，以及遵循编码最佳实践，我们可以最大限度地减少这类问题的发生，编写出更加可靠和易于维护的代码。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-03-25",
        "type": "Post",
        "category": "技术文档",
        "slug": "python-for-bug",
        "tags": [
          "Python"
        ],
        "summary": "",
        "title": "Python 中 for 循环引发的变量覆盖问题",
        "status": "Published",
        "urlname": "435af85e-bf48-4668-a4ad-fbe7715d0efb",
        "updated": "2024-03-26 02:02:00"
      },
      "catalog": [
        {
          "title": "技术文档",
          "doc_id": "435af85e-bf48-4668-a4ad-fbe7715d0efb"
        }
      ],
      "body": "",
      "realName": "Python 中 for 循环引发的变量覆盖问题",
      "relativePath": "/技术文档/Python 中 for 循环引发的变量覆盖问题.md"
    },
    {
      "id": "10880dab-ca1b-4c16-bf0b-05948b82810e",
      "doc_id": "10880dab-ca1b-4c16-bf0b-05948b82810e",
      "updated": 1711897500000,
      "body_original": "\n# 3月小结\n\n\n> 😄 3月31日，周末，可以好好总结下即将结束的3月吧。\n\n\n## 运动篇\n\n\n### 瑜伽之约\n\n\n运动 18 次，其中 13 次瑜伽，新运动尝试了动感单车和台球\n\n\n![](https://image.kuangyichen.com/image/my_note/202403312241272.png)\n\n\n## 阅读篇\n\n\n### 成功心理学专场\n\n\n读完《福格行为模型》输出两篇文章\n\n- [浅析福格行为模型（一） | 易浅小站 (kuangyichen.com)](https://kuangyichen.com/article/about-fogg-s1)\n- [掌握技巧，变身“行为忍者” | 易浅小站 (kuangyichen.com)](https://kuangyichen.com/article/fogg-202403131201)\n\n读完《The PARA Method》实践使用 PARA 管理个人知识库和日常办公，提效 神速\n\n\n正在读《认知驱动》（认知觉醒的姊妹篇）\n\n\n正在读《高效能认识的七个习惯》\n\n\n## 生活篇\n\n\n### 我终于晋级了——历时两年半\n\n\n![](https://image.kuangyichen.com/image/my_note/202403312248650.png)\n\n\n终于晋级高级工程师，从 2022 年开始的 OKR，历时两年半，终于在 2024 年 3 月完成。在这个外界环境广进计划不止，司内降本增效进入深水期的时代，真不容易啊！！！\n\n\n## 总结\n\n\n期待四月的到来，借用《福格行为模型》的一句话来总结：\n\n\n> 💡 习惯就是达到这个目的的一个通路。它让我们学会改变的技巧，推动着我们向梦想前进，让世界闪闪“发光”。\n\n\n[bookmark](https://kuangyichen.com/running)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-03-31",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202403",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年3月",
        "status": "Published",
        "urlname": "10880dab-ca1b-4c16-bf0b-05948b82810e",
        "updated": "2024-03-31 15:05:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "10880dab-ca1b-4c16-bf0b-05948b82810e"
        }
      ],
      "body": "",
      "realName": "[阶段小结]2024年3月",
      "relativePath": "/三省吾身/[阶段小结]2024年3月.md"
    },
    {
      "id": "1b98b535-feb7-4964-8530-302375ff96b0",
      "doc_id": "1b98b535-feb7-4964-8530-302375ff96b0",
      "updated": 1715341020000,
      "body_original": "\n# 4 月总结\n\n\n4月是忙碌的一个月，也是具有意义性的一个月。这个月，完成了人生中的一个小目标：我当爸爸了！ 媳妇怀胎十月，于三月初八成功诞下一女——盼盼。对于盼盼来说，这是一个新的开始，对于我和媳妇来说，也是一项新的挑战，为人父母，体验养小号的过程。\n\n\n## 生活篇\n\n\n## **媳妇**\n\n\n这次媳妇生产的时候，我有幸在产房中全程陪产，和媳妇一起经历生产的全过程，这次经历真的是人生之中非常难忘的经历，我感叹生命的神奇。我终于明白，为何说母亲是伟大，那一刻，我才真的体会到女人生产的伟大，承受极大的痛苦，用尽全力，产下宝贝。\n\n\n不禁翻起那天晚上写下的日记：\n\n\n> 今天是个特殊的日子，我的女儿——盼盼的生日。   \n> 2024年4月16日凌晨，柯廷感觉到宫缩越来越痛，甚至达到了每五分钟宫缩一次。在有规律疼了2个多小时之后，我毅然带着柯廷前往医院，带上准备好的待产包，打个车就疾驰而去。   \n> 来到产科，走廊上都快住满待产妇，在进行了一轮胎监之后，决定先住院观察下。 很庆幸，当时选择了提前住下。后来发生的事情也证明了这点。   \n> 在下午，柯廷就从走廊换到了病房中，然后当天下午，宫缩越来越频繁，一度到了无法走路的地步。据医生说，这就是即将临盆的征兆。准备好一切，我来到产房，进行陪产。 从5点30分到11点11分，终于生下了盼盼。感触颇深：  \n> • 母亲是伟大的，生产真的是一件特别伟大的事情，需要承受如此大的痛苦。  \n> • 柯廷，是这么怕疼的一个人，还是毅然担起了母亲的职责，将盼盼顺利生下来。  \n> 听到盼盼呱呱落地的啼叫声，那一刻，真的不自觉留下了眼泪，感动、高兴、兴奋。 我暗暗发誓，我一定要好好对待好娘俩。\n\n\n现在回想起，还是感触颇深啊。\n\n\n## **盼盼**\n\n\n这个月主要还是围绕盼盼来展开的。\n\n\n值得一提的时，在家时，为盼盼取了一个雅致的名字：书冉。这里我参考了五格剖象学、生肖学结合盼盼的生辰八字，最终取名“书冉”。\n\n\n**书冉**\n\n- 知书达理 冉冉淙淙\n- 书冉名字寓意为:敏而好学、博览五车、力争上游、积极向上之意。\n\t- **书**字含义为：书本、著作、书法、文字。书字取名的寓意:知识丰富、学识文博、素养高；\n\t- **冉**字含义为：渐进、善意、温和、恭敬。冉字取名的寓意:温柔、温和、善良、恭谨之义；\n\n另外，通过做功课，在拿到出生证明后，3天内就把盼盼的身份证、社保卡、户口都弄好了，堪称迅速。\n\n\n![](https://image.kuangyichen.com/personal/panpan/mmexport1714905071253.jpg)\n\n\n## 运动篇\n\n\n本月运动量相比上月大减，共计运动 11 次，主要聚焦在月初和月末。主要还是因为月中，太忙了！忙着什么呢，忙着带娃和照顾人。\n\n\n![](https://image.kuangyichen.com/image/my_note/202405101850181.png)\n\n\n5月要加大运动量，照顾媳妇和盼盼是需要体力的，还要上班，所以身体必须要好！\n\n\n## 读书篇\n\n\n微信读书中，共计5小时44分，阅读14天，读过6本书\n\n\n还在读《认知驱动》，5月尽量读完。\n\n\n[bookmark](https://kuangyichen.com/running)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-05-10",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202404",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年4月",
        "status": "Published",
        "urlname": "1b98b535-feb7-4964-8530-302375ff96b0",
        "updated": "2024-05-10 11:37:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "1b98b535-feb7-4964-8530-302375ff96b0"
        }
      ],
      "body": "",
      "realName": "[阶段小结]2024年4月",
      "relativePath": "/三省吾身/[阶段小结]2024年4月.md"
    },
    {
      "id": "d202ebfc-e4f9-450d-967c-a593607cb87d",
      "doc_id": "d202ebfc-e4f9-450d-967c-a593607cb87d",
      "updated": 1736338500000,
      "body_original": "\n# 5月小结\n\n\n> 😄 May Day！\n\n\n## 运动篇\n\n\n恢复运动，瑜伽进阶\n\n- 本月共计运动16次\n- 9次瑜伽，主要以轻松愉悦为主\n\n如果除去五月的休假那几天，这个月的锻炼频次还是挺高的，劳逸结合。\n\n\n![](https://image.kuangyichen.com/image/my_note/202406041914733.png)\n\n\n6月的话，开始跑步起来吧。\n\n\n## 阅读篇\n\n\n这个月的阅读数量下降了很多，完成了《认知驱动》这本书。\n\n\n**这个月的读书量也不能算少** 因为本月还有《软考高级-软件架构设计师》以及《证券从业准入测试-金融基础知识》两门考试，教科书也算阅读！！\n\n\n## 考试篇\n\n\n5.25（软考） 与 6.2（证券） 的考试，尽力就好！\n\n\n之前5.25那天在memos上写下的：\n\n\n**参加 软考 架构设计师** 在龙岗考试，约了拼车，早上五点起床，然后过去，6:50就到了。 摆烂，上午考两门，四个小时(基础知识+案例分析），下午考一门（论文），两个小时。上午考完，都准备想放弃了，和柯廷打完电话，还是坚持下去。 结果，论文竟然写到熟悉的领域，哈哈，可能还能及格。不过案例分析应该是挂了！！ 这次总结下，放弃就什么机会都没了！ 给自己一个推力，能够坚持下去的，没有想的那么难。心态放轻松，平和一些！ 用个成语就是塞翁失马焉知非福，结果谁知道呢！！\n\n\n三门考试，准备不够充分，一度想要放弃，还是坚持下去了，至少在一定程度上还有合格的机会。 我知道，我应该知道，不到最后一刻，决不放弃！\n\n\n证券的这门考试，是因为去年的基础知识差0.5分没过，导致今年还得继续努力。为此还特地买了一本最新的教材。\n\n\n![](https://image.kuangyichen.com/image/my_note/202406041928200.png)\n\n\n最终的结果还是挺满意的，66分过了，对得起自己靠前一周的努力。\n\n\n## 生活篇\n\n\n生活中多了一个人，确实变化了很多，多了一份牵挂，也学习了很多新的技能。\n\n\n关于奶粉就有如何泡奶粉、喂奶的姿势、洗奶瓶，早教的话有黑白卡、沙锤追听追视，按摩相关的有排气操还有拍嗝方式，抱抱的方式也有各种，就不赘述了。\n\n\n[bookmark](https://kuangyichen.com/running)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-06-04",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202405",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年5月",
        "status": "Published",
        "urlname": "d202ebfc-e4f9-450d-967c-a593607cb87d",
        "updated": "2025-01-08 12:15:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "d202ebfc-e4f9-450d-967c-a593607cb87d"
        }
      ],
      "body": "",
      "realName": "[阶段小结]2024年5月",
      "relativePath": "/三省吾身/[阶段小结]2024年5月.md"
    },
    {
      "id": "ed2767fd-4028-4440-bf09-e8bd7f92e00d",
      "doc_id": "ed2767fd-4028-4440-bf09-e8bd7f92e00d",
      "updated": 1722510780000,
      "body_original": "\n# 7月小结\n\n\n> 😄 今天是八一建军节，该总结下7月了！\n\n\n## 运动篇\n\n\n> 多点开花，跑步距离下一个月有望突破100km\n\n- 运动天数：20天\n- 骑行：2次，总距离：30.11Km\n- 健走：5次，总距离：16km\n- 瑜伽：4次，总时长：4小时\n- 跑步：14次，总距离：92.01km\n- 划船机：2次，总距离：6km\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/85ec20e4-0144-4902-b842-90b826ad1e89/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240801%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240801T111457Z&X-Amz-Expires=3600&X-Amz-Signature=d640fd261961f29dad4fd3621eb0f7c55ae8a249291cc5e7871f1f75b374b18b&X-Amz-SignedHeaders=host&x-id=GetObject)\n\n\n## 阅读篇\n\n\n> 再接再厉\n\n- 8小时43分钟\n- 读过3本书\n- 阅读19天\n\n## 生活篇\n\n\n7.13 入职鹅厂五年，同时给自己配置了一份重疾险\n\n\n7.21 理发，清爽\n\n\n7.31 期待加薪\n\n\n[bookmark](https://kuangyichen.com/running)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-08-01",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202407",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年7月",
        "status": "Published",
        "urlname": "ed2767fd-4028-4440-bf09-e8bd7f92e00d",
        "updated": "2024-08-01 11:13:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "ed2767fd-4028-4440-bf09-e8bd7f92e00d"
        }
      ],
      "body": "",
      "realName": "[阶段小结]2024年7月",
      "relativePath": "/三省吾身/[阶段小结]2024年7月.md"
    },
    {
      "id": "2ba70764-47bc-4779-943d-528efab2b7e6",
      "doc_id": "2ba70764-47bc-4779-943d-528efab2b7e6",
      "updated": 1722511080000,
      "body_original": "\n# 6月小结\n\n\n> 😄 6月的小结忘记发布了，索性跟7月一起发了吧！\n\n\n6月过的真快，感觉做了很多事情，但是又好像什么都没有做。\n\n\n> 6.2 8:30-10:30 完成证券从业资格考试 金融基础知识科目 6.5 成绩通过  \n> 6.16 很高兴，在老婆的赞助下，趁着618大促，我买了一个高驰 pace3。要加油跑步！  \n> 6.28 软考高级没有过，不过还是挺欣慰的，本来就没有预期要过的，案例题和作文题可以算是惊喜了，下半年加油！\n\n\n概念是不是要搞起来！\n\n\n## 运动篇\n\n\n![](https://image.kuangyichen.com/image/my_note/202407012036717.png)\n\n\n总计：\n\n- 瑜伽8次\n- 跑步+健走 58.20km\n\n高驰 pace3 老婆送了梦寐以求的礼物，要加油跑步！Run 起来！\n\n\n## 阅读篇\n\n\n本月阅读的书籍比较少\n\n\n## 生活篇\n\n\n这个月开始有点惰性，不想记录自己的生活。\n\n\n[bookmark](https://kuangyichen.com/running)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-07-01",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202406",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年6月",
        "status": "Published",
        "urlname": "2ba70764-47bc-4779-943d-528efab2b7e6",
        "updated": "2024-08-01 11:18:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "2ba70764-47bc-4779-943d-528efab2b7e6"
        }
      ],
      "body": "",
      "realName": "[阶段小结]2024年6月",
      "relativePath": "/三省吾身/[阶段小结]2024年6月.md"
    },
    {
      "id": "0028f22b-0bd2-46d8-96fb-262293be6041",
      "doc_id": "0028f22b-0bd2-46d8-96fb-262293be6041",
      "updated": 1726105500000,
      "body_original": "\n# 8月小结\n\n\n> 😄 最近有点忙啊，都快9月中旬了，记下8月的小结吧！\n\n\n## 运动篇\n\n\n| 活动类型 | 次数 | 总距离/时间  |\n| ---- | -- | ------- |\n| 跑步   | 7次 | 42.7km  |\n| 骑行   | 2次 | 34.67km |\n| 健走   | 5次 | 14.8km  |\n| 瑜伽   | 5次 | 5小时     |\n| 健身   | 2次 | 55分钟    |\n| 椭圆机  | 1次 | 3km     |\n| 划船机  | 2次 | 5km     |\n\n1. 8月跑步次数有点少，未及预期。原因是下旬带娃强度上去，运动有所调整，选择了较为舒缓的一些方式。\n2. 运动次数增多，各种方式穿插，增加了灵活性和趣味性，避免了枯燥繁复。\n3. 9月要加强锻炼，不能松懈。\n\n## 阅读篇\n\n- 8月【微信读书】数据\n阅读时长：5小时26分钟\n阅读天数：12天\n\n## 学习篇\n\n- 概念学习31天打卡【全勤】\n\n## 生活篇\n\n- 给媳妇购置商业保险\n- 给盼盼购买新一年的学龄前少儿保险\n- 网站域名统一续期，目前免费域名续期时间为3个月了，待解决自动续期问题\n\n[bookmark](https://kuangyichen.com/running)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-09-12",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202408",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年8月",
        "status": "Published",
        "urlname": "0028f22b-0bd2-46d8-96fb-262293be6041",
        "updated": "2024-09-12 01:45:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "0028f22b-0bd2-46d8-96fb-262293be6041"
        }
      ],
      "body": "",
      "realName": "[阶段小结]2024年8月",
      "relativePath": "/三省吾身/[阶段小结]2024年8月.md"
    },
    {
      "id": "16254ee3-2891-80df-af79-dce76d77fc2f",
      "doc_id": "16254ee3-2891-80df-af79-dce76d77fc2f",
      "updated": 1734692400000,
      "body_original": "\n> 😀 在网络安全日益重要的今天，SSL/TLS 证书对于确保网站的安全性和可信度起着至关重要的作用。Let's Encrypt 是一个免费、自动化和开放的证书颁发机构，为广大网站所有者提供了免费的 SSL/TLS 证书，极大地推动了互联网的安全发展。  \n> 然而，Let's Encrypt 颁发的免费证书的有效期曾经为 90 天，现在缩短为 3 个月。这样的短有效期是为了确保证书的安全性和有效性，及时更新可能出现的安全漏洞和问题，同时也鼓励证书使用者保持对证书管理的关注和维护。但对于网站所有者来说，手动每三个月更新一次证书是一项繁琐且容易被遗忘的任务。如果证书过期未及时更新，可能会导致网站出现安全警告，影响用户信任度和访问体验。因此，实现证书的自动续期就变得尤为重要。\n\n\n# 一、安装步骤\n\n\n## **1.1 安装 Certbot**\n\n1. 在不同的操作系统上安装 Certbot 的方法会有所不同。以下是一些常见操作系统的安装方法：\n- **Ubuntu/Debian**：\n\n```shell\nsudo apt-get updatesudo apt-get install certbot\n```\n\n- **CentOS/RHEL**：\n\n```shell\nsudo yum install epel-releasesudo yum install certbot\n```\n\n\n2. 安装完成后，可以通过运行以下命令来检查 Certbot 是否安装成功：\n\n\n```shell\ncertbot --version\n```\n\n\n如果是其他操作系统，可以查看： [https://certbot.eff.org/instructions](https://certbot.eff.org/instructions)\n\n\n## **1.2 获取证书**\n\n1. 使用 Certbot 获取证书的命令格式如下：\n\n```shell\ncertbot certonly --nginx -d example.com -d www.example.com\n```\n\n- -nginx：表示使用 Nginx 插件来配置证书。如果你的 Web 服务器是其他类型，可以使用相应的插件，如--apache等。\n- d [example.com](http://example.com/) -d [www.example.com](http://www.example.com/)：指定要为哪些域名获取证书。可以指定多个域名，用空格隔开。\n1. 运行命令后，Certbot 会引导你进行一些配置，例如同意服务条款、设置邮箱等。按照提示完成操作后，Certbot 会为指定的域名生成证书，并将其存储在相应的位置。\n\n## **1.3 配置自动续期**\n\n1. Certbot 可以通过定时任务来实现证书的自动续期。在大多数系统中，可以使用cron来设置定时任务。\n2. 打开终端，输入以下命令来编辑cron任务：\n\n```shell\ncrontab -e\n```\n\n1. 在打开的文件中添加以下内容：\n\n```shell\n0 0,12 * * * /usr/bin/certbot renew --quiet && service nginx reload\n```\n\n\n> 💡 说明  \n> - 0 0,12 * * *：表示每天的 0 点和 12 点执行任务。你可以根据自己的需求调整这个时间。  \n>   \n> - /usr/bin/certbot renew --quiet：执行 Certbot 的续期命令，--quiet参数表示静默模式，不输出过多的信息。  \n>   \n> - service nginx reload：如果你的 Web 服务器是 Nginx，在续期完成后重新加载 Nginx 服务，使新的证书生效。如果你的 Web 服务器是其他类型，将此命令替换为相应的服务重新加载命令。\n\n1. 保存文件并退出。现在，Certbot 将会按照你设置的时间自动续期证书。\n\n## **1.4 检查证书续期状态**\n\n1. 你可以随时运行以下命令来检查证书的续期状态：\n\n`certbot renew --dry-run`\n\n- -dry-run参数表示进行一次模拟续期，不会实际更新证书，但会显示如果进行续期会发生的情况。\n1. 该命令会输出证书的到期时间、是否需要续期等信息。如果显示“Your existing certificate has not expired yet and there is nothing to do.”，则表示证书目前不需要续期。\n\n> ✅ 通过以上步骤，你可以使用 Certbot 轻松实现证书的自动续期，确保你的网站始终使用有效的 SSL/TLS 证书，提高网站的安全性和可信度。\n\n\n# 二、通配符域名的安装\n\n\n> 🚫 然而，很多时候，我们需要对通配符域名（也就是`*.example.com`格式的域名）进行证书续期，这个时候上面的步骤就不够用了。\n\n\n不管是申请还是续期，只要是通配符证书，只能采用 dns-01 的方式校验申请者的域名，也就是说 certbot 操作者必须手动添加 DNS TXT 记录。\n\n\n## 2.0 准备工作\n\n\n这时候需要用到一个脚本： [https://github.com/yangrongzhou/certbot-letencrypt-wildcardcertificates-alydns-au](https://github.com/yangrongzhou/certbot-letencrypt-wildcardcertificates-alydns-au)\n\n\n只需要将脚本下载到服务器上，并且配置好对应的 服务 Open API 密钥即可\n\n\n参数说明\n\n- certonly：表示采用验证模式，只会获取证书，不会为web服务器配置证书\n- -manual：表示插件\n- -preferred-challenges dns：表示采用DNS验证申请者合法性（是不是域名的管理者）\n- -dry-run：在实际申请/更新证书前进行测试，强烈推荐\n- d：表示需要为那个域名申请证书，可以有多个。\n- -manual-auth-hook：在执行命令的时候调用一个 hook 文件\n- -manual-cleanup-hook：清除 DNS 添加的记录\n\n| 参数                    | 参数使用说明                                    |\n| --------------------- | ----------------------------------------- |\n| --manual-auth-hook    | 在执行命令的时候调用的 hook 脚本文件，用于鉴权使用              |\n| --manual-cleanup-hook | 在执行命令的时候调用的 hook 脚本文件，用于清理 DNS TXT Record |\n\n\n## **2.1 安装 Certbot**\n\n\n同1.1步骤，这里不赘述了\n\n\n## **2.2 获取证书**\n\n\n```shell\ncertbot certonly -d *.kuangyichen.com --manual --preferred-challenges dns --dry-run --manual-auth-hook \"/data/server/certbot-letencrypt-wildcardcertificates-alydns-au/au.sh python txy add\" --manual-cleanup-hook \"/data/server/certbot-letencrypt-wildcardcertificates-alydns-au/au.sh python txy clean\" --logs-dir logs --config-dir config --work-dir work\n```\n\n\n## **2.3 更新证书**\n\n\n```shell\ncertbot renew  --manual --preferred-challenges dns --manual-auth-hook \"/data/server/certbot-letencrypt-wildcardcertificates-alydns-au/au.sh python txy add\" --manual-cleanup-hook \"/data/server/certbot-letencrypt-wildcardcertificates-alydns-au/au.sh python txy clean\" --logs-dir logs --config-dir config --work-dir work --dry-run\n```\n\n\n# 三、其他\n\n\n## **3.1 如何查看证书过期时间？**\n\n\n**命令行方式**\n\n\n```shell\nopenssl x509 -in /root/config/live/example.com/fullchain.pem -noout -enddate\n```\n\n\n会打印出证书到期时间，如下所示\n\n\n```shell\nnotAfter=Mar 20 07:20:27 2025 GMT\n```\n\n\n**Web 页面直接查看**\n\n\n打开对应网站，点击浏览器链接输入栏旁的锁图样，点击连接安全，点击证书图样，即可打开证书查看，如下图所示：\n\n\n![](https://image.kuangyichen.com/image/my_note/202412201832317.png)\n\n\n![](https://image.kuangyichen.com/image/my_note/202412201832278.png)\n\n\n![](https://image.kuangyichen.com/image/my_note/202412201831279.png)\n\n\n# 参考\n\n\n[https://certbot.eff.org/](https://certbot.eff.org/)\n\n\n[https://eff-certbot.readthedocs.io/](https://eff-certbot.readthedocs.io/) \n\n\n[https://certbot.eff.org/glossary](https://certbot.eff.org/glossary)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-12-20",
        "type": "Post",
        "category": "技术分享",
        "slug": "certbot-auto-renew",
        "tags": [
          "建站",
          "工具"
        ],
        "summary": "",
        "title": "使用 Certbot 实现证书自动续期",
        "status": "Published",
        "urlname": "16254ee3-2891-80df-af79-dce76d77fc2f",
        "updated": "2024-12-20 11:00:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "16254ee3-2891-80df-af79-dce76d77fc2f"
        }
      ],
      "body": "",
      "realName": "使用 Certbot 实现证书自动续期",
      "relativePath": "/技术分享/使用 Certbot 实现证书自动续期.md"
    },
    {
      "id": "17554ee3-2891-80df-9957-e17beeef23ff",
      "doc_id": "17554ee3-2891-80df-9957-e17beeef23ff",
      "updated": 1736336820000,
      "body_original": "\n# 引言\n\n\n> 😄 看到很多小伙伴秀出了自己的2023年的年终总结，易浅也不甘示弱，经过几天的业余时间，这个2023年的总结经过多日，终于出炉了！\n\n\n# 核心目标\n\n\n2023年初，我给自己定了年度的OKR，分成三部分，职业道路、家庭生活、个人发展，如下所示：\n\n\n\n## 职业道路\n\n- [x] 涨工资\n- [ ] 晋级（准备ing）\n- [x] 扩大自身的技术影响力\n\n\n\n## 家庭生活\n\n- [x] 亲密关系——与大宝建立更深厚的感情\n- [x] 食——做饭给家人吃，食谱增加\n- [ ] 行——在经济可行的时候买一辆车\n\n\n\n## 个人发展\n\n- [ ] 身体素质——达到标准身材，体重达标，体脂率达标，腹肌明显\n- [ ] 英语——听说读写水平提升，接近雅思7分水平\n- [ ] 粤语——达到能够看粤语电影的水平\n- [x] 吉他——娱乐为主，能够不看谱演奏两首歌曲\n\n\n\n**职业道路**和**家庭生活**都在稳步完成，**个人发展**这块是除了娱乐是啥都没做成啊。算起来，这个既然OKR只完成了50%，不过，细细算起来，除了OKR，还有一些额外的惊喜。\n\n\n# 主要成就\n\n\n## 📓读书篇\n\n\n全年大部分读书都是在微信读书上完成的，数据也是源自微信读书的2023年总结。阅读**224**小时，读过**50**本书，读完**20**本书，**256**天有在阅读。\n\n\n《皮囊》《没有疼痛的身体》《身心灵实修指南系列》《陆小凤传奇》《学会提问》等等。\n\n\n之所以把读书放在前列，是因为读书过程中，除了身心的愉悦之外，还能利用微信读书的资源，通过快速查找来丰富自己的知识库。web端的微信读书也很给力，搜索能力很强，也很适合边看边做笔记。\n\n\n通过这一年的读书，看了心理学的书籍，也看了不少经典小说，同时也看了不少成功学的书籍，也给自己喝些心灵鸡汤。\n\n\n**2024年，希望继续保持，除此之外的，希望自己能够输出读书笔记，要求不高，一个月一篇读书笔记即可。**\n\n\n## 🏃🏻运动篇\n\n\n说到运动，我还是挺惊喜的，尽管2023年的前三个季度，因为偷懒或者其他借口没有好好锻炼，但是从第四季度开始，运动量突飞猛进。说说数据吧：\n\n\n**全年144天运动**\n\n- 跑步超过**350**KM（其中第四季度提供280+KM），完成3场半马以上级别的赛事，突破个人历史PB\n- 瑜伽从小白渐入佳境，可以完整熟练达成拜日式A、B式两种瑜伽，这里需要感谢大宝的支持和鼓励\n- 其他运动，诸如登山、骑车、划船机、椭圆机、乒乓、羽球、板球都略有涉猎，达成**百花齐放**成就\n\n**2024年的目标，就是再跑两个以上马拉松，****半马成绩破2****！坚持跑步，坚持锻炼，****全年突破1000KM！**\n\n\n## 🏙️生活篇\n\n\n**做菜**\n\n\n学会了很多菜，野山椒炒牛肉、炒花蛤、粉蒸肉、基围虾、清蒸鱼、红烧鱼、鲫鱼豆腐汤、菠菜主猪肝汤、炒时蔬（油麦菜、苋菜、生菜等等）、各种辣椒炒肉、各种炒蛋（黄瓜、丝瓜、胡萝卜、辣椒）\n\n\n**养花**\n\n\n郁金香、绣球花、三角梅、月季、绿萝、竹子，希望后面继续壮大我家阳台的植物园家族\n\n\n**演唱会**\n\n\n看了一场演唱会：Westlife 深圳演唱会\n\n\n## 👤个人提升\n\n\n**个人博客**\n\n\n`kuangyichen.com` 算是年度的一大亮点吧，通过从notion，到notionnext 再到elog\n\n\n**一百天行业概念打卡**活动圆满完成\n\n\n做一件事坚持一百天，打卡100个行业概念完美收官，20W字落地。\n\n\n**基金从业资格证(get)**\n\n\n因为工作行业原因，需要考证，结果当然是顺利拿下。\n\n\n比较遗憾的是 “证券从业资格证” 有一门差0.5分没有拿到证书\n\n\n**中级软件设计师证书(get)**\n\n\n在朋友的鼓励下，因缘巧合去考了中级软考证书，顺利拿下。（基础知识：51分，应用技术：67分，两门的满分都是75分）\n\n\n# 结语\n\n\n2023是如此神奇的一年，我的而立之年，谢谢家人的陪伴，谢谢朋友们的支持，也谢谢自己的坚持，感恩世界，爱与和平！期待盼盼的到来，并希望你不虚此行！\n\n\n[bookmark](https://kuangyichen.com/)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-01-02",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-2023",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "2023年度总结",
        "status": "Published",
        "urlname": "17554ee3-2891-80df-9957-e17beeef23ff",
        "updated": "2025-01-08 11:47:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "17554ee3-2891-80df-9957-e17beeef23ff"
        }
      ],
      "body": "",
      "realName": "2023年度总结",
      "relativePath": "/三省吾身/2023年度总结.md"
    },
    {
      "id": "1c254ee3-2891-8094-b552-d83fbbccea16",
      "doc_id": "1c254ee3-2891-8094-b552-d83fbbccea16",
      "updated": 1742982060000,
      "body_original": "\n> 😀 AI 的爆火，身为程序员的我，也感受到一丝丝危机，那么应该如何应对 AI 的冲击呢？\n\n\n## 一、AI 工具如何重塑程序员工作模式\n\n\nAI 对程序员的影响已从**效率工具**演变为**能力扩展引擎**，其价值渗透至开发全流程：\n\n1. **代码生成与补全**\n\n\tAI 工具（如 GitHub Copilot、阿里云通义灵码）可自动生成基础代码模块。例如，输入“实现用户注册接口”，AI 能生成包含参数校验、数据库操作的完整函数框架，节省 60% 编码时间。程序员仅需调整核心逻辑，如加密算法或风控规则。\n\n2. **智能调试与优化**\n\n\t通过分析代码模式，AI 可精准定位 Bug。例如，当出现“数组越界”错误时，AI 不仅提示问题位置，还会建议增加边界检查代码。在性能优化场景中，AI 能识别冗余循环，推荐更优算法（如哈希表替代线性搜索）。\n\n3. **文档与测试自动化**\n\n\t工具如 Mintlify 可自动生成 API 文档，而 [Grit.io](http://grit.io/) 能管理技术债务，生成测试用例覆盖率提升至 95%。某电商平台使用 AI 生成测试脚本后，回归测试时间从 8 小时缩短至 30 分钟。\n\n4. **跨领域知识整合**\n\n\tAI 可解析非技术需求（如“设计医疗数据看板”），生成包含数据清洗、可视化组件的代码框架，帮助程序员快速理解业务逻辑。\n\n\n**数据佐证**：阿里云通义灵码每日生成数百万行代码，错误率低于人工编码 30%；GitHub Copilot 用户编码速度平均提升 55%。\n\n\n## 二、取代危机 or 进化机遇？职业形态的再定义\n\n\nAI 对程序员职业的影响呈现**分层冲击**与**角色升级**的双重特征：\n\n1. **初级程序员：效率工具 or 替代威胁？**\n\t- **冲击面**：模板代码生成、基础 Bug 修复等低阶任务逐步被 AI 接管。Meta 预测，2025 年 80% 的中级工程师工作可由 AI 完成。\n\t- **新定位**：初级开发者需转型为“AI 训练师”，通过调整提示词（Prompt）优化代码生成质量，例如为 AI 定义代码规范：“生成符合 Google Java 风格的 RESTful 接口”。\n2. **中高级程序员：从执行者到架构指挥官**\n\t- **能力升级**：复杂系统设计（如分布式事务处理）、技术选型（微服务 vs 单体架构）等决策仍需人类主导。AI 可生成备选方案，但架构合理性评估依赖人类经验。\n\t- **案例**：某金融系统开发中，AI 生成风控模块代码，但工程师需结合行业合规要求调整规则权重，避免模型偏见。\n3. **新兴职业机会**\n\t- **AI 伦理审查员**：审核 AI 生成代码的数据隐私风险（如 GDPR 合规性）；\n\t- **人机协作专家**：设计 AI 与人类协同流程，例如用 AI 生成原型代码，人工优化异常处理逻辑。\n\n**行业共识**：AI 不会淘汰程序员，但会淘汰**拒绝进化**的从业者。\n\n\n## 三、程序员的破局策略：构建三层防御壁垒\n\n1. **技术融合：从使用者到协作者**\n\t- **掌握 AI 工具链**：熟练使用 Copilot、Cursor 等工具，学习 Prompt Engineering 提升生成代码质量。例如，提示词细化：“用 Python 实现线程安全的 LRU 缓存，最大容量 100，支持并发访问”。\n\t- **深耕垂直领域**：在 AI、区块链等领域建立技术壁垒。例如，金融开发者需掌握量化交易算法与 AI 模型融合技巧。\n2. **思维升级：从编码到系统设计**\n\t- **架构能力**：学习领域驱动设计（DDD）、云原生架构，主导技术方案评审。例如，评估 AI 生成的微服务拆分方案是否符合高内聚原则。\n\t- **产品思维**：理解用户需求本质，避免被 AI 生成的“表面正确”代码误导。例如，AI 可能生成功能完备但用户体验差的界面，需人工优化交互流程。\n3. **软技能护城河：人类独特价值**\n\t- **跨领域沟通**：向非技术人员解释技术方案，例如用 AI 生成可视化图表说明系统性能瓶颈；\n\t- **伦理判断**：识别 AI 工具的潜在风险。例如，AI 可能生成侵犯版权的代码片段，需人工审核引用来源。\n\n**行动清单**：\n\n- 每月投入 10 小时学习 AI 工具特性（如 Copilot 的单元测试生成功能）；\n- 参与开源项目（如 TensorFlow 模型优化），积累复杂问题解决经验；\n- 考取 AWS 机器学习认证等资质，提升技术可信度。\n\n## 四、未来展望：人机共生的新常态\n\n\nAI 将推动编程行业进入“**效率民主化**”时代：\n\n- **门槛降低**：非专业开发者可通过自然语言描述实现简单应用，如生成数据分析脚本；\n- **价值上移**：程序员的核心竞争力转向**创新设计**（如元宇宙交互逻辑）与**复杂系统把控**（如自动驾驶决策算法）。\n\n**终极建议**：将 AI 视为“超级实习生”——它擅长执行，但依赖人类指引方向。程序员的未来，属于那些能驾驭 AI 实现创造性突破的“**技术策展人**”。\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2025-03-26",
        "type": "Post",
        "category": "技术分享",
        "slug": "ai_programmer_revolution",
        "tags": [
          "思考",
          "随笔",
          "AI"
        ],
        "summary": "",
        "title": "AI 时代程序员生存指南：从效率革命到价值重构",
        "status": "Published",
        "urlname": "1c254ee3-2891-8094-b552-d83fbbccea16",
        "updated": "2025-03-26 09:41:00"
      },
      "catalog": [
        {
          "title": "技术分享",
          "doc_id": "1c254ee3-2891-8094-b552-d83fbbccea16"
        }
      ],
      "body": "",
      "realName": "AI 时代程序员生存指南：从效率革命到价值重构",
      "relativePath": "/技术分享/AI 时代程序员生存指南：从效率革命到价值重构.md"
    },
    {
      "id": "1c754ee3-2891-80a1-8510-f0e39cad5353",
      "doc_id": "1c754ee3-2891-80a1-8510-f0e39cad5353",
      "updated": 1743427380000,
      "body_original": "\n# 2025 Q1 小结\n\n\n> 😄 今天是三月的最后一天，也是2025年的一季度的最后一天了，1月2月偷懒没来得及复盘总结，也该季度小结下了。\n\n\n## **运动篇**\n\n\n> 💌 **本小结借助了AI进行总结，数据全是AI基于跑步日记的数据生成**\n\n\n| 月份   | 跑步里程（km） | 健走里程（km） | 划船机运动时间（分钟） | 有氧/瑜伽/其他运动时间（分钟） | 骑行里程（km） |\n| ---- | -------- | -------- | ----------- | ---------------- | -------- |\n| 1月   | 5.29     | 3        | 0           | 20               | 6.59     |\n| 2月   | 63.89    | 2.3      | 0           | 75               | 0        |\n| 3月   | 124.45   | 3        | 89          | 143              | 0        |\n| 季度汇总 | 193.63   | 8.3      | 89          | 238              | 6.59     |\n\n\n2025年1 - 3月的运动数据。这三个月运动类型丰富多样，跑步是主要运动项目，同时还有骑行、健走、瑜伽等运动。整体数据反映出博主在这一季度保持了较为规律的运动习惯，且运动强度和多样性在逐步提升。\n\n1. **2025年1月运动数据**\n\t- **运动项目及数据**：跑步里程为5.29km，仅1次户外跑步记录；骑行里程6.59km；健走里程3km；有氧活动时长20分钟，为1次有氧锻炼。\n\t- **总结**：该月运动项目相对较少，运动强度较低，以单次运动里程和时长来看，跑步和骑行距离较短，整体运动量不大。\n2. **2025年2月运动数据**\n\t- **运动项目及数据**：跑步里程共63.89km，包括7次户外跑步和2次跑步机跑步；健走里程2.3km；有氧活动总时长75分钟，包含4次有氧锻炼和2次结合跑步的有氧活动。体重从70.6kg减至67.1kg，体脂肪减少3kg，体脂百分比从22.3%降至18.9% ，健康评估从78分提升到80分。\n\t- **总结**：相比1月，2月运动频次明显增加，跑步成为主要运动方式，且运动量较大。从身体数据变化来看，运动对体重、体脂等方面产生了积极影响，反映出运动在塑形和提升健康水平上有一定效果。\n3. **2025年3月运动数据**\n\t- **运动项目及数据**：跑步类里程总计124.45km，包含户外跑、跑步机跑以及混合运动；健走里程3km；划船机运动时间89分钟，累计划船9km；有氧/瑜伽/其他非器械运动时间143分钟。\n\t- **总结**：3月运动项目更加丰富多样，跑步类运动里程大幅增加，还加入了划船机运动，且有氧及相关非器械运动时间增多，表明运动强度和多样性进一步提升，有助于维持身体健康和多样化锻炼需求。\n\n## 读书学习篇\n\n\n### 读书\n\n\n微信读书累计17小时，说实话有点少\n\n- 《冰与火之歌》\n- 重读《非暴力沟通》\n- 《伯恩斯焦虑自助疗法》\n\n### 多邻国\n\n\n累计打卡186天，已经超过半年\n\n\n主要用于每天学习10-30分钟的英语，打卡升级一般，挺有趣的\n\n\n## 生活篇\n\n\n【就不记录流水账了！】\n\n- 给盼盼做百日宴的视频\n- 排除万难，统一家里的育儿理念，终于找个一种适合的方式，盼盼的成长慢慢进入正轨\n- 换掉用了6年的手机，奖励自己一台 小米15 utral，壕一把\n- 减脂增肌搞起，跑步+健身，均衡发展\n- 拥抱AI，在学习生活中进行提效，已经取得比较好的进展\n\n[bookmark](https://kuangyichen.com/running)\n\n",
      "properties": {
        "password": "",
        "icon": "",
        "date": "2025-03-31",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-2025-q1",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "2025Q1小结",
        "status": "Published",
        "urlname": "1c754ee3-2891-80a1-8510-f0e39cad5353",
        "updated": "2025-03-31 13:23:00"
      },
      "catalog": [
        {
          "title": "三省吾身",
          "doc_id": "1c754ee3-2891-80a1-8510-f0e39cad5353"
        }
      ],
      "body": "",
      "realName": "2025Q1小结",
      "relativePath": "/三省吾身/2025Q1小结.md"
    }
  ],
  "catalog": [
    {
      "object": "page",
      "id": "1c754ee3-2891-80a1-8510-f0e39cad5353",
      "created_time": "2025-03-31T13:02:00.000Z",
      "last_edited_time": "2025-03-31T13:23:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/my_note/20250331212306105.jpeg"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2025-03-31",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-2025-q1",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "2025Q1小结",
        "status": "Published",
        "urlname": "1c754ee3-2891-80a1-8510-f0e39cad5353",
        "updated": "2025-03-31 13:23:00"
      },
      "url": "https://www.notion.so/2025Q1-1c754ee3289180a18510f0e39cad5353",
      "public_url": "https://eachenkuang.notion.site/2025Q1-1c754ee3289180a18510f0e39cad5353"
    },
    {
      "object": "page",
      "id": "1c254ee3-2891-8094-b552-d83fbbccea16",
      "created_time": "2025-03-26T09:36:00.000Z",
      "last_edited_time": "2025-03-26T09:41:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/my_note/20250326174046334.jpeg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2025-03-26",
        "type": "Post",
        "category": "技术分享",
        "slug": "ai_programmer_revolution",
        "tags": [
          "思考",
          "随笔",
          "AI"
        ],
        "summary": "",
        "title": "AI 时代程序员生存指南：从效率革命到价值重构",
        "status": "Published",
        "urlname": "1c254ee3-2891-8094-b552-d83fbbccea16",
        "updated": "2025-03-26 09:41:00"
      },
      "url": "https://www.notion.so/AI-1c254ee328918094b552d83fbbccea16",
      "public_url": "https://eachenkuang.notion.site/AI-1c254ee328918094b552d83fbbccea16"
    },
    {
      "object": "page",
      "id": "17554ee3-2891-80df-9957-e17beeef23ff",
      "created_time": "2025-01-08T11:46:00.000Z",
      "last_edited_time": "2025-01-08T11:47:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-01-02",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-2023",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "2023年度总结",
        "status": "Published",
        "urlname": "17554ee3-2891-80df-9957-e17beeef23ff",
        "updated": "2025-01-08 11:47:00"
      },
      "url": "https://www.notion.so/2023-17554ee3289180df9957e17beeef23ff",
      "public_url": "https://eachenkuang.notion.site/2023-17554ee3289180df9957e17beeef23ff"
    },
    {
      "object": "page",
      "id": "16254ee3-2891-80df-af79-dce76d77fc2f",
      "created_time": "2024-12-20T10:38:00.000Z",
      "last_edited_time": "2024-12-20T11:00:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/my_note/202412201858369.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-12-20",
        "type": "Post",
        "category": "技术分享",
        "slug": "certbot-auto-renew",
        "tags": [
          "建站",
          "工具"
        ],
        "summary": "",
        "title": "使用 Certbot 实现证书自动续期",
        "status": "Published",
        "urlname": "16254ee3-2891-80df-af79-dce76d77fc2f",
        "updated": "2024-12-20 11:00:00"
      },
      "url": "https://www.notion.so/Certbot-16254ee3289180dfaf79dce76d77fc2f",
      "public_url": "https://eachenkuang.notion.site/Certbot-16254ee3289180dfaf79dce76d77fc2f"
    },
    {
      "object": "page",
      "id": "0028f22b-0bd2-46d8-96fb-262293be6041",
      "created_time": "2024-09-12T01:42:00.000Z",
      "last_edited_time": "2024-09-12T01:45:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": null,
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-09-12",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202408",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年8月",
        "status": "Published",
        "urlname": "0028f22b-0bd2-46d8-96fb-262293be6041",
        "updated": "2024-09-12 01:45:00"
      },
      "url": "https://www.notion.so/2024-8-0028f22b0bd246d896fb262293be6041",
      "public_url": "https://eachenkuang.notion.site/2024-8-0028f22b0bd246d896fb262293be6041"
    },
    {
      "object": "page",
      "id": "2ba70764-47bc-4779-943d-528efab2b7e6",
      "created_time": "2024-08-01T11:15:00.000Z",
      "last_edited_time": "2024-08-01T11:18:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": null,
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-07-01",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202406",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年6月",
        "status": "Published",
        "urlname": "2ba70764-47bc-4779-943d-528efab2b7e6",
        "updated": "2024-08-01 11:18:00"
      },
      "url": "https://www.notion.so/2024-6-2ba7076447bc4779943d528efab2b7e6",
      "public_url": "https://eachenkuang.notion.site/2024-6-2ba7076447bc4779943d528efab2b7e6"
    },
    {
      "object": "page",
      "id": "ed2767fd-4028-4440-bf09-e8bd7f92e00d",
      "created_time": "2024-08-01T11:07:00.000Z",
      "last_edited_time": "2024-08-01T11:13:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": null,
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-08-01",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202407",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年7月",
        "status": "Published",
        "urlname": "ed2767fd-4028-4440-bf09-e8bd7f92e00d",
        "updated": "2024-08-01 11:13:00"
      },
      "url": "https://www.notion.so/2024-7-ed2767fd40284440bf09e8bd7f92e00d",
      "public_url": "https://eachenkuang.notion.site/2024-7-ed2767fd40284440bf09e8bd7f92e00d"
    },
    {
      "object": "page",
      "id": "d202ebfc-e4f9-450d-967c-a593607cb87d",
      "created_time": "2024-06-20T01:33:00.000Z",
      "last_edited_time": "2025-01-08T12:15:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/my_note/202406200939956.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-06-04",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202405",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年5月",
        "status": "Published",
        "urlname": "d202ebfc-e4f9-450d-967c-a593607cb87d",
        "updated": "2025-01-08 12:15:00"
      },
      "url": "https://www.notion.so/2024-5-d202ebfce4f9450d967ca593607cb87d",
      "public_url": "https://eachenkuang.notion.site/2024-5-d202ebfce4f9450d967ca593607cb87d"
    },
    {
      "object": "page",
      "id": "1b98b535-feb7-4964-8530-302375ff96b0",
      "created_time": "2024-05-10T11:21:00.000Z",
      "last_edited_time": "2024-05-10T11:37:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/personal/panpan/mmexport1714905071253.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-05-10",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202404",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年4月",
        "status": "Published",
        "urlname": "1b98b535-feb7-4964-8530-302375ff96b0",
        "updated": "2024-05-10 11:37:00"
      },
      "url": "https://www.notion.so/2024-4-1b98b535feb749648530302375ff96b0",
      "public_url": "https://eachenkuang.notion.site/2024-4-1b98b535feb749648530302375ff96b0"
    },
    {
      "object": "page",
      "id": "10880dab-ca1b-4c16-bf0b-05948b82810e",
      "created_time": "2024-03-31T14:35:00.000Z",
      "last_edited_time": "2024-03-31T15:05:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/gradients_10.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-03-31",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202403",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年3月",
        "status": "Published",
        "urlname": "10880dab-ca1b-4c16-bf0b-05948b82810e",
        "updated": "2024-03-31 15:05:00"
      },
      "url": "https://www.notion.so/2024-3-10880dabca1b4c16bf0b05948b82810e",
      "public_url": "https://eachenkuang.notion.site/2024-3-10880dabca1b4c16bf0b05948b82810e"
    },
    {
      "object": "page",
      "id": "435af85e-bf48-4668-a4ad-fbe7715d0efb",
      "created_time": "2024-03-25T12:33:00.000Z",
      "last_edited_time": "2024-03-26T02:02:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/my_note/202403252042160.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-03-25",
        "type": "Post",
        "category": "技术文档",
        "slug": "python-for-bug",
        "tags": [
          "Python"
        ],
        "summary": "",
        "title": "Python 中 for 循环引发的变量覆盖问题",
        "status": "Published",
        "urlname": "435af85e-bf48-4668-a4ad-fbe7715d0efb",
        "updated": "2024-03-26 02:02:00"
      },
      "url": "https://www.notion.so/Python-for-435af85ebf484668a4adfbe7715d0efb",
      "public_url": "https://eachenkuang.notion.site/Python-for-435af85ebf484668a4adfbe7715d0efb"
    },
    {
      "object": "page",
      "id": "b0380602-ca68-4f3f-a958-fef575fe90c2",
      "created_time": "2024-03-23T02:34:00.000Z",
      "last_edited_time": "2024-03-23T02:52:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.weread.qq.com/weread/cover/39/YueWen_41147996/t7_YueWen_41147996.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-03-23",
        "type": "Post",
        "category": "读书笔记",
        "slug": "about-fogg-s1",
        "tags": [
          "福格行为模型",
          "思考"
        ],
        "summary": "",
        "title": "浅析福格行为模型（一）",
        "status": "Published",
        "urlname": "b0380602-ca68-4f3f-a958-fef575fe90c2",
        "updated": "2024-03-23 02:52:00"
      },
      "url": "https://www.notion.so/b0380602ca684f3fa958fef575fe90c2",
      "public_url": "https://eachenkuang.notion.site/b0380602ca684f3fa958fef575fe90c2"
    },
    {
      "object": "page",
      "id": "7289f576-ef76-40f5-ba09-861a67fd1d1c",
      "created_time": "2024-03-19T14:51:00.000Z",
      "last_edited_time": "2024-03-19T15:01:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/my_note/202403192300176.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-03-19",
        "type": "Post",
        "category": "心情随笔",
        "slug": "think-and-acition",
        "tags": [
          "思考"
        ],
        "summary": "",
        "title": "想多了全是问题，做多了全是答案",
        "status": "Published",
        "urlname": "7289f576-ef76-40f5-ba09-861a67fd1d1c",
        "updated": "2024-03-19 15:01:00"
      },
      "url": "https://www.notion.so/7289f576ef7640f5ba09861a67fd1d1c",
      "public_url": "https://eachenkuang.notion.site/7289f576ef7640f5ba09861a67fd1d1c"
    },
    {
      "object": "page",
      "id": "b1a6ea69-704f-4ee7-8f94-e185c464d084",
      "created_time": "2024-03-13T04:59:00.000Z",
      "last_edited_time": "2024-03-23T02:50:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/my_note/202403131307496.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-03-13",
        "type": "Post",
        "category": "读书笔记",
        "slug": "fogg-202403131201",
        "tags": [
          "福格行为模型",
          "思考"
        ],
        "summary": "",
        "title": "掌握技巧，变身“行为忍者”",
        "status": "Published",
        "urlname": "b1a6ea69-704f-4ee7-8f94-e185c464d084",
        "updated": "2024-03-23 02:50:00"
      },
      "url": "https://www.notion.so/b1a6ea69704f4ee78f94e185c464d084",
      "public_url": "https://eachenkuang.notion.site/b1a6ea69704f4ee78f94e185c464d084"
    },
    {
      "object": "page",
      "id": "65c23b2f-0001-4a45-bb33-5074d99a1128",
      "created_time": "2024-03-01T11:39:00.000Z",
      "last_edited_time": "2024-03-01T12:22:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/my_note/202403012007374.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-03-01",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202402",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年2月",
        "status": "Published",
        "urlname": "65c23b2f-0001-4a45-bb33-5074d99a1128",
        "updated": "2024-03-01 12:22:00"
      },
      "url": "https://www.notion.so/2024-2-65c23b2f00014a45bb335074d99a1128",
      "public_url": "https://eachenkuang.notion.site/2024-2-65c23b2f00014a45bb335074d99a1128"
    },
    {
      "object": "page",
      "id": "7bc081e2-0d78-4bdc-a110-28add6b58ee7",
      "created_time": "2024-02-25T01:35:00.000Z",
      "last_edited_time": "2024-02-25T01:43:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/my_note/202402241059789.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-02-25",
        "type": "Post",
        "category": "技术分享",
        "slug": "mbti-test",
        "tags": [
          "性格测试"
        ],
        "summary": "最近发现大家都在讨论16种人格，什么 INTJ 啥，所以我也做了一番功课。",
        "title": "深入理解 MBTI 性格测试",
        "status": "Published",
        "urlname": "7bc081e2-0d78-4bdc-a110-28add6b58ee7",
        "updated": "2024-02-25 01:43:00"
      },
      "url": "https://www.notion.so/MBTI-7bc081e20d784bdca11028add6b58ee7",
      "public_url": "https://eachenkuang.notion.site/MBTI-7bc081e20d784bdca11028add6b58ee7"
    },
    {
      "object": "page",
      "id": "c45fad48-0246-4d63-b940-005347df3096",
      "created_time": "2024-02-01T12:23:00.000Z",
      "last_edited_time": "2024-02-01T12:30:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": null,
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-02-01",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202401",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2024年1月",
        "status": "Published",
        "urlname": "c45fad48-0246-4d63-b940-005347df3096",
        "updated": "2024-02-01 12:30:00"
      },
      "url": "https://www.notion.so/2024-1-c45fad4802464d63b940005347df3096",
      "public_url": "https://eachenkuang.notion.site/2024-1-c45fad4802464d63b940005347df3096"
    },
    {
      "object": "page",
      "id": "f4887c92-5fa4-4282-a804-691387dce8d4",
      "created_time": "2024-01-24T12:11:00.000Z",
      "last_edited_time": "2024-01-24T12:17:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/insurance.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-01-24",
        "type": "Post",
        "category": "保险",
        "slug": "configure-insurance",
        "tags": [
          "保险配置"
        ],
        "summary": "本文是读完《做自己保险规划师：明明白白买保险》(小雨伞保险) 的笔记，归纳了配置保险的两个原则，四要素以及常见的三个误区。",
        "title": "新手应该如何配置保险",
        "status": "Published",
        "urlname": "f4887c92-5fa4-4282-a804-691387dce8d4",
        "updated": "2024-01-24 12:17:00"
      },
      "url": "https://www.notion.so/f4887c925fa44282a804691387dce8d4",
      "public_url": "https://eachenkuang.notion.site/f4887c925fa44282a804691387dce8d4"
    },
    {
      "object": "page",
      "id": "a3b5727f-b0ee-4ee7-926e-0c1af377edbf",
      "created_time": "2024-01-17T14:32:00.000Z",
      "last_edited_time": "2024-01-18T08:41:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1654277041218-84424c78f0ae?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2024-01-17",
        "type": "Post",
        "category": "技术分享",
        "slug": "github-connect",
        "tags": [
          "工具"
        ],
        "summary": "",
        "title": "Github连接不上怎么办？",
        "status": "Published",
        "urlname": "a3b5727f-b0ee-4ee7-926e-0c1af377edbf",
        "updated": "2024-01-18 08:41:00"
      },
      "url": "https://www.notion.so/Github-a3b5727fb0ee4ee7926e0c1af377edbf",
      "public_url": "https://eachenkuang.notion.site/Github-a3b5727fb0ee4ee7926e0c1af377edbf"
    },
    {
      "object": "page",
      "id": "df5630db-714c-4a01-b2e7-af87019c3cde",
      "created_time": "2024-01-02T11:56:00.000Z",
      "last_edited_time": "2025-01-08T13:47:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/my_note/202501082146132.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2025-01-08",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-2024",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "2024年度总结",
        "status": "Published",
        "urlname": "df5630db-714c-4a01-b2e7-af87019c3cde",
        "updated": "2025-01-08 13:47:00"
      },
      "url": "https://www.notion.so/2024-df5630db714c4a01b2e7af87019c3cde",
      "public_url": "https://eachenkuang.notion.site/2024-df5630db714c4a01b2e7af87019c3cde"
    },
    {
      "object": "page",
      "id": "8a587d45-a199-4228-b2e4-12c11e467366",
      "created_time": "2023-12-31T14:37:00.000Z",
      "last_edited_time": "2024-01-01T01:36:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/%E9%98%B6%E6%AE%B5%E5%B0%8F%E7%BB%93by12.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-31",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202312",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2023年12月",
        "status": "Published",
        "urlname": "8a587d45-a199-4228-b2e4-12c11e467366",
        "updated": "2024-01-01 01:36:00"
      },
      "url": "https://www.notion.so/2023-12-8a587d45a1994228b2e412c11e467366",
      "public_url": "https://eachenkuang.notion.site/2023-12-8a587d45a1994228b2e412c11e467366"
    },
    {
      "object": "page",
      "id": "52011588-d4d4-43c6-8cec-94fac3aa32b7",
      "created_time": "2023-12-31T01:23:00.000Z",
      "last_edited_time": "2024-01-01T01:39:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/%E6%A6%82%E5%BF%B5%E6%89%93%E5%8D%A1100%E5%A4%A9%E5%A4%8D%E7%9B%98.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-31",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-100-recall",
        "tags": [
          "行业概念"
        ],
        "summary": "",
        "title": "概念打卡100天复盘",
        "status": "Published",
        "urlname": "52011588-d4d4-43c6-8cec-94fac3aa32b7",
        "updated": "2024-01-01 01:39:00"
      },
      "url": "https://www.notion.so/100-52011588d4d443c68cec94fac3aa32b7",
      "public_url": "https://eachenkuang.notion.site/100-52011588d4d443c68cec94fac3aa32b7"
    },
    {
      "object": "page",
      "id": "05966e8d-2d37-4359-af41-01af22f90cd6",
      "created_time": "2023-12-30T13:17:00.000Z",
      "last_edited_time": "2023-12-30T13:18:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1688221046081-1e318ab5d44a?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-29",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day99",
        "tags": [
          "行业概念",
          "NoSQL"
        ],
        "summary": "",
        "title": "Day99【概念解析】MongoDB",
        "status": "Published",
        "urlname": "05966e8d-2d37-4359-af41-01af22f90cd6",
        "updated": "2023-12-30 13:18:00"
      },
      "url": "https://www.notion.so/Day99-MongoDB-05966e8d2d374359af4101af22f90cd6",
      "public_url": "https://eachenkuang.notion.site/Day99-MongoDB-05966e8d2d374359af4101af22f90cd6"
    },
    {
      "object": "page",
      "id": "04ac4579-d4f8-49d4-b653-922a3886bc2f",
      "created_time": "2023-12-30T13:05:00.000Z",
      "last_edited_time": "2023-12-30T13:18:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1472847720459-21ede812f22a?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-30",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day100",
        "tags": [
          "行业概念",
          "NoSQL"
        ],
        "summary": "",
        "title": "Day100【概念解析】NoSQL",
        "status": "Published",
        "urlname": "04ac4579-d4f8-49d4-b653-922a3886bc2f",
        "updated": "2023-12-30 13:18:00"
      },
      "url": "https://www.notion.so/Day100-NoSQL-04ac4579d4f849d4b653922a3886bc2f",
      "public_url": "https://eachenkuang.notion.site/Day100-NoSQL-04ac4579d4f849d4b653922a3886bc2f"
    },
    {
      "object": "page",
      "id": "f5b9b26b-1453-4d4f-bdf9-d82cbe607d92",
      "created_time": "2023-12-29T12:12:00.000Z",
      "last_edited_time": "2023-12-29T12:14:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/Bin%20Log.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-29",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day98",
        "tags": [
          "行业概念",
          "MySQL"
        ],
        "summary": "",
        "title": "Day98【概念解析】Bin Log",
        "status": "Published",
        "urlname": "f5b9b26b-1453-4d4f-bdf9-d82cbe607d92",
        "updated": "2023-12-29 12:14:00"
      },
      "url": "https://www.notion.so/Day98-Bin-Log-f5b9b26b14534d4fbdf9d82cbe607d92",
      "public_url": "https://eachenkuang.notion.site/Day98-Bin-Log-f5b9b26b14534d4fbdf9d82cbe607d92"
    },
    {
      "object": "page",
      "id": "dfa743c9-c01d-435a-9339-c29995b7ca57",
      "created_time": "2023-12-29T08:10:00.000Z",
      "last_edited_time": "2023-12-29T11:56:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/%E4%B8%80%E9%81%93SQL%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-29",
        "type": "Post",
        "category": "技术分享",
        "slug": "a-sql-problem-thinking",
        "tags": [
          "SQL",
          "MySQL"
        ],
        "summary": "",
        "title": "[实践]一道SQL题引发的思考",
        "status": "Published",
        "urlname": "dfa743c9-c01d-435a-9339-c29995b7ca57",
        "updated": "2023-12-29 11:56:00"
      },
      "url": "https://www.notion.so/SQL-dfa743c9c01d435a9339c29995b7ca57",
      "public_url": "https://eachenkuang.notion.site/SQL-dfa743c9c01d435a9339c29995b7ca57"
    },
    {
      "object": "page",
      "id": "fdc6b065-8f6a-4b0d-985f-4cf43664b2b2",
      "created_time": "2023-12-27T10:24:00.000Z",
      "last_edited_time": "2023-12-27T10:26:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/202312271807612.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-27",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day97",
        "tags": [
          "行业概念",
          "分析"
        ],
        "summary": "",
        "title": "Day97【概念解析】SWOT Analysis",
        "status": "Published",
        "urlname": "fdc6b065-8f6a-4b0d-985f-4cf43664b2b2",
        "updated": "2023-12-27 10:26:00"
      },
      "url": "https://www.notion.so/Day97-SWOT-Analysis-fdc6b0658f6a4b0d985f4cf43664b2b2",
      "public_url": "https://eachenkuang.notion.site/Day97-SWOT-Analysis-fdc6b0658f6a4b0d985f4cf43664b2b2"
    },
    {
      "object": "page",
      "id": "a657dc01-1842-48f0-99f0-1eec78437ce0",
      "created_time": "2023-12-27T08:54:00.000Z",
      "last_edited_time": "2023-12-27T09:56:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/%E8%B0%88Java%E4%B8%AD%E7%9A%84%E6%AF%94%E8%BE%83.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-27",
        "type": "Post",
        "category": "技术分享",
        "slug": "java-compare",
        "tags": [
          "Java"
        ],
        "summary": "",
        "title": "[实践]谈Java中的比较",
        "status": "Published",
        "urlname": "a657dc01-1842-48f0-99f0-1eec78437ce0",
        "updated": "2023-12-27 09:56:00"
      },
      "url": "https://www.notion.so/Java-a657dc01184248f099f01eec78437ce0",
      "public_url": "https://eachenkuang.notion.site/Java-a657dc01184248f099f01eec78437ce0"
    },
    {
      "object": "page",
      "id": "9b2cbca7-67d1-4084-8439-fa2631cb762e",
      "created_time": "2023-12-26T01:40:00.000Z",
      "last_edited_time": "2023-12-27T10:26:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/PEST%20Analysis.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-26",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day96",
        "tags": [
          "行业概念",
          "分析"
        ],
        "summary": "",
        "title": "Day96【概念解析】PEST Analysis",
        "status": "Published",
        "urlname": "9b2cbca7-67d1-4084-8439-fa2631cb762e",
        "updated": "2023-12-27 10:26:00"
      },
      "url": "https://www.notion.so/Day96-PEST-Analysis-9b2cbca767d140848439fa2631cb762e",
      "public_url": "https://eachenkuang.notion.site/Day96-PEST-Analysis-9b2cbca767d140848439fa2631cb762e"
    },
    {
      "object": "page",
      "id": "cc986261-bc28-4f37-8493-883dd3bcf140",
      "created_time": "2023-12-25T12:23:00.000Z",
      "last_edited_time": "2023-12-25T12:25:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/InnoDB%20Monitors.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-25",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day95",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day95【概念解析】InnoDB Monitors",
        "status": "Published",
        "urlname": "cc986261-bc28-4f37-8493-883dd3bcf140",
        "updated": "2023-12-25 12:25:00"
      },
      "url": "https://www.notion.so/Day95-InnoDB-Monitors-cc986261bc284f378493883dd3bcf140",
      "public_url": "https://eachenkuang.notion.site/Day95-InnoDB-Monitors-cc986261bc284f378493883dd3bcf140"
    },
    {
      "object": "page",
      "id": "2729d946-80f9-4140-8e72-966a2b1e8283",
      "created_time": "2023-12-25T11:58:00.000Z",
      "last_edited_time": "2023-12-25T12:01:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/InnoDB%20Checkpoints.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-24",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day94",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day94【概念解析】InnoDB Checkpoints",
        "status": "Published",
        "urlname": "2729d946-80f9-4140-8e72-966a2b1e8283",
        "updated": "2023-12-25 12:01:00"
      },
      "url": "https://www.notion.so/Day94-InnoDB-Checkpoints-2729d94680f941408e72966a2b1e8283",
      "public_url": "https://eachenkuang.notion.site/Day94-InnoDB-Checkpoints-2729d94680f941408e72966a2b1e8283"
    },
    {
      "object": "page",
      "id": "f0baef65-459b-42b1-a40d-47199f028309",
      "created_time": "2023-12-23T04:03:00.000Z",
      "last_edited_time": "2023-12-23T04:05:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/File%20Space%20Management.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-23",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day93",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day93【概念解析】File Space Management",
        "status": "Published",
        "urlname": "f0baef65-459b-42b1-a40d-47199f028309",
        "updated": "2023-12-23 04:05:00"
      },
      "url": "https://www.notion.so/Day93-File-Space-Management-f0baef65459b42b1a40d47199f028309",
      "public_url": "https://eachenkuang.notion.site/Day93-File-Space-Management-f0baef65459b42b1a40d47199f028309"
    },
    {
      "object": "page",
      "id": "5519ed7b-ce9d-4e4d-acd3-f5039d58c34d",
      "created_time": "2023-12-22T12:02:00.000Z",
      "last_edited_time": "2023-12-22T12:05:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/InnoDB%20Disk%20I_O.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-22",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day92",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day92【概念解析】InnoDB Disk I/O",
        "status": "Published",
        "urlname": "5519ed7b-ce9d-4e4d-acd3-f5039d58c34d",
        "updated": "2023-12-22 12:05:00"
      },
      "url": "https://www.notion.so/Day92-InnoDB-Disk-I-O-5519ed7bce9d4e4dacd3f5039d58c34d",
      "public_url": "https://eachenkuang.notion.site/Day92-InnoDB-Disk-I-O-5519ed7bce9d4e4dacd3f5039d58c34d"
    },
    {
      "object": "page",
      "id": "a379bc15-440b-42a6-9d06-369c4cdc17c6",
      "created_time": "2023-12-22T11:32:00.000Z",
      "last_edited_time": "2023-12-22T12:05:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/InnoDB%20Limits.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-21",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day91",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day91【概念解析】 InnoDB Limits",
        "status": "Published",
        "urlname": "a379bc15-440b-42a6-9d06-369c4cdc17c6",
        "updated": "2023-12-22 12:05:00"
      },
      "url": "https://www.notion.so/Day91-InnoDB-Limits-a379bc15440b42a69d06369c4cdc17c6",
      "public_url": "https://eachenkuang.notion.site/Day91-InnoDB-Limits-a379bc15440b42a69d06369c4cdc17c6"
    },
    {
      "object": "page",
      "id": "7f0e9c68-f40d-44c7-a58b-10cf142c14f0",
      "created_time": "2023-12-20T04:54:00.000Z",
      "last_edited_time": "2023-12-20T04:57:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/Transaction%20Scheduling.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-20",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day90",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day90【概念解析】Transaction Scheduling",
        "status": "Published",
        "urlname": "7f0e9c68-f40d-44c7-a58b-10cf142c14f0",
        "updated": "2023-12-20 04:57:00"
      },
      "url": "https://www.notion.so/Day90-Transaction-Scheduling-7f0e9c68f40d44c7a58b10cf142c14f0",
      "public_url": "https://eachenkuang.notion.site/Day90-Transaction-Scheduling-7f0e9c68f40d44c7a58b10cf142c14f0"
    },
    {
      "object": "page",
      "id": "8a43e44a-4180-4259-aa33-555a396c4107",
      "created_time": "2023-12-18T12:41:00.000Z",
      "last_edited_time": "2023-12-20T04:56:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/How%20to%20Minimize%20and%20Handle%20Deadlocks.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-19",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day89",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day89 【概念解析】How to Minimize and Handle Deadlocks",
        "status": "Published",
        "urlname": "8a43e44a-4180-4259-aa33-555a396c4107",
        "updated": "2023-12-20 04:56:00"
      },
      "url": "https://www.notion.so/Day89-How-to-Minimize-and-Handle-Deadlocks-8a43e44a41804259aa33555a396c4107",
      "public_url": "https://eachenkuang.notion.site/Day89-How-to-Minimize-and-Handle-Deadlocks-8a43e44a41804259aa33555a396c4107"
    },
    {
      "object": "page",
      "id": "e49a71ec-c929-47bf-8116-aab954b01885",
      "created_time": "2023-12-18T12:13:00.000Z",
      "last_edited_time": "2023-12-22T08:33:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1543906965-f9520aa2ed8a?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-22",
        "type": "Post",
        "category": "技术分享",
        "slug": "unsplash",
        "tags": [
          "工具",
          "开发"
        ],
        "summary": "最近发现一个不错的网站封面制作的网站——《https://coverview.vercel.app/》，通过使用它，我生成了非常多的自定义的图片封面。一次偶然间，发现里面的图片都是 unsplash 提供的。为何我不试试看自己实现一个获取 unsplash 免费图片的接口呢？于是就有了这篇文章。",
        "title": "[分享]unsplash免费图片接口使用与实战",
        "status": "Published",
        "urlname": "e49a71ec-c929-47bf-8116-aab954b01885",
        "updated": "2023-12-22 08:33:00"
      },
      "url": "https://www.notion.so/unsplash-e49a71ecc92947bf8116aab954b01885",
      "public_url": "https://eachenkuang.notion.site/unsplash-e49a71ecc92947bf8116aab954b01885"
    },
    {
      "object": "page",
      "id": "1bc8c4f5-5de3-4b41-a82a-c96d8ba57c72",
      "created_time": "2023-12-18T08:32:00.000Z",
      "last_edited_time": "2023-12-20T04:56:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-18",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day88",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day88 【概念解析】死锁检测",
        "status": "Published",
        "urlname": "1bc8c4f5-5de3-4b41-a82a-c96d8ba57c72",
        "updated": "2023-12-20 04:56:00"
      },
      "url": "https://www.notion.so/Day88-1bc8c4f55de34b41a82ac96d8ba57c72",
      "public_url": "https://eachenkuang.notion.site/Day88-1bc8c4f55de34b41a82ac96d8ba57c72"
    },
    {
      "object": "page",
      "id": "1315595e-fbbf-446e-8ee0-32c2aa4dc2ca",
      "created_time": "2023-12-17T09:51:00.000Z",
      "last_edited_time": "2023-12-20T04:56:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/MySQL%E6%AD%BB%E9%94%81%E5%AE%9E%E4%BE%8B.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-17",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day87",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day87 【概念解析】MySQL死锁实例",
        "status": "Published",
        "urlname": "1315595e-fbbf-446e-8ee0-32c2aa4dc2ca",
        "updated": "2023-12-20 04:56:00"
      },
      "url": "https://www.notion.so/Day87-MySQL-1315595efbbf446e8ee032c2aa4dc2ca",
      "public_url": "https://eachenkuang.notion.site/Day87-MySQL-1315595efbbf446e8ee032c2aa4dc2ca"
    },
    {
      "object": "page",
      "id": "4474cf12-17c3-4237-b7bd-7f6730b09481",
      "created_time": "2023-12-16T11:44:00.000Z",
      "last_edited_time": "2023-12-20T04:56:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/Phantom%20Rows.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-16",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day86",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day86【概念解析】Phantom Rows",
        "status": "Published",
        "urlname": "4474cf12-17c3-4237-b7bd-7f6730b09481",
        "updated": "2023-12-20 04:56:00"
      },
      "url": "https://www.notion.so/Day86-Phantom-Rows-4474cf1217c34237b7bd7f6730b09481",
      "public_url": "https://eachenkuang.notion.site/Day86-Phantom-Rows-4474cf1217c34237b7bd7f6730b09481"
    },
    {
      "object": "page",
      "id": "751b1aff-d2cb-49d4-889f-deed17bbefd4",
      "created_time": "2023-12-15T01:29:00.000Z",
      "last_edited_time": "2023-12-20T04:56:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/Deadlocks%20in%20InnoDB.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-15",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day85",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day85【概念解析】Deadlocks in InnoDB",
        "status": "Published",
        "urlname": "751b1aff-d2cb-49d4-889f-deed17bbefd4",
        "updated": "2023-12-20 04:56:00"
      },
      "url": "https://www.notion.so/Day85-Deadlocks-in-InnoDB-751b1affd2cb49d4889fdeed17bbefd4",
      "public_url": "https://eachenkuang.notion.site/Day85-Deadlocks-in-InnoDB-751b1affd2cb49d4889fdeed17bbefd4"
    },
    {
      "object": "page",
      "id": "facd9060-c655-4456-a316-b930174e50db",
      "created_time": "2023-12-14T06:13:00.000Z",
      "last_edited_time": "2023-12-20T04:56:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/Locks%20Set%20by%20Statement.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-14",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day84",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day84【概念解析】Locks Set by Statement",
        "status": "Published",
        "urlname": "facd9060-c655-4456-a316-b930174e50db",
        "updated": "2023-12-20 04:56:00"
      },
      "url": "https://www.notion.so/Day84-Locks-Set-by-Statement-facd9060c6554456a316b930174e50db",
      "public_url": "https://eachenkuang.notion.site/Day84-Locks-Set-by-Statement-facd9060c6554456a316b930174e50db"
    },
    {
      "object": "page",
      "id": "27aef270-5c06-4a70-8909-76e6905ea06d",
      "created_time": "2023-12-13T12:03:00.000Z",
      "last_edited_time": "2023-12-13T12:33:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/%E8%B0%88%E8%B7%91%E6%AD%A5.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🏃🏻"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-13",
        "type": "Post",
        "category": "三省吾身",
        "slug": "about-running",
        "tags": [
          "思考",
          "跑步",
          "运动"
        ],
        "summary": "很久没有写日记了，打算以“跑步”为话题展开谈谈。",
        "title": "[杂谈]谈跑步",
        "status": "Published",
        "urlname": "27aef270-5c06-4a70-8909-76e6905ea06d",
        "updated": "2023-12-13 12:33:00"
      },
      "url": "https://www.notion.so/27aef2705c064a70890976e6905ea06d",
      "public_url": "https://eachenkuang.notion.site/27aef2705c064a70890976e6905ea06d"
    },
    {
      "object": "page",
      "id": "34716a96-cf51-4341-8b0a-5adc77309838",
      "created_time": "2023-12-13T08:13:00.000Z",
      "last_edited_time": "2023-12-20T04:56:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/Locking%20Read.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-13",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day83",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day83【概念解析】 Locking Read",
        "status": "Published",
        "urlname": "34716a96-cf51-4341-8b0a-5adc77309838",
        "updated": "2023-12-20 04:56:00"
      },
      "url": "https://www.notion.so/Day83-Locking-Read-34716a96cf5143418b0a5adc77309838",
      "public_url": "https://eachenkuang.notion.site/Day83-Locking-Read-34716a96cf5143418b0a5adc77309838"
    },
    {
      "object": "page",
      "id": "6bfc9cbd-11f7-4230-b508-305a460af8ca",
      "created_time": "2023-12-12T02:21:00.000Z",
      "last_edited_time": "2023-12-12T02:25:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/Consistent%20Read.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-12",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day82",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day82 【概念解析】Consistent Read",
        "status": "Published",
        "urlname": "6bfc9cbd-11f7-4230-b508-305a460af8ca",
        "updated": "2023-12-12 02:25:00"
      },
      "url": "https://www.notion.so/Day82-Consistent-Read-6bfc9cbd11f74230b508305a460af8ca",
      "public_url": "https://eachenkuang.notion.site/Day82-Consistent-Read-6bfc9cbd11f74230b508305a460af8ca"
    },
    {
      "object": "page",
      "id": "02fb2da3-a36a-4f29-bb0e-02203e544821",
      "created_time": "2023-12-11T12:06:00.000Z",
      "last_edited_time": "2023-12-11T12:09:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/Autocommit%2C%20Commit%2C%20and%20Rollback.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-11",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day81",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day81【概念解析】Autocommit, Commit, and Rollback",
        "status": "Published",
        "urlname": "02fb2da3-a36a-4f29-bb0e-02203e544821",
        "updated": "2023-12-11 12:09:00"
      },
      "url": "https://www.notion.so/Day81-Autocommit-Commit-and-Rollback-02fb2da3a36a4f29bb0e02203e544821",
      "public_url": "https://eachenkuang.notion.site/Day81-Autocommit-Commit-and-Rollback-02fb2da3a36a4f29bb0e02203e544821"
    },
    {
      "object": "page",
      "id": "2a4573be-2451-438d-89b2-1b5b4906d687",
      "created_time": "2023-12-11T04:58:00.000Z",
      "last_edited_time": "2023-12-11T12:08:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/DML%20DDL%20DCL.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-10",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day80",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day80【概念解析】 DML，DDL，DCL",
        "status": "Published",
        "urlname": "2a4573be-2451-438d-89b2-1b5b4906d687",
        "updated": "2023-12-11 12:08:00"
      },
      "url": "https://www.notion.so/Day80-DML-DDL-DCL-2a4573be2451438d89b21b5b4906d687",
      "public_url": "https://eachenkuang.notion.site/Day80-DML-DDL-DCL-2a4573be2451438d89b21b5b4906d687"
    },
    {
      "object": "page",
      "id": "06d5189c-b49b-47ca-a000-b58401fdb847",
      "created_time": "2023-12-10T11:31:00.000Z",
      "last_edited_time": "2023-12-14T01:48:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/Next-key%20Lock.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-09",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day79",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day79【概念解析】Next-key Lock",
        "status": "Published",
        "urlname": "06d5189c-b49b-47ca-a000-b58401fdb847",
        "updated": "2023-12-14 01:48:00"
      },
      "url": "https://www.notion.so/Day79-Next-key-Lock-06d5189cb49b47caa000b58401fdb847",
      "public_url": "https://eachenkuang.notion.site/Day79-Next-key-Lock-06d5189cb49b47caa000b58401fdb847"
    },
    {
      "object": "page",
      "id": "e576558c-e12f-49fa-99ab-5b71add06e02",
      "created_time": "2023-12-08T12:22:00.000Z",
      "last_edited_time": "2023-12-11T05:03:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/Record%20Lock.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-08",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day78",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day78【概念解析】Record Lock",
        "status": "Published",
        "urlname": "e576558c-e12f-49fa-99ab-5b71add06e02",
        "updated": "2023-12-11 05:03:00"
      },
      "url": "https://www.notion.so/Day78-Record-Lock-e576558ce12f49fa99ab5b71add06e02",
      "public_url": "https://eachenkuang.notion.site/Day78-Record-Lock-e576558ce12f49fa99ab5b71add06e02"
    },
    {
      "object": "page",
      "id": "ef64726e-d448-4f5f-9b89-8e0bda9a6d93",
      "created_time": "2023-12-08T12:22:00.000Z",
      "last_edited_time": "2023-12-29T06:46:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://source.unsplash.com/random/720x480/?encryption"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-29",
        "type": "Post",
        "category": "",
        "slug": "",
        "tags": [],
        "summary": "",
        "title": "MySQL知识点总结",
        "status": "Draft",
        "urlname": "ef64726e-d448-4f5f-9b89-8e0bda9a6d93",
        "updated": "2023-12-29 06:46:00"
      },
      "url": "https://www.notion.so/MySQL-ef64726ed4484f5f9b898e0bda9a6d93",
      "public_url": "https://eachenkuang.notion.site/MySQL-ef64726ed4484f5f9b898e0bda9a6d93"
    },
    {
      "object": "page",
      "id": "da23251d-5135-46d2-be88-ce55299e6d27",
      "created_time": "2023-12-07T12:39:00.000Z",
      "last_edited_time": "2023-12-11T04:59:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/gap%20lock.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-07",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day77",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day77【概念解析】Gap Lock",
        "status": "Published",
        "urlname": "da23251d-5135-46d2-be88-ce55299e6d27",
        "updated": "2023-12-11 04:59:00"
      },
      "url": "https://www.notion.so/Day77-Gap-Lock-da23251d513546d2be88ce55299e6d27",
      "public_url": "https://eachenkuang.notion.site/Day77-Gap-Lock-da23251d513546d2be88ce55299e6d27"
    },
    {
      "object": "page",
      "id": "655028a0-9cbb-4736-bf8f-ad946efae144",
      "created_time": "2023-12-07T11:54:00.000Z",
      "last_edited_time": "2023-12-07T12:01:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/Intention%20Lock.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-06",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day76",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day76 【概念解析】 Intention Lock",
        "status": "Published",
        "urlname": "655028a0-9cbb-4736-bf8f-ad946efae144",
        "updated": "2023-12-07 12:01:00"
      },
      "url": "https://www.notion.so/Day76-Intention-Lock-655028a09cbb4736bf8fad946efae144",
      "public_url": "https://eachenkuang.notion.site/Day76-Intention-Lock-655028a09cbb4736bf8fad946efae144"
    },
    {
      "object": "page",
      "id": "7ab75082-9d83-4342-9e76-eaf9676b0d76",
      "created_time": "2023-12-06T12:19:00.000Z",
      "last_edited_time": "2023-12-07T12:01:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/share%20lock%20and%20exclusive%20lock.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-05",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day75",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day75【概念解析】共享锁和排他锁",
        "status": "Published",
        "urlname": "7ab75082-9d83-4342-9e76-eaf9676b0d76",
        "updated": "2023-12-07 12:01:00"
      },
      "url": "https://www.notion.so/Day75-7ab750829d8343429e76eaf9676b0d76",
      "public_url": "https://eachenkuang.notion.site/Day75-7ab750829d8343429e76eaf9676b0d76"
    },
    {
      "object": "page",
      "id": "60471d1c-ad80-4eae-aafc-d697a4ce008d",
      "created_time": "2023-12-06T11:56:00.000Z",
      "last_edited_time": "2023-12-07T12:01:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/innodb%20locking.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-04",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day74",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day74【概念解析】InnoDB 锁",
        "status": "Published",
        "urlname": "60471d1c-ad80-4eae-aafc-d697a4ce008d",
        "updated": "2023-12-07 12:01:00"
      },
      "url": "https://www.notion.so/Day74-InnoDB-60471d1cad804eaeaafcd697a4ce008d",
      "public_url": "https://eachenkuang.notion.site/Day74-InnoDB-60471d1cad804eaeaafcd697a4ce008d"
    },
    {
      "object": "page",
      "id": "35316dbc-72aa-4f72-8fd5-c882c1ab9689",
      "created_time": "2023-12-05T12:40:00.000Z",
      "last_edited_time": "2023-12-05T12:43:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/InnoDB%20Temporary%20Tablespace%20.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-03",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day73",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day73 【概念解析】InnoDB Temporary Tablespace ",
        "status": "Published",
        "urlname": "35316dbc-72aa-4f72-8fd5-c882c1ab9689",
        "updated": "2023-12-05 12:43:00"
      },
      "url": "https://www.notion.so/Day73-InnoDB-Temporary-Tablespace-35316dbc72aa4f728fd5c882c1ab9689",
      "public_url": "https://eachenkuang.notion.site/Day73-InnoDB-Temporary-Tablespace-35316dbc72aa4f728fd5c882c1ab9689"
    },
    {
      "object": "page",
      "id": "36f26696-ded6-49ae-89a5-c4882c94987e",
      "created_time": "2023-12-05T11:50:00.000Z",
      "last_edited_time": "2023-12-05T11:53:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/InnoDB%20Undo%20Tablespace.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-02",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day72",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day72【概念解析】InnoDB Undo Tablespace",
        "status": "Published",
        "urlname": "36f26696-ded6-49ae-89a5-c4882c94987e",
        "updated": "2023-12-05 11:53:00"
      },
      "url": "https://www.notion.so/Day72-InnoDB-Undo-Tablespace-36f26696ded649ae89a5c4882c94987e",
      "public_url": "https://eachenkuang.notion.site/Day72-InnoDB-Undo-Tablespace-36f26696ded649ae89a5c4882c94987e"
    },
    {
      "object": "page",
      "id": "29299214-e0fb-487f-9cd4-64e9725b2c69",
      "created_time": "2023-12-01T12:08:00.000Z",
      "last_edited_time": "2023-12-01T12:12:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/InnoDB%20General%20Tablespace.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-12-01",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day71",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day71【概念解析】 InnoDB General Tablespace",
        "status": "Published",
        "urlname": "29299214-e0fb-487f-9cd4-64e9725b2c69",
        "updated": "2023-12-01 12:12:00"
      },
      "url": "https://www.notion.so/Day71-InnoDB-General-Tablespace-29299214e0fb487f9cd464e9725b2c69",
      "public_url": "https://eachenkuang.notion.site/Day71-InnoDB-General-Tablespace-29299214e0fb487f9cd464e9725b2c69"
    },
    {
      "object": "page",
      "id": "8c793091-9652-4897-9231-d4a0a48bf13f",
      "created_time": "2023-11-30T11:51:00.000Z",
      "last_edited_time": "2023-12-31T14:36:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/summary_202311_cover.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-30",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202311",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2023年11月",
        "status": "Published",
        "urlname": "8c793091-9652-4897-9231-d4a0a48bf13f",
        "updated": "2023-12-31 14:36:00"
      },
      "url": "https://www.notion.so/2023-11-8c793091965248979231d4a0a48bf13f",
      "public_url": "https://eachenkuang.notion.site/2023-11-8c793091965248979231d4a0a48bf13f"
    },
    {
      "object": "page",
      "id": "8c2141a8-6880-47be-9287-25410702723b",
      "created_time": "2023-11-30T04:44:00.000Z",
      "last_edited_time": "2023-12-01T12:08:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/InnoDB%20File-Per-Table%20Tablespace.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-30",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day70",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day70【概念解析】InnoDB File-Per-Table Tablespace",
        "status": "Published",
        "urlname": "8c2141a8-6880-47be-9287-25410702723b",
        "updated": "2023-12-01 12:08:00"
      },
      "url": "https://www.notion.so/Day70-InnoDB-File-Per-Table-Tablespace-8c2141a8688047be928725410702723b",
      "public_url": "https://eachenkuang.notion.site/Day70-InnoDB-File-Per-Table-Tablespace-8c2141a8688047be928725410702723b"
    },
    {
      "object": "page",
      "id": "eb1395d6-8e7a-4eb1-a91b-1dd6e79063e9",
      "created_time": "2023-11-29T05:09:00.000Z",
      "last_edited_time": "2023-11-29T05:11:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/InnoDB%20System%20Tablespace.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-29",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day69",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day69【概念解析】InnoDB System Tablespace",
        "status": "Published",
        "urlname": "eb1395d6-8e7a-4eb1-a91b-1dd6e79063e9",
        "updated": "2023-11-29 05:11:00"
      },
      "url": "https://www.notion.so/Day69-InnoDB-System-Tablespace-eb1395d68e7a4eb1a91b1dd6e79063e9",
      "public_url": "https://eachenkuang.notion.site/Day69-InnoDB-System-Tablespace-eb1395d68e7a4eb1a91b1dd6e79063e9"
    },
    {
      "object": "page",
      "id": "182b509a-8264-41d6-a76f-885fc47f2642",
      "created_time": "2023-11-29T04:32:00.000Z",
      "last_edited_time": "2023-11-29T04:36:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/InnoDB%20Tablespace.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-28",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day68",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day68 【概念解析】InnoDB Tablespace",
        "status": "Published",
        "urlname": "182b509a-8264-41d6-a76f-885fc47f2642",
        "updated": "2023-11-29 04:36:00"
      },
      "url": "https://www.notion.so/Day68-InnoDB-Tablespace-182b509a826441d6a76f885fc47f2642",
      "public_url": "https://eachenkuang.notion.site/Day68-InnoDB-Tablespace-182b509a826441d6a76f885fc47f2642"
    },
    {
      "object": "page",
      "id": "94e33f21-1481-481a-a107-6b254db2817c",
      "created_time": "2023-11-28T12:46:00.000Z",
      "last_edited_time": "2023-11-29T05:12:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/MySQL%20Index.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-27",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day67",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day67【概念解析】 MySQL Index",
        "status": "Published",
        "urlname": "94e33f21-1481-481a-a107-6b254db2817c",
        "updated": "2023-11-29 05:12:00"
      },
      "url": "https://www.notion.so/Day67-MySQL-Index-94e33f211481481aa1076b254db2817c",
      "public_url": "https://eachenkuang.notion.site/Day67-MySQL-Index-94e33f211481481aa1076b254db2817c"
    },
    {
      "object": "page",
      "id": "ce076f3a-537a-48de-8331-0b2d01a2b455",
      "created_time": "2023-11-27T03:01:00.000Z",
      "last_edited_time": "2023-11-27T03:04:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/InnoDB%20Data%20Dictionary.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-26",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day66",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day66【概念解析】InnoDB Data Dictionary",
        "status": "Published",
        "urlname": "ce076f3a-537a-48de-8331-0b2d01a2b455",
        "updated": "2023-11-27 03:04:00"
      },
      "url": "https://www.notion.so/Day66-InnoDB-Data-Dictionary-ce076f3a537a48de83310b2d01a2b455",
      "public_url": "https://eachenkuang.notion.site/Day66-InnoDB-Data-Dictionary-ce076f3a537a48de83310b2d01a2b455"
    },
    {
      "object": "page",
      "id": "5f02c699-29b2-4c1a-8464-a802364e6024",
      "created_time": "2023-11-26T03:33:00.000Z",
      "last_edited_time": "2023-11-27T03:02:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/InnoDB%20Doublewrite%20Buffer.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-25",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day65",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day65【概念解析】InnoDB Doublewrite Buffer",
        "status": "Published",
        "urlname": "5f02c699-29b2-4c1a-8464-a802364e6024",
        "updated": "2023-11-27 03:02:00"
      },
      "url": "https://www.notion.so/Day65-InnoDB-Doublewrite-Buffer-5f02c69929b24c1a8464a802364e6024",
      "public_url": "https://eachenkuang.notion.site/Day65-InnoDB-Doublewrite-Buffer-5f02c69929b24c1a8464a802364e6024"
    },
    {
      "object": "page",
      "id": "9c82cf19-8fa4-48fa-ad46-77e0652d29c7",
      "created_time": "2023-11-24T03:02:00.000Z",
      "last_edited_time": "2023-11-24T03:06:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/innodb%20undo%20log.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-24",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day64",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day64【概念解析】InnoDB Undo Log",
        "status": "Published",
        "urlname": "9c82cf19-8fa4-48fa-ad46-77e0652d29c7",
        "updated": "2023-11-24 03:06:00"
      },
      "url": "https://www.notion.so/Day64-InnoDB-Undo-Log-9c82cf198fa448faad4677e0652d29c7",
      "public_url": "https://eachenkuang.notion.site/Day64-InnoDB-Undo-Log-9c82cf198fa448faad4677e0652d29c7"
    },
    {
      "object": "page",
      "id": "736ee81e-b82a-4b23-acd2-79554d2e1a40",
      "created_time": "2023-11-23T05:29:00.000Z",
      "last_edited_time": "2023-11-24T03:06:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/innodb%20redo%20log.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-23",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day63",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day63【概念解析】InnoDB Redo Log",
        "status": "Published",
        "urlname": "736ee81e-b82a-4b23-acd2-79554d2e1a40",
        "updated": "2023-11-24 03:06:00"
      },
      "url": "https://www.notion.so/Day63-InnoDB-Redo-Log-736ee81eb82a4b23acd279554d2e1a40",
      "public_url": "https://eachenkuang.notion.site/Day63-InnoDB-Redo-Log-736ee81eb82a4b23acd279554d2e1a40"
    },
    {
      "object": "page",
      "id": "e9f2dc4c-88cf-4d15-9dc5-e82a4432a018",
      "created_time": "2023-11-22T02:27:00.000Z",
      "last_edited_time": "2023-11-22T02:30:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/innodb%20log%20buffer.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-22",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day62",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day62【概念解析】InnoDB Log Buffer",
        "status": "Published",
        "urlname": "e9f2dc4c-88cf-4d15-9dc5-e82a4432a018",
        "updated": "2023-11-22 02:30:00"
      },
      "url": "https://www.notion.so/Day62-InnoDB-Log-Buffer-e9f2dc4c88cf4d159dc5e82a4432a018",
      "public_url": "https://eachenkuang.notion.site/Day62-InnoDB-Log-Buffer-e9f2dc4c88cf4d159dc5e82a4432a018"
    },
    {
      "object": "page",
      "id": "ca64831c-9fae-4a56-af56-14cf15a04af4",
      "created_time": "2023-11-21T12:56:00.000Z",
      "last_edited_time": "2023-11-22T02:30:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/InnoDB%20Adaptive%20Hash%20Index.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-21",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day61",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day61【概念解析】InnoDB AHI",
        "status": "Published",
        "urlname": "ca64831c-9fae-4a56-af56-14cf15a04af4",
        "updated": "2023-11-22 02:30:00"
      },
      "url": "https://www.notion.so/Day61-InnoDB-AHI-ca64831c9fae4a56af5614cf15a04af4",
      "public_url": "https://eachenkuang.notion.site/Day61-InnoDB-AHI-ca64831c9fae4a56af5614cf15a04af4"
    },
    {
      "object": "page",
      "id": "9d0ce237-43af-4dce-8f99-4f86a900b26e",
      "created_time": "2023-11-20T12:05:00.000Z",
      "last_edited_time": "2023-11-20T12:10:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/innodb%20change%20buffer.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-20",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day60",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day60【概念解析】InnoDB Change Buffer",
        "status": "Published",
        "urlname": "9d0ce237-43af-4dce-8f99-4f86a900b26e",
        "updated": "2023-11-20 12:10:00"
      },
      "url": "https://www.notion.so/Day60-InnoDB-Change-Buffer-9d0ce23743af4dce8f994f86a900b26e",
      "public_url": "https://eachenkuang.notion.site/Day60-InnoDB-Change-Buffer-9d0ce23743af4dce8f994f86a900b26e"
    },
    {
      "object": "page",
      "id": "eee550ce-866f-41ee-a83c-387ac8b72c92",
      "created_time": "2023-11-20T06:57:00.000Z",
      "last_edited_time": "2023-11-20T07:01:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/innodb%20buffer%20pool.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-19",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day59",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day59【概念解析】InnoDB Buffer Pool",
        "status": "Published",
        "urlname": "eee550ce-866f-41ee-a83c-387ac8b72c92",
        "updated": "2023-11-20 07:01:00"
      },
      "url": "https://www.notion.so/Day59-InnoDB-Buffer-Pool-eee550ce866f41eea83c387ac8b72c92",
      "public_url": "https://eachenkuang.notion.site/Day59-InnoDB-Buffer-Pool-eee550ce866f41eea83c387ac8b72c92"
    },
    {
      "object": "page",
      "id": "87f02b71-13f2-4c9c-a648-34dcf7b5a0bd",
      "created_time": "2023-11-19T07:21:00.000Z",
      "last_edited_time": "2023-11-23T05:34:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/innoDB%20structure.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-18",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day58",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL",
          "数据库"
        ],
        "summary": "",
        "title": "Day58【概念解析】InnoDB架构设计",
        "status": "Published",
        "urlname": "87f02b71-13f2-4c9c-a648-34dcf7b5a0bd",
        "updated": "2023-11-23 05:34:00"
      },
      "url": "https://www.notion.so/Day58-InnoDB-87f02b7113f24c9ca64834dcf7b5a0bd",
      "public_url": "https://eachenkuang.notion.site/Day58-InnoDB-87f02b7113f24c9ca64834dcf7b5a0bd"
    },
    {
      "object": "page",
      "id": "e1fbca6a-fd99-46db-9c24-58ef0864224a",
      "created_time": "2023-11-17T06:25:00.000Z",
      "last_edited_time": "2023-11-19T03:31:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/mvcc.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-17",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day57",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "数据库"
        ],
        "summary": "",
        "title": "Day57 【概念解析】 MVCC",
        "status": "Published",
        "urlname": "e1fbca6a-fd99-46db-9c24-58ef0864224a",
        "updated": "2023-11-19 03:31:00"
      },
      "url": "https://www.notion.so/Day57-MVCC-e1fbca6afd9946db9c2458ef0864224a",
      "public_url": "https://eachenkuang.notion.site/Day57-MVCC-e1fbca6afd9946db9c2458ef0864224a"
    },
    {
      "object": "page",
      "id": "b8166475-7087-42de-ae6d-0322521b323a",
      "created_time": "2023-11-16T06:55:00.000Z",
      "last_edited_time": "2023-11-16T07:18:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/db_tx.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-16",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day56",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "数据库",
          "MySQL"
        ],
        "summary": "",
        "title": "Day56 【概念解析】 数据库事务",
        "status": "Published",
        "urlname": "b8166475-7087-42de-ae6d-0322521b323a",
        "updated": "2023-11-16 07:18:00"
      },
      "url": "https://www.notion.so/Day56-b8166475708742deae6d0322521b323a",
      "public_url": "https://eachenkuang.notion.site/Day56-b8166475708742deae6d0322521b323a"
    },
    {
      "object": "page",
      "id": "f563fe3c-8ecd-43ec-9b3a-3ebe17239f8e",
      "created_time": "2023-11-14T12:32:00.000Z",
      "last_edited_time": "2023-11-15T03:29:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/innodb.jpeg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-15",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day55",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day55 【概念解析】InnoDB",
        "status": "Published",
        "urlname": "f563fe3c-8ecd-43ec-9b3a-3ebe17239f8e",
        "updated": "2023-11-15 03:29:00"
      },
      "url": "https://www.notion.so/Day55-InnoDB-f563fe3c8ecd43ec9b3a3ebe17239f8e",
      "public_url": "https://eachenkuang.notion.site/Day55-InnoDB-f563fe3c8ecd43ec9b3a3ebe17239f8e"
    },
    {
      "object": "page",
      "id": "e1225d6a-d281-440a-918d-b165e0dfac69",
      "created_time": "2023-11-14T02:12:00.000Z",
      "last_edited_time": "2023-11-16T14:20:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/MyISAM.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-14",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day54",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day54 【概念解析】MyISAM",
        "status": "Published",
        "urlname": "e1225d6a-d281-440a-918d-b165e0dfac69",
        "updated": "2023-11-16 14:20:00"
      },
      "url": "https://www.notion.so/Day54-MyISAM-e1225d6ad281440a918db165e0dfac69",
      "public_url": "https://eachenkuang.notion.site/Day54-MyISAM-e1225d6ad281440a918db165e0dfac69"
    },
    {
      "object": "page",
      "id": "39aff7c0-c412-4bd0-a309-8739a1542c17",
      "created_time": "2023-11-13T12:58:00.000Z",
      "last_edited_time": "2023-11-15T03:27:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/database-engines.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-13",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day53",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL"
        ],
        "summary": "",
        "title": "Day53 【概念解析】MySQL存储引擎",
        "status": "Published",
        "urlname": "39aff7c0-c412-4bd0-a309-8739a1542c17",
        "updated": "2023-11-15 03:27:00"
      },
      "url": "https://www.notion.so/Day53-MySQL-39aff7c0c4124bd0a3098739a1542c17",
      "public_url": "https://eachenkuang.notion.site/Day53-MySQL-39aff7c0c4124bd0a3098739a1542c17"
    },
    {
      "object": "page",
      "id": "7fdb0733-a3f1-42dc-bc74-0a3421a3c5a3",
      "created_time": "2023-11-12T13:02:00.000Z",
      "last_edited_time": "2023-11-15T06:19:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/mysql-arch.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-12",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day52",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL",
          "SQL"
        ],
        "summary": "",
        "title": "Day52【概念解析】MySQL架构",
        "status": "Published",
        "urlname": "7fdb0733-a3f1-42dc-bc74-0a3421a3c5a3",
        "updated": "2023-11-15 06:19:00"
      },
      "url": "https://www.notion.so/Day52-MySQL-7fdb0733a3f142dcbc740a3421a3c5a3",
      "public_url": "https://eachenkuang.notion.site/Day52-MySQL-7fdb0733a3f142dcbc740a3421a3c5a3"
    },
    {
      "object": "page",
      "id": "62986b24-a3f1-4b6e-a44a-f18d332c8644",
      "created_time": "2023-11-12T03:44:00.000Z",
      "last_edited_time": "2023-11-12T03:55:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1662026911591-335639b11db6?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-11",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day51",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "MySQL",
          "SQL"
        ],
        "summary": "",
        "title": "Day51【概念解析】 MySQL",
        "status": "Published",
        "urlname": "62986b24-a3f1-4b6e-a44a-f18d332c8644",
        "updated": "2023-11-12 03:55:00"
      },
      "url": "https://www.notion.so/Day51-MySQL-62986b24a3f14b6ea44af18d332c8644",
      "public_url": "https://eachenkuang.notion.site/Day51-MySQL-62986b24a3f14b6ea44af18d332c8644"
    },
    {
      "object": "page",
      "id": "bacdfe9c-3249-4ccd-ae5a-73feadf296d5",
      "created_time": "2023-11-10T11:31:00.000Z",
      "last_edited_time": "2023-11-12T02:54:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1662027044921-6febc57a0c53?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-10",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day50",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "SQL"
        ],
        "summary": "",
        "title": "Day50【概念解析】SQL",
        "status": "Published",
        "urlname": "bacdfe9c-3249-4ccd-ae5a-73feadf296d5",
        "updated": "2023-11-12 02:54:00"
      },
      "url": "https://www.notion.so/Day50-SQL-bacdfe9c32494ccdae5a73feadf296d5",
      "public_url": "https://eachenkuang.notion.site/Day50-SQL-bacdfe9c32494ccdae5a73feadf296d5"
    },
    {
      "object": "page",
      "id": "c2f5659b-6463-4491-83fd-3d48a26330ec",
      "created_time": "2023-11-10T11:24:00.000Z",
      "last_edited_time": "2023-11-12T12:10:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1569547033055-1379ab87d439?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-09",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day49",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day49 【概念解析】访问者模式",
        "status": "Published",
        "urlname": "c2f5659b-6463-4491-83fd-3d48a26330ec",
        "updated": "2023-11-12 12:10:00"
      },
      "url": "https://www.notion.so/Day49-c2f5659b6463449183fd3d48a26330ec",
      "public_url": "https://eachenkuang.notion.site/Day49-c2f5659b6463449183fd3d48a26330ec"
    },
    {
      "object": "page",
      "id": "c366b1ea-ae10-4b95-b3b8-bc49b517487b",
      "created_time": "2023-11-09T07:24:00.000Z",
      "last_edited_time": "2025-02-20T12:00:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/elog%2Bnotion.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-16",
        "type": "Post",
        "category": "技术分享",
        "slug": "elog",
        "tags": [
          "建站",
          "工具",
          "必看精选"
        ],
        "summary": "",
        "title": "Elog+notion持续集成导出MD文件",
        "status": "Published",
        "urlname": "c366b1ea-ae10-4b95-b3b8-bc49b517487b",
        "updated": "2025-02-20 12:00:00"
      },
      "url": "https://www.notion.so/Elog-notion-MD-c366b1eaae104b95b3b8bc49b517487b",
      "public_url": "https://eachenkuang.notion.site/Elog-notion-MD-c366b1eaae104b95b3b8bc49b517487b"
    },
    {
      "object": "page",
      "id": "387b2c0d-afc4-4c75-b4f1-7844b7ffeacc",
      "created_time": "2023-11-08T13:26:00.000Z",
      "last_edited_time": "2023-11-08T13:27:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1626544827763-d516dce335e2?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-08",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day48",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day48【概念解析】模板方法",
        "status": "Published",
        "urlname": "387b2c0d-afc4-4c75-b4f1-7844b7ffeacc",
        "updated": "2023-11-08 13:27:00"
      },
      "url": "https://www.notion.so/Day48-387b2c0dafc44c75b4f17844b7ffeacc",
      "public_url": "https://eachenkuang.notion.site/Day48-387b2c0dafc44c75b4f17844b7ffeacc"
    },
    {
      "object": "page",
      "id": "d89272f7-2653-4485-acd9-2d0da738545c",
      "created_time": "2023-11-07T08:30:00.000Z",
      "last_edited_time": "2023-11-07T08:47:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1523875194681-bedd468c58bf?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-07",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day47",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day47 【概念解析】策略模式",
        "status": "Published",
        "urlname": "d89272f7-2653-4485-acd9-2d0da738545c",
        "updated": "2023-11-07 08:47:00"
      },
      "url": "https://www.notion.so/Day47-d89272f726534485acd92d0da738545c",
      "public_url": "https://eachenkuang.notion.site/Day47-d89272f726534485acd92d0da738545c"
    },
    {
      "object": "page",
      "id": "1aaaa6d6-26d0-498d-a4f6-95bcacac8f57",
      "created_time": "2023-11-07T02:26:00.000Z",
      "last_edited_time": "2023-11-07T03:06:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://source.unsplash.com/random/720x480/?encryption"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-07",
        "type": "Post",
        "category": "技术分享",
        "slug": "parametrize",
        "tags": [
          "推荐",
          "必看精选",
          "Python"
        ],
        "summary": "Parametrize是pytest测试框架中的一个强大特性，它允许我们为测试函数提供多组参数和预期结果，从而轻松地创建多个测试用例。这种方法提高了代码的可读性和可维护性，提高了测试覆盖率和测试效率。然而，参数过多时可能会导致测试函数的复杂性增加，且参数之间的依赖关系可能需要额外处理。Parametrize非常适用于测试同一个函数或方法在不同参数下的行为、创建大量相似的测试用例以及进行参数化的并行测试。",
        "title": "Pytest中的Parametrize：妙用与实践",
        "status": "Published",
        "urlname": "1aaaa6d6-26d0-498d-a4f6-95bcacac8f57",
        "updated": "2023-11-07 03:06:00"
      },
      "url": "https://www.notion.so/Pytest-Parametrize-1aaaa6d626d0498da4f695bcacac8f57",
      "public_url": "https://eachenkuang.notion.site/Pytest-Parametrize-1aaaa6d626d0498da4f695bcacac8f57"
    },
    {
      "object": "page",
      "id": "7ab7e26a-2540-402d-870c-dab572759979",
      "created_time": "2023-11-06T07:53:00.000Z",
      "last_edited_time": "2023-11-06T07:54:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1547016148-13c0aa169865?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-06",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day46",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day46 【概念解析】状态模式",
        "status": "Published",
        "urlname": "7ab7e26a-2540-402d-870c-dab572759979",
        "updated": "2023-11-06 07:54:00"
      },
      "url": "https://www.notion.so/Day46-7ab7e26a2540402d870cdab572759979",
      "public_url": "https://eachenkuang.notion.site/Day46-7ab7e26a2540402d870cdab572759979"
    },
    {
      "object": "page",
      "id": "74ad67a9-8873-469e-990a-1c80663b9fb6",
      "created_time": "2023-11-04T02:46:00.000Z",
      "last_edited_time": "2023-11-05T14:26:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1619884889432-b242fdee532a?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-05",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day45",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day45【概念解析】观察者模式",
        "status": "Published",
        "urlname": "74ad67a9-8873-469e-990a-1c80663b9fb6",
        "updated": "2023-11-05 14:26:00"
      },
      "url": "https://www.notion.so/Day45-74ad67a98873469e990a1c80663b9fb6",
      "public_url": "https://eachenkuang.notion.site/Day45-74ad67a98873469e990a1c80663b9fb6"
    },
    {
      "object": "page",
      "id": "bcb84456-5b0d-4bf3-8cd1-040bbcfe3505",
      "created_time": "2023-11-04T02:04:00.000Z",
      "last_edited_time": "2023-11-04T02:09:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/86f96968-f617-4740-a539-e383d7d7f980/jon-tyson-P2aOvMMUJnY-unsplash.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466SLJW53NI%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132554Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIDGmxxFWVtgHWs%2FwsDEeYDlXNE4ckGhEanLAxuEz8yAeAiEAum4GmT81ic7h93MeHxkPRhEq3zC%2BNZu6OeJDJsDdN2oqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDNJXRtFy5os1zMPkKyrcA2LHnCmbU7x9II3sqGW6XkPml10pbAeOfh5yvs0dFHV1sHlExEtwtVqJmARrLChdYn8LIU25le09eIbaSaskZI5uIaTc3kZZIOynnMeJHIFmh2smfc0rq3FxUonYEe7JHrahclc4RFwdeKeC6UN9Zp22S3jaifq2N3zUqdNYVNKhM3o5nolMoww%2BeuBz0t95xnbxkqDiGWoeQ8%2BMSEcwa%2Fi94n%2B92gRhxtYoGhYWb1v4YC47xPJPPfrKjAb%2B1d1WHagUdLmYtAGF5i0UvVXVgfyDRkCyKtVNtcCC4GZ1IevHn8kQc5ii9QNNGr7XXi%2Fi%2FM2UgTl5FLE0vSptY1Y%2Fmka5%2Bv0uCIWAHBfAs2d6p9raVuTl3eKb%2FQNbfev%2BT99F4BFQkBmdChd5ZZVojRuIoBf9vy9p8YApJC0PwzkoNoCw9PMav0pPJrRgC%2F38dEQJf1LHSlT9teUZzKKM0AyVHnTJT%2F4t6%2F91r%2F3d6VKNoO33AOwTh7PGaqV8XvI8cUd6shDYPOLvETHTP7lQHeYGneU5ZuyPAxIAzm7sonIziNvcTbMbYU7BKd5AmmDv5aI7VXw65jk4ZIvROy9RDZ5Io%2FlTMe6IyHoXoBxuq7kvjszeFxr0Blf57jnT4GeCMIWiqr8GOqUBLk7TXzWtyzzFRrIUMeoacESMHRtasEbPG1DxSaoMOzPT0bLxCTnDarLQo5uY8NrnsZk4xbp7EVaiTfkABbtKHmdAnhLnR354dBQbDxp193s916Nmw08vifi0aswKXsJpwRa9cO8Ravo5QDRwl%2BuCBddA3iSoN%2BK5a9IDzK%2BnkxwlnFlx2wGQi2ukDpsjOfvZLmPBprbznv6bv7ZiZ0rRRw77zNi%2B&X-Amz-Signature=73a9a8345cc2239f3e477f96d15c105d635cb0ab9398829ca37caff97c0249b6&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:54.132Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-04",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day44",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day44【概念解析】备忘录模式",
        "status": "Published",
        "urlname": "bcb84456-5b0d-4bf3-8cd1-040bbcfe3505",
        "updated": "2023-11-04 02:09:00"
      },
      "url": "https://www.notion.so/Day44-bcb844565b0d4bf38cd1040bbcfe3505",
      "public_url": "https://eachenkuang.notion.site/Day44-bcb844565b0d4bf38cd1040bbcfe3505"
    },
    {
      "object": "page",
      "id": "c971b9ef-29ed-4efc-a5cb-3ec44df3ecf1",
      "created_time": "2023-11-03T02:48:00.000Z",
      "last_edited_time": "2023-11-03T02:49:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1572879023364-ab4f53e9d5fa?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-03",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day43",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day43【概念解析】中介者模式",
        "status": "Published",
        "urlname": "c971b9ef-29ed-4efc-a5cb-3ec44df3ecf1",
        "updated": "2023-11-03 02:49:00"
      },
      "url": "https://www.notion.so/Day43-c971b9ef29ed4efca5cb3ec44df3ecf1",
      "public_url": "https://eachenkuang.notion.site/Day43-c971b9ef29ed4efca5cb3ec44df3ecf1"
    },
    {
      "object": "page",
      "id": "9262dea6-2976-46b6-b232-fde19c95db3c",
      "created_time": "2023-11-02T03:25:00.000Z",
      "last_edited_time": "2023-11-02T03:27:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1680357533402-def806337269?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-02",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day42",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day42【概念解析】迭代器模式",
        "status": "Published",
        "urlname": "9262dea6-2976-46b6-b232-fde19c95db3c",
        "updated": "2023-11-02 03:27:00"
      },
      "url": "https://www.notion.so/Day42-9262dea6297646b6b232fde19c95db3c",
      "public_url": "https://eachenkuang.notion.site/Day42-9262dea6297646b6b232fde19c95db3c"
    },
    {
      "object": "page",
      "id": "73f7c318-abd7-459f-9446-b86f408742a3",
      "created_time": "2023-11-01T13:38:00.000Z",
      "last_edited_time": "2025-02-24T12:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1494774157365-9e04c6720e47?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "190521",
        "icon": "",
        "date": "2023-11-01",
        "type": "Post",
        "category": "心情随笔",
        "slug": "love-you-20231102",
        "tags": [
          "随笔"
        ],
        "summary": "写于吾妻诞辰日之贺信，密码为相恋纪念日",
        "title": "与妻书-癸卯年 壬戌月 癸亥日",
        "status": "Published",
        "urlname": "73f7c318-abd7-459f-9446-b86f408742a3",
        "updated": "2025-02-24 12:42:00"
      },
      "url": "https://www.notion.so/73f7c318abd7459f9446b86f408742a3",
      "public_url": "https://eachenkuang.notion.site/73f7c318abd7459f9446b86f408742a3"
    },
    {
      "object": "page",
      "id": "5f32a5ce-5e61-4bf9-b6c9-467536cd6795",
      "created_time": "2023-11-01T07:40:00.000Z",
      "last_edited_time": "2024-01-01T01:36:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/%E9%98%B6%E6%AE%B5%E5%B0%8F%E7%BB%9310%E6%9C%88.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-01",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202310",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2023年10月",
        "status": "Published",
        "urlname": "5f32a5ce-5e61-4bf9-b6c9-467536cd6795",
        "updated": "2024-01-01 01:36:00"
      },
      "url": "https://www.notion.so/2023-10-5f32a5ce5e614bf9b6c9467536cd6795",
      "public_url": "https://eachenkuang.notion.site/2023-10-5f32a5ce5e614bf9b6c9467536cd6795"
    },
    {
      "object": "page",
      "id": "bab5d2df-faef-44e1-b1d8-bb3de013588b",
      "created_time": "2023-11-01T02:29:00.000Z",
      "last_edited_time": "2023-11-02T03:27:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1524741978410-350ba91a70d7?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-01",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day41",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day41【概念解析】命令模式",
        "status": "Published",
        "urlname": "bab5d2df-faef-44e1-b1d8-bb3de013588b",
        "updated": "2023-11-02 03:27:00"
      },
      "url": "https://www.notion.so/Day41-bab5d2dffaef44e1b1d8bb3de013588b",
      "public_url": "https://eachenkuang.notion.site/Day41-bab5d2dffaef44e1b1d8bb3de013588b"
    },
    {
      "object": "page",
      "id": "85ec7872-2079-4fc4-8ece-911ea8411034",
      "created_time": "2023-10-31T00:42:00.000Z",
      "last_edited_time": "2023-10-31T00:45:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/met_william_morris_1875.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-31",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day40",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day40 【概念解析】责任链模式",
        "status": "Published",
        "urlname": "85ec7872-2079-4fc4-8ece-911ea8411034",
        "updated": "2023-10-31 00:45:00"
      },
      "url": "https://www.notion.so/Day40-85ec787220794fc48ece911ea8411034",
      "public_url": "https://eachenkuang.notion.site/Day40-85ec787220794fc48ece911ea8411034"
    },
    {
      "object": "page",
      "id": "99aba18c-c1a5-4159-bd80-31f91b704033",
      "created_time": "2023-10-30T12:17:00.000Z",
      "last_edited_time": "2023-10-30T14:12:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1597915869221-a9eaaa1e7700?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-30",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day39",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day39【概念解析】代理模式",
        "status": "Published",
        "urlname": "99aba18c-c1a5-4159-bd80-31f91b704033",
        "updated": "2023-10-30 14:12:00"
      },
      "url": "https://www.notion.so/Day39-99aba18cc1a54159bd8031f91b704033",
      "public_url": "https://eachenkuang.notion.site/Day39-99aba18cc1a54159bd8031f91b704033"
    },
    {
      "object": "page",
      "id": "1417f3a8-1e53-4a77-ab33-48eecc251e42",
      "created_time": "2023-10-29T03:06:00.000Z",
      "last_edited_time": "2023-10-29T03:19:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1585504198199-20277593b94f?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-29",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day38",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day38 【概念解析】享元模式",
        "status": "Published",
        "urlname": "1417f3a8-1e53-4a77-ab33-48eecc251e42",
        "updated": "2023-10-29 03:19:00"
      },
      "url": "https://www.notion.so/Day38-1417f3a81e534a77ab3348eecc251e42",
      "public_url": "https://eachenkuang.notion.site/Day38-1417f3a81e534a77ab3348eecc251e42"
    },
    {
      "object": "page",
      "id": "bf82b3a4-6b39-455c-a42a-386e8158129b",
      "created_time": "2023-10-27T11:30:00.000Z",
      "last_edited_time": "2023-10-28T13:29:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1523350305669-8b45966e3e89?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-28",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day37",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day37【概念解析】外观模式",
        "status": "Published",
        "urlname": "bf82b3a4-6b39-455c-a42a-386e8158129b",
        "updated": "2023-10-28 13:29:00"
      },
      "url": "https://www.notion.so/Day37-bf82b3a46b39455ca42a386e8158129b",
      "public_url": "https://eachenkuang.notion.site/Day37-bf82b3a46b39455ca42a386e8158129b"
    },
    {
      "object": "page",
      "id": "1a622523-99f1-40e3-aeae-ce93db356ceb",
      "created_time": "2023-10-27T11:27:00.000Z",
      "last_edited_time": "2023-10-27T12:14:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1632119289059-793dd347950f?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-27",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day36",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day36【概念解析】装饰模式",
        "status": "Published",
        "urlname": "1a622523-99f1-40e3-aeae-ce93db356ceb",
        "updated": "2023-10-27 12:14:00"
      },
      "url": "https://www.notion.so/Day36-1a62252399f140e3aeaece93db356ceb",
      "public_url": "https://eachenkuang.notion.site/Day36-1a62252399f140e3aeaece93db356ceb"
    },
    {
      "object": "page",
      "id": "7815278a-17df-4bc7-97f0-e214b0c31fae",
      "created_time": "2023-10-26T14:47:00.000Z",
      "last_edited_time": "2023-10-27T11:26:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1635789145651-d5770bc33039?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-26",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day35",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day35【概念解析】组合模式",
        "status": "Published",
        "urlname": "7815278a-17df-4bc7-97f0-e214b0c31fae",
        "updated": "2023-10-27 11:26:00"
      },
      "url": "https://www.notion.so/Day35-7815278a17df4bc797f0e214b0c31fae",
      "public_url": "https://eachenkuang.notion.site/Day35-7815278a17df4bc797f0e214b0c31fae"
    },
    {
      "object": "page",
      "id": "52d2faa6-7c68-48c0-83cc-9b25e55d8677",
      "created_time": "2023-10-25T02:10:00.000Z",
      "last_edited_time": "2023-10-27T11:25:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1564517945244-d371c925640b?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-25",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day34",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day34 【概念解析】适配器模式",
        "status": "Published",
        "urlname": "52d2faa6-7c68-48c0-83cc-9b25e55d8677",
        "updated": "2023-10-27 11:25:00"
      },
      "url": "https://www.notion.so/Day34-52d2faa67c6848c083cc9b25e55d8677",
      "public_url": "https://eachenkuang.notion.site/Day34-52d2faa67c6848c083cc9b25e55d8677"
    },
    {
      "object": "page",
      "id": "806bfa79-55d9-4aa1-8be1-68f874e20a6b",
      "created_time": "2023-10-24T14:34:00.000Z",
      "last_edited_time": "2023-10-27T11:25:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1476725994324-6f6833ea0631?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-24",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day33",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day33【概念解析】桥接模式",
        "status": "Published",
        "urlname": "806bfa79-55d9-4aa1-8be1-68f874e20a6b",
        "updated": "2023-10-27 11:25:00"
      },
      "url": "https://www.notion.so/Day33-806bfa7955d94aa18be168f874e20a6b",
      "public_url": "https://eachenkuang.notion.site/Day33-806bfa7955d94aa18be168f874e20a6b"
    },
    {
      "object": "page",
      "id": "ceb6329e-8aef-419b-86ef-1521eed6940b",
      "created_time": "2023-10-23T13:16:00.000Z",
      "last_edited_time": "2023-10-27T11:25:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/webb3.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-23",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day32",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day32【概念解析】原型模式",
        "status": "Published",
        "urlname": "ceb6329e-8aef-419b-86ef-1521eed6940b",
        "updated": "2023-10-27 11:25:00"
      },
      "url": "https://www.notion.so/Day32-ceb6329e8aef419b86ef1521eed6940b",
      "public_url": "https://eachenkuang.notion.site/Day32-ceb6329e8aef419b86ef1521eed6940b"
    },
    {
      "object": "page",
      "id": "81f18f9b-bd50-4c7d-add1-5deb2cf9f805",
      "created_time": "2023-10-22T07:21:00.000Z",
      "last_edited_time": "2023-10-27T11:25:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/nasa_space_shuttle_challenger.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-22",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day31",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day31【概念解析】单例模式",
        "status": "Published",
        "urlname": "81f18f9b-bd50-4c7d-add1-5deb2cf9f805",
        "updated": "2023-10-27 11:25:00"
      },
      "url": "https://www.notion.so/Day31-81f18f9bbd504c7dadd15deb2cf9f805",
      "public_url": "https://eachenkuang.notion.site/Day31-81f18f9bbd504c7dadd15deb2cf9f805"
    },
    {
      "object": "page",
      "id": "56de3f1f-0d9c-4f3a-ace8-0f528afebc8a",
      "created_time": "2023-10-21T13:36:00.000Z",
      "last_edited_time": "2023-10-27T11:25:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/met_georges_seurat_1884.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-21",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day30",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day30【概念解析】建造者模式",
        "status": "Published",
        "urlname": "56de3f1f-0d9c-4f3a-ace8-0f528afebc8a",
        "updated": "2023-10-27 11:25:00"
      },
      "url": "https://www.notion.so/Day30-56de3f1f0d9c4f3aace80f528afebc8a",
      "public_url": "https://eachenkuang.notion.site/Day30-56de3f1f0d9c4f3aace80f528afebc8a"
    },
    {
      "object": "page",
      "id": "920702be-9cb2-471c-af7c-30cc884d5905",
      "created_time": "2023-10-20T11:54:00.000Z",
      "last_edited_time": "2023-10-27T11:25:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/202310201959847.webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-20",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day29",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day29【概念解析】 抽象工厂方法",
        "status": "Published",
        "urlname": "920702be-9cb2-471c-af7c-30cc884d5905",
        "updated": "2023-10-27 11:25:00"
      },
      "url": "https://www.notion.so/Day29-920702be9cb2471caf7c30cc884d5905",
      "public_url": "https://eachenkuang.notion.site/Day29-920702be9cb2471caf7c30cc884d5905"
    },
    {
      "object": "page",
      "id": "0af3d43f-8aae-4c4a-b6c8-7266fccd6991",
      "created_time": "2023-10-19T04:55:00.000Z",
      "last_edited_time": "2023-10-27T11:25:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/85f6c012-2895-49af-99a2-3e005710adbc/cover_%281%29.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=cc7311015e98d83c9274f0f7398ade220c44371c79e5b9d50c417e45d503c478&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.478Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-19",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day28",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式"
        ],
        "summary": "",
        "title": "Day28 【概念解析】工厂方法模式",
        "status": "Published",
        "urlname": "0af3d43f-8aae-4c4a-b6c8-7266fccd6991",
        "updated": "2023-10-27 11:25:00"
      },
      "url": "https://www.notion.so/Day28-0af3d43f8aae4c4ab6c87266fccd6991",
      "public_url": "https://eachenkuang.notion.site/Day28-0af3d43f8aae4c4ab6c87266fccd6991"
    },
    {
      "object": "page",
      "id": "6aac3d5a-68a3-4b2f-8f26-174f57d4dc9a",
      "created_time": "2023-10-18T05:14:00.000Z",
      "last_edited_time": "2023-11-09T03:47:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1491895200222-0fc4a4c35e18?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-18",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day27",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "设计模式",
          "必看精选"
        ],
        "summary": "",
        "title": "Day27【概念解析】设计模式",
        "status": "Published",
        "urlname": "6aac3d5a-68a3-4b2f-8f26-174f57d4dc9a",
        "updated": "2023-11-09 03:47:00"
      },
      "url": "https://www.notion.so/Day27-6aac3d5a68a34b2f8f26174f57d4dc9a",
      "public_url": "https://eachenkuang.notion.site/Day27-6aac3d5a68a34b2f8f26174f57d4dc9a"
    },
    {
      "object": "page",
      "id": "ba62195d-3617-4d66-a455-a1121a638af0",
      "created_time": "2023-10-17T11:10:00.000Z",
      "last_edited_time": "2023-10-27T11:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/gradients_11.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-17",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day26",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day26 【概念解析】 WebP",
        "status": "Published",
        "urlname": "ba62195d-3617-4d66-a455-a1121a638af0",
        "updated": "2023-10-27 11:24:00"
      },
      "url": "https://www.notion.so/Day26-WebP-ba62195d36174d66a455a1121a638af0",
      "public_url": "https://eachenkuang.notion.site/Day26-WebP-ba62195d36174d66a455a1121a638af0"
    },
    {
      "object": "page",
      "id": "28dc31c1-ffaf-4153-b5f8-9b6f3bffae5c",
      "created_time": "2023-10-16T11:01:00.000Z",
      "last_edited_time": "2023-10-27T11:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1606137039116-f771b914a6c7?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-16",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day25",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day25 【概念解析】 桶排序",
        "status": "Published",
        "urlname": "28dc31c1-ffaf-4153-b5f8-9b6f3bffae5c",
        "updated": "2023-10-27 11:24:00"
      },
      "url": "https://www.notion.so/Day25-28dc31c1ffaf4153b5f89b6f3bffae5c",
      "public_url": "https://eachenkuang.notion.site/Day25-28dc31c1ffaf4153b5f89b6f3bffae5c"
    },
    {
      "object": "page",
      "id": "ca17ab8f-41b8-491d-a472-918080e5da7b",
      "created_time": "2023-10-15T13:42:00.000Z",
      "last_edited_time": "2023-10-27T11:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1523901839036-a3030662f220?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-15",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day24",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day24 【概念解析】计数排序",
        "status": "Published",
        "urlname": "ca17ab8f-41b8-491d-a472-918080e5da7b",
        "updated": "2023-10-27 11:24:00"
      },
      "url": "https://www.notion.so/Day24-ca17ab8f41b8491da472918080e5da7b",
      "public_url": "https://eachenkuang.notion.site/Day24-ca17ab8f41b8491da472918080e5da7b"
    },
    {
      "object": "page",
      "id": "c29c5ea6-2ceb-4d22-9dfe-f6f7ef8cedf8",
      "created_time": "2023-10-14T08:01:00.000Z",
      "last_edited_time": "2023-10-27T11:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/met_terracotta_funerary_plaque.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-14",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day23",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day23【概念解析】基数排序",
        "status": "Published",
        "urlname": "c29c5ea6-2ceb-4d22-9dfe-f6f7ef8cedf8",
        "updated": "2023-10-27 11:24:00"
      },
      "url": "https://www.notion.so/Day23-c29c5ea62ceb4d229dfef6f7ef8cedf8",
      "public_url": "https://eachenkuang.notion.site/Day23-c29c5ea62ceb4d229dfef6f7ef8cedf8"
    },
    {
      "object": "page",
      "id": "5c3eaa22-d890-40db-b60b-722d40c42cf2",
      "created_time": "2023-10-13T02:02:00.000Z",
      "last_edited_time": "2023-10-27T11:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/woodcuts_15.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-13",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day22",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day22【概念解析】归并排序 ",
        "status": "Published",
        "urlname": "5c3eaa22-d890-40db-b60b-722d40c42cf2",
        "updated": "2023-10-27 11:24:00"
      },
      "url": "https://www.notion.so/Day22-5c3eaa22d89040dbb60b722d40c42cf2",
      "public_url": "https://eachenkuang.notion.site/Day22-5c3eaa22d89040dbb60b722d40c42cf2"
    },
    {
      "object": "page",
      "id": "65271d5d-d66e-4534-9bfd-71a8a7e871c0",
      "created_time": "2023-10-11T11:07:00.000Z",
      "last_edited_time": "2023-10-27T11:23:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1547637589-f54c34f5d7a4?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-12",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day21",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day21【概念解析】堆排序",
        "status": "Published",
        "urlname": "65271d5d-d66e-4534-9bfd-71a8a7e871c0",
        "updated": "2023-10-27 11:23:00"
      },
      "url": "https://www.notion.so/Day21-65271d5dd66e45349bfd71a8a7e871c0",
      "public_url": "https://eachenkuang.notion.site/Day21-65271d5dd66e45349bfd71a8a7e871c0"
    },
    {
      "object": "page",
      "id": "56725f3d-b4b1-4e14-8253-d6b580ba850f",
      "created_time": "2023-10-10T04:33:00.000Z",
      "last_edited_time": "2023-10-27T11:23:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/met_the_unicorn_in_captivity.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-11",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day20",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day20【概念解析】希尔排序",
        "status": "Published",
        "urlname": "56725f3d-b4b1-4e14-8253-d6b580ba850f",
        "updated": "2023-10-27 11:23:00"
      },
      "url": "https://www.notion.so/Day20-56725f3db4b14e148253d6b580ba850f",
      "public_url": "https://eachenkuang.notion.site/Day20-56725f3db4b14e148253d6b580ba850f"
    },
    {
      "object": "page",
      "id": "e36f2a4b-93ff-4eb2-8fcc-8090a93501fa",
      "created_time": "2023-10-10T04:33:00.000Z",
      "last_edited_time": "2025-02-20T12:38:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://source.unsplash.com/random/720x480/?encryption"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "12345678",
        "icon": "",
        "date": "2025-02-20",
        "type": "Post",
        "category": "",
        "slug": "test",
        "tags": [],
        "summary": "",
        "title": "picgo使用",
        "status": "Draft",
        "urlname": "e36f2a4b-93ff-4eb2-8fcc-8090a93501fa",
        "updated": "2025-02-20 12:38:00"
      },
      "url": "https://www.notion.so/picgo-e36f2a4b93ff4eb28fcc8090a93501fa",
      "public_url": "https://eachenkuang.notion.site/picgo-e36f2a4b93ff4eb28fcc8090a93501fa"
    },
    {
      "object": "page",
      "id": "38552ee5-4e35-4caa-a61c-ebb87296bf05",
      "created_time": "2023-10-09T04:34:00.000Z",
      "last_edited_time": "2023-10-27T11:23:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1600074169098-16a54d791d0d?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-10",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day19",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day19 【概念解析】选择排序",
        "status": "Published",
        "urlname": "38552ee5-4e35-4caa-a61c-ebb87296bf05",
        "updated": "2023-10-27 11:23:00"
      },
      "url": "https://www.notion.so/Day19-38552ee54e354caaa61cebb87296bf05",
      "public_url": "https://eachenkuang.notion.site/Day19-38552ee54e354caaa61cebb87296bf05"
    },
    {
      "object": "page",
      "id": "9ea65815-3473-42f7-a844-341198010d9d",
      "created_time": "2023-10-08T03:42:00.000Z",
      "last_edited_time": "2023-11-30T12:14:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://image.kuangyichen.com/image/%E9%98%B6%E6%AE%B5%E6%80%A7%E5%B0%8F%E7%BB%939%E6%9C%88.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-08",
        "type": "Post",
        "category": "三省吾身",
        "slug": "summary-202309",
        "tags": [
          "阶段性小结"
        ],
        "summary": "",
        "title": "[阶段小结]2023年9月",
        "status": "Published",
        "urlname": "9ea65815-3473-42f7-a844-341198010d9d",
        "updated": "2023-11-30 12:14:00"
      },
      "url": "https://www.notion.so/2023-9-9ea65815347342f7a844341198010d9d",
      "public_url": "https://eachenkuang.notion.site/2023-9-9ea65815347342f7a844341198010d9d"
    },
    {
      "object": "page",
      "id": "f1bbd1b1-e283-40f1-b1de-5ed1007f13ca",
      "created_time": "2023-10-08T01:21:00.000Z",
      "last_edited_time": "2023-10-27T11:23:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1544383835-bda2bc66a55d?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-09",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day18",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day18【概念解析】插入排序",
        "status": "Published",
        "urlname": "f1bbd1b1-e283-40f1-b1de-5ed1007f13ca",
        "updated": "2023-10-27 11:23:00"
      },
      "url": "https://www.notion.so/Day18-f1bbd1b1e28340f1b1de5ed1007f13ca",
      "public_url": "https://eachenkuang.notion.site/Day18-f1bbd1b1e28340f1b1de5ed1007f13ca"
    },
    {
      "object": "page",
      "id": "08ccfe77-d87f-4674-b6bb-101e5b30a91b",
      "created_time": "2023-10-07T09:25:00.000Z",
      "last_edited_time": "2023-10-27T11:23:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/met_william_turner_1835.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-08",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day17",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day17【概念解析】快速排序",
        "status": "Published",
        "urlname": "08ccfe77-d87f-4674-b6bb-101e5b30a91b",
        "updated": "2023-10-27 11:23:00"
      },
      "url": "https://www.notion.so/Day17-08ccfe77d87f4674b6bb101e5b30a91b",
      "public_url": "https://eachenkuang.notion.site/Day17-08ccfe77d87f4674b6bb101e5b30a91b"
    },
    {
      "object": "page",
      "id": "a0d4b94c-8e73-4eb0-872b-4a76f3fc18cf",
      "created_time": "2023-10-07T08:36:00.000Z",
      "last_edited_time": "2023-10-27T11:23:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1612855190135-bdbacda2a2b5?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-07",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day16",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法"
        ],
        "summary": "",
        "title": "Day16【概念解析】冒泡排序",
        "status": "Published",
        "urlname": "a0d4b94c-8e73-4eb0-872b-4a76f3fc18cf",
        "updated": "2023-10-27 11:23:00"
      },
      "url": "https://www.notion.so/Day16-a0d4b94c8e734eb0872b4a76f3fc18cf",
      "public_url": "https://eachenkuang.notion.site/Day16-a0d4b94c8e734eb0872b4a76f3fc18cf"
    },
    {
      "object": "page",
      "id": "c95a471b-d304-47cc-938c-c918d17ba275",
      "created_time": "2023-10-06T03:16:00.000Z",
      "last_edited_time": "2023-11-09T03:45:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/woodcuts_4.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-06",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day15",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "算法",
          "必看精选"
        ],
        "summary": "",
        "title": "Day15【概念解析】排序算法",
        "status": "Published",
        "urlname": "c95a471b-d304-47cc-938c-c918d17ba275",
        "updated": "2023-11-09 03:45:00"
      },
      "url": "https://www.notion.so/Day15-c95a471bd30447cc938cc918d17ba275",
      "public_url": "https://eachenkuang.notion.site/Day15-c95a471bd30447cc938cc918d17ba275"
    },
    {
      "object": "page",
      "id": "a085ecb4-0199-4862-a75b-752996e2efd1",
      "created_time": "2023-10-05T13:13:00.000Z",
      "last_edited_time": "2023-10-27T11:22:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://source.unsplash.com/random/720x480/?encryption"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-05",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day14",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day14【概念解析】数据库",
        "status": "Published",
        "urlname": "a085ecb4-0199-4862-a75b-752996e2efd1",
        "updated": "2023-10-27 11:22:00"
      },
      "url": "https://www.notion.so/Day14-a085ecb401994862a75b752996e2efd1",
      "public_url": "https://eachenkuang.notion.site/Day14-a085ecb401994862a75b752996e2efd1"
    },
    {
      "object": "page",
      "id": "5ff18cd3-f26b-47a8-b675-2c057c3bf1f9",
      "created_time": "2023-10-04T08:10:00.000Z",
      "last_edited_time": "2023-10-27T11:22:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/met_john_singer_sargent_morocco.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-04",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day13",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day13【概念解析】操作系统",
        "status": "Published",
        "urlname": "5ff18cd3-f26b-47a8-b675-2c057c3bf1f9",
        "updated": "2023-10-27 11:22:00"
      },
      "url": "https://www.notion.so/Day13-5ff18cd3f26b47a8b6752c057c3bf1f9",
      "public_url": "https://eachenkuang.notion.site/Day13-5ff18cd3f26b47a8b6752c057c3bf1f9"
    },
    {
      "object": "page",
      "id": "f30b2a8c-884f-4e2d-9e67-aa4342c76fce",
      "created_time": "2023-10-03T09:25:00.000Z",
      "last_edited_time": "2025-02-20T12:17:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/met_paul_signac.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-03",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day12",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day12【概念解析】软件项目管理",
        "status": "Published",
        "urlname": "f30b2a8c-884f-4e2d-9e67-aa4342c76fce",
        "updated": "2025-02-20 12:17:00"
      },
      "url": "https://www.notion.so/Day12-f30b2a8c884f4e2d9e67aa4342c76fce",
      "public_url": "https://eachenkuang.notion.site/Day12-f30b2a8c884f4e2d9e67aa4342c76fce"
    },
    {
      "object": "page",
      "id": "20c14a1e-a7ae-4a74-832c-974cdd8c1032",
      "created_time": "2023-10-02T01:39:00.000Z",
      "last_edited_time": "2023-10-27T11:22:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1564867317243-9219c75d28cf?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-02",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day11",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day11【概念解析】算术表达式",
        "status": "Published",
        "urlname": "20c14a1e-a7ae-4a74-832c-974cdd8c1032",
        "updated": "2023-10-27 11:22:00"
      },
      "url": "https://www.notion.so/Day11-20c14a1ea7ae4a74832c974cdd8c1032",
      "public_url": "https://eachenkuang.notion.site/Day11-20c14a1ea7ae4a74832c974cdd8c1032"
    },
    {
      "object": "page",
      "id": "bbad1c5d-2fe9-431e-92c3-5e93decd25e0",
      "created_time": "2023-10-01T02:49:00.000Z",
      "last_edited_time": "2023-10-27T11:22:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/nasa_new_york_city_grid.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-10-01",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day10",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day10【概念解析】数据结构",
        "status": "Published",
        "urlname": "bbad1c5d-2fe9-431e-92c3-5e93decd25e0",
        "updated": "2023-10-27 11:22:00"
      },
      "url": "https://www.notion.so/Day10-bbad1c5d2fe9431e92c35e93decd25e0",
      "public_url": "https://eachenkuang.notion.site/Day10-bbad1c5d2fe9431e92c35e93decd25e0"
    },
    {
      "object": "page",
      "id": "c22e380b-44ad-4c07-a4ca-c61d0167be0e",
      "created_time": "2023-09-30T10:19:00.000Z",
      "last_edited_time": "2023-10-27T11:20:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1487058792275-0ad4aaf24ca7?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-30",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day9",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day9 【概念解析】 系统测试",
        "status": "Published",
        "urlname": "c22e380b-44ad-4c07-a4ca-c61d0167be0e",
        "updated": "2023-10-27 11:20:00"
      },
      "url": "https://www.notion.so/Day9-c22e380b44ad4c07a4cac61d0167be0e",
      "public_url": "https://eachenkuang.notion.site/Day9-c22e380b44ad4c07a4cac61d0167be0e"
    },
    {
      "object": "page",
      "id": "1417da90-91b0-4d67-936d-3c41d7154689",
      "created_time": "2023-09-29T08:15:00.000Z",
      "last_edited_time": "2023-10-27T08:38:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/webb1.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-29",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day8",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day8 【概念解析】 敏捷开发",
        "status": "Published",
        "urlname": "1417da90-91b0-4d67-936d-3c41d7154689",
        "updated": "2023-10-27 08:38:00"
      },
      "url": "https://www.notion.so/Day8-1417da9091b04d67936d3c41d7154689",
      "public_url": "https://eachenkuang.notion.site/Day8-1417da9091b04d67936d3c41d7154689"
    },
    {
      "object": "page",
      "id": "5b80f37f-040b-457f-99c1-ea7d204f41b8",
      "created_time": "2023-09-28T09:48:00.000Z",
      "last_edited_time": "2023-10-27T08:38:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1555929583-b78e544368d3?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-28",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day7",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day7 【概念解析】 需求分析",
        "status": "Published",
        "urlname": "5b80f37f-040b-457f-99c1-ea7d204f41b8",
        "updated": "2023-10-27 08:38:00"
      },
      "url": "https://www.notion.so/Day7-5b80f37f040b457f99c1ea7d204f41b8",
      "public_url": "https://eachenkuang.notion.site/Day7-5b80f37f040b457f99c1ea7d204f41b8"
    },
    {
      "object": "page",
      "id": "9bc2c552-6da8-4099-9a82-e3f0e680cb3c",
      "created_time": "2023-09-27T14:36:00.000Z",
      "last_edited_time": "2023-10-27T08:38:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/woodcuts_1.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-27",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day6",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day6 【概念解析】 瀑布模型",
        "status": "Published",
        "urlname": "9bc2c552-6da8-4099-9a82-e3f0e680cb3c",
        "updated": "2023-10-27 08:38:00"
      },
      "url": "https://www.notion.so/Day6-9bc2c5526da840999a82e3f0e680cb3c",
      "public_url": "https://eachenkuang.notion.site/Day6-9bc2c5526da840999a82e3f0e680cb3c"
    },
    {
      "object": "page",
      "id": "86f45b95-9bbe-49de-a196-b631f6e8f3f4",
      "created_time": "2023-09-26T12:26:00.000Z",
      "last_edited_time": "2023-10-27T08:37:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/rijksmuseum_vermeer_the_milkmaid.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-26",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day5",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day5 【概念解析】软件过程模型",
        "status": "Published",
        "urlname": "86f45b95-9bbe-49de-a196-b631f6e8f3f4",
        "updated": "2023-10-27 08:37:00"
      },
      "url": "https://www.notion.so/Day5-86f45b959bbe49dea196b631f6e8f3f4",
      "public_url": "https://eachenkuang.notion.site/Day5-86f45b959bbe49dea196b631f6e8f3f4"
    },
    {
      "object": "page",
      "id": "8fb390f9-0bd2-4b38-8716-3cd5c4438092",
      "created_time": "2023-09-25T01:42:00.000Z",
      "last_edited_time": "2023-10-27T08:37:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/met_vincent_van_gogh_oleanders.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-25",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day4",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day4 【概念解析】 软件工程",
        "status": "Published",
        "urlname": "8fb390f9-0bd2-4b38-8716-3cd5c4438092",
        "updated": "2023-10-27 08:37:00"
      },
      "url": "https://www.notion.so/Day4-8fb390f90bd24b3887163cd5c4438092",
      "public_url": "https://eachenkuang.notion.site/Day4-8fb390f90bd24b3887163cd5c4438092"
    },
    {
      "object": "page",
      "id": "3d82901e-d200-40cf-a4fb-79470d54aa99",
      "created_time": "2023-09-24T01:09:00.000Z",
      "last_edited_time": "2023-10-27T08:37:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://source.unsplash.com/random/720x480/?encryption"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-24",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day3",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day3 【概念解析】软件开发",
        "status": "Published",
        "urlname": "3d82901e-d200-40cf-a4fb-79470d54aa99",
        "updated": "2023-10-27 08:37:00"
      },
      "url": "https://www.notion.so/Day3-3d82901ed20040cfa4fb79470d54aa99",
      "public_url": "https://eachenkuang.notion.site/Day3-3d82901ed20040cfa4fb79470d54aa99"
    },
    {
      "object": "page",
      "id": "25d2c91d-60c4-4fc9-94e6-a8d405fb51f1",
      "created_time": "2023-09-23T13:21:00.000Z",
      "last_edited_time": "2023-10-27T08:37:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://source.unsplash.com/random/720x480/?encryption"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-23",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day2",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "Day2 【概念解析】软件",
        "status": "Published",
        "urlname": "25d2c91d-60c4-4fc9-94e6-a8d405fb51f1",
        "updated": "2023-10-27 08:37:00"
      },
      "url": "https://www.notion.so/Day2-25d2c91d60c44fc994e6a8d405fb51f1",
      "public_url": "https://eachenkuang.notion.site/Day2-25d2c91d60c44fc994e6a8d405fb51f1"
    },
    {
      "object": "page",
      "id": "228c4a77-7031-4d7b-9fbc-7197d972d716",
      "created_time": "2023-09-22T12:56:00.000Z",
      "last_edited_time": "2023-12-12T02:25:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://source.unsplash.com/random/720x480/?encryption"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-22",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry",
        "tags": [
          "行业概念",
          "文字",
          "思考",
          "必看精选"
        ],
        "summary": "为什么要参加这个活动呢？起源于S老师的”写100个行业概念“活动。之前一直有关注Scalers老师的公众号，也阅读完了《学习的学问》这本书，感叹于S老师学习成长会的魅力，决定先让自己跟着这个活动坚持个一百天先。",
        "title": "【活动打卡】写100个行业概念",
        "status": "Published",
        "urlname": "228c4a77-7031-4d7b-9fbc-7197d972d716",
        "updated": "2023-12-12 02:25:00"
      },
      "url": "https://www.notion.so/100-228c4a7770314d7b9fbc7197d972d716",
      "public_url": "https://eachenkuang.notion.site/100-228c4a7770314d7b9fbc7197d972d716"
    },
    {
      "object": "page",
      "id": "03655767-2fb4-4bb0-b665-1100c6310e5f",
      "created_time": "2023-09-22T12:54:00.000Z",
      "last_edited_time": "2023-10-27T08:36:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/nasa_space_shuttle_columbia.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-22",
        "type": "Post",
        "category": "行业概念",
        "slug": "industry-day1",
        "tags": [
          "行业概念",
          "思考",
          "文字"
        ],
        "summary": "",
        "title": "Day1 【概念解析】行业",
        "status": "Published",
        "urlname": "03655767-2fb4-4bb0-b665-1100c6310e5f",
        "updated": "2023-10-27 08:36:00"
      },
      "url": "https://www.notion.so/Day1-036557672fb44bb0b6651100c6310e5f",
      "public_url": "https://eachenkuang.notion.site/Day1-036557672fb44bb0b6651100c6310e5f"
    },
    {
      "object": "page",
      "id": "b82f42df-ecc7-4442-b2e1-8c3df7df5045",
      "created_time": "2023-09-22T01:53:00.000Z",
      "last_edited_time": "2023-10-09T04:52:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1679678691006-3afa56204979?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-22",
        "type": "Post",
        "category": "行业概念",
        "slug": "start-industry-100-words",
        "tags": [
          "行业概念",
          "文字",
          "思考"
        ],
        "summary": "",
        "title": "“写100个行业概念”启动仪式",
        "status": "Published",
        "urlname": "b82f42df-ecc7-4442-b2e1-8c3df7df5045",
        "updated": "2023-10-09 04:52:00"
      },
      "url": "https://www.notion.so/100-b82f42dfecc74442b2e18c3df7df5045",
      "public_url": "https://eachenkuang.notion.site/100-b82f42dfecc74442b2e18c3df7df5045"
    },
    {
      "object": "page",
      "id": "1e7264cb-eba4-424d-821e-8b943412fb30",
      "created_time": "2023-09-18T02:02:00.000Z",
      "last_edited_time": "2023-09-26T03:35:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://source.unsplash.com/random/720x480/?encryption"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-17",
        "type": "Post",
        "category": "心情随笔",
        "slug": "westlife-wide-dream-in-shenzhen",
        "tags": [
          "随笔"
        ],
        "summary": "9.17，19:30-21:15，西城男孩【四海逐梦】深圳站演唱会完美谢幕。Westlife，从青葱岁月的男孩到如今的【老男孩】，他们用激情与热爱点燃了整个深圳湾春茧体育中心，带给我们青春与美好的回忆。青春不老，我们不散。愿我们永远年轻，永远热泪盈眶。",
        "title": "Westlife深圳站演唱会记录",
        "status": "Published",
        "urlname": "1e7264cb-eba4-424d-821e-8b943412fb30",
        "updated": "2023-09-26 03:35:00"
      },
      "url": "https://www.notion.so/Westlife-1e7264cbeba4424d821e8b943412fb30",
      "public_url": "https://eachenkuang.notion.site/Westlife-1e7264cbeba4424d821e8b943412fb30"
    },
    {
      "object": "page",
      "id": "14251711-a6a5-432b-b908-a40ff5b11c93",
      "created_time": "2023-09-16T12:15:00.000Z",
      "last_edited_time": "2023-09-26T07:52:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/gradients_11.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-16",
        "type": "Post",
        "category": "读书笔记",
        "slug": "naval-ravikant-book",
        "tags": [
          "思考",
          "文字",
          "必看精选"
        ],
        "summary": "纳瓦尔宝典的核心理念是：每个人都有能力和可能性创造自己的财富和幸福。他强调，财富的创造不仅仅是为了物质的富足，更重要的是实现个人的自由和满足。他认为，真正的幸福来自于内心的平静和满足，而不是外在的成就和认可。",
        "title": "《纳瓦尔宝典》自我救赎篇",
        "status": "Published",
        "urlname": "14251711-a6a5-432b-b908-a40ff5b11c93",
        "updated": "2023-09-26 07:52:00"
      },
      "url": "https://www.notion.so/14251711a6a5432bb908a40ff5b11c93",
      "public_url": "https://eachenkuang.notion.site/14251711a6a5432bb908a40ff5b11c93"
    },
    {
      "object": "page",
      "id": "97a0a1f0-5883-4814-a95b-50a11ed0b72f",
      "created_time": "2023-08-29T02:37:00.000Z",
      "last_edited_time": "2025-02-20T12:36:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://source.unsplash.com/random/720x480/?encryption"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-08-29 02:37:00",
        "type": "Post",
        "category": "技术分享",
        "slug": "test",
        "tags": [
          "开发",
          "建站",
          "工具"
        ],
        "summary": "",
        "title": "如何为网站添加ackee",
        "status": "Draft",
        "urlname": "97a0a1f0-5883-4814-a95b-50a11ed0b72f",
        "updated": "2025-02-20 12:36:00"
      },
      "url": "https://www.notion.so/ackee-97a0a1f058834814a95b50a11ed0b72f",
      "public_url": "https://eachenkuang.notion.site/ackee-97a0a1f058834814a95b50a11ed0b72f"
    },
    {
      "object": "page",
      "id": "fabcf1a5-9686-4a46-80e6-2fc417f52d76",
      "created_time": "2023-08-23T10:05:00.000Z",
      "last_edited_time": "2025-02-20T12:45:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://source.unsplash.com/random/720x480/?encryption"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-07-29",
        "type": "Post",
        "category": "",
        "slug": "",
        "tags": [],
        "summary": "",
        "title": "Nginx的用法",
        "status": "Draft",
        "urlname": "fabcf1a5-9686-4a46-80e6-2fc417f52d76",
        "updated": "2025-02-20 12:45:00"
      },
      "url": "https://www.notion.so/Nginx-fabcf1a596864a4680e62fc417f52d76",
      "public_url": "https://eachenkuang.notion.site/Nginx-fabcf1a596864a4680e62fc417f52d76"
    },
    {
      "object": "page",
      "id": "62a7a7aa-715d-4463-b163-fe3ed74a0142",
      "created_time": "2023-08-23T09:57:00.000Z",
      "last_edited_time": "2023-08-29T08:01:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1562577309-2592ab84b1bc?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-08-29",
        "type": "Post",
        "category": "技术分享",
        "slug": "how-to-add-seo-tools",
        "tags": [
          "开发",
          "建站",
          "工具"
        ],
        "summary": "文章讲述了什么是站长工具，为什么要有站长工具，如何添加站长工具。",
        "title": "网站添加站长工具及实战",
        "status": "Published",
        "urlname": "62a7a7aa-715d-4463-b163-fe3ed74a0142",
        "updated": "2023-08-29 08:01:00"
      },
      "url": "https://www.notion.so/62a7a7aa715d4463b163fe3ed74a0142",
      "public_url": "https://eachenkuang.notion.site/62a7a7aa715d4463b163fe3ed74a0142"
    },
    {
      "object": "page",
      "id": "b0040596-4fbd-478d-a9d0-246dec0e3b57",
      "created_time": "2023-08-23T01:43:00.000Z",
      "last_edited_time": "2023-10-07T09:48:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=03249e8a2b3bd92df33791e229e17fb5299c6562783303add978cf405b6a9e1f&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.480Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-06",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字",
          "必看精选"
        ],
        "summary": "本文为《非暴力沟通》的读书笔记",
        "title": "非暴力沟通合集",
        "status": "Published",
        "urlname": "b0040596-4fbd-478d-a9d0-246dec0e3b57",
        "updated": "2023-10-07 09:48:00"
      },
      "url": "https://www.notion.so/b00405964fbd478da9d0246dec0e3b57",
      "public_url": "https://eachenkuang.notion.site/b00405964fbd478da9d0246dec0e3b57"
    },
    {
      "object": "page",
      "id": "e29418b0-14aa-4596-a05b-d2ee446103c9",
      "created_time": "2023-08-23T01:22:00.000Z",
      "last_edited_time": "2023-10-08T03:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=03249e8a2b3bd92df33791e229e17fb5299c6562783303add978cf405b6a9e1f&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.480Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-08-15",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch11",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第十一章——《化解冲突，调和纷争》读书笔记。",
        "title": "非暴力沟通—[Ch11 化解冲突，调和纷争]",
        "status": "Published",
        "urlname": "e29418b0-14aa-4596-a05b-d2ee446103c9",
        "updated": "2023-10-08 03:24:00"
      },
      "url": "https://www.notion.so/Ch11-e29418b014aa4596a05bd2ee446103c9",
      "public_url": "https://eachenkuang.notion.site/Ch11-e29418b014aa4596a05bd2ee446103c9"
    },
    {
      "object": "page",
      "id": "8ce7ab33-1b95-45f9-ac71-301de83d5c6b",
      "created_time": "2023-08-23T01:21:00.000Z",
      "last_edited_time": "2023-10-08T03:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=03249e8a2b3bd92df33791e229e17fb5299c6562783303add978cf405b6a9e1f&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.480Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-08-10",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch10",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第十章——《充分表达愤怒》读书笔记。",
        "title": "非暴力沟通—[Ch10 充分表达愤怒]",
        "status": "Published",
        "urlname": "8ce7ab33-1b95-45f9-ac71-301de83d5c6b",
        "updated": "2023-10-08 03:24:00"
      },
      "url": "https://www.notion.so/Ch10-8ce7ab331b9545f9ac71301de83d5c6b",
      "public_url": "https://eachenkuang.notion.site/Ch10-8ce7ab331b9545f9ac71301de83d5c6b"
    },
    {
      "object": "page",
      "id": "b101bdf5-b8b1-4bcb-bf4e-65718c9edc1e",
      "created_time": "2023-08-23T01:21:00.000Z",
      "last_edited_time": "2023-10-08T03:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=03249e8a2b3bd92df33791e229e17fb5299c6562783303add978cf405b6a9e1f&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.480Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-08-03",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch9",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第九章——《爱自己》读书笔记。",
        "title": "非暴力沟通—[Ch9 爱自己]",
        "status": "Published",
        "urlname": "b101bdf5-b8b1-4bcb-bf4e-65718c9edc1e",
        "updated": "2023-10-08 03:24:00"
      },
      "url": "https://www.notion.so/Ch9-b101bdf5b8b14bcbbf4e65718c9edc1e",
      "public_url": "https://eachenkuang.notion.site/Ch9-b101bdf5b8b14bcbbf4e65718c9edc1e"
    },
    {
      "object": "page",
      "id": "d42902ff-feda-4d5a-acb8-000776995f2c",
      "created_time": "2023-08-23T01:21:00.000Z",
      "last_edited_time": "2023-10-08T03:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=03249e8a2b3bd92df33791e229e17fb5299c6562783303add978cf405b6a9e1f&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.480Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-30",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch8",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第八章——《同理心的力量》读书笔记。",
        "title": "非暴力沟通—[Ch8 同理心的力量]",
        "status": "Published",
        "urlname": "d42902ff-feda-4d5a-acb8-000776995f2c",
        "updated": "2023-10-08 03:24:00"
      },
      "url": "https://www.notion.so/Ch8-d42902fffeda4d5aacb8000776995f2c",
      "public_url": "https://eachenkuang.notion.site/Ch8-d42902fffeda4d5aacb8000776995f2c"
    },
    {
      "object": "page",
      "id": "8a60183e-0431-4490-9277-ea369a32f305",
      "created_time": "2023-08-22T11:48:00.000Z",
      "last_edited_time": "2023-10-08T03:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=03249e8a2b3bd92df33791e229e17fb5299c6562783303add978cf405b6a9e1f&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.480Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-28",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch7",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第七章——《以同理心倾听》读书笔记。",
        "title": "非暴力沟通—[Ch7 以同理心倾听]",
        "status": "Published",
        "urlname": "8a60183e-0431-4490-9277-ea369a32f305",
        "updated": "2023-10-08 03:24:00"
      },
      "url": "https://www.notion.so/Ch7-8a60183e043144909277ea369a32f305",
      "public_url": "https://eachenkuang.notion.site/Ch7-8a60183e043144909277ea369a32f305"
    },
    {
      "object": "page",
      "id": "16a1bd4b-fcba-4755-ae98-1dee29eb7417",
      "created_time": "2023-08-22T11:48:00.000Z",
      "last_edited_time": "2023-10-08T03:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=03249e8a2b3bd92df33791e229e17fb5299c6562783303add978cf405b6a9e1f&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.480Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-20",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch6",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第六章——《提出请求，丰盈生命》读书笔记。",
        "title": "非暴力沟通—[Ch6 提出请求，丰盈生命]",
        "status": "Published",
        "urlname": "16a1bd4b-fcba-4755-ae98-1dee29eb7417",
        "updated": "2023-10-08 03:24:00"
      },
      "url": "https://www.notion.so/Ch6-16a1bd4bfcba4755ae981dee29eb7417",
      "public_url": "https://eachenkuang.notion.site/Ch6-16a1bd4bfcba4755ae981dee29eb7417"
    },
    {
      "object": "page",
      "id": "9412fd8b-db15-44fa-be67-b984f43a69b3",
      "created_time": "2023-08-22T11:48:00.000Z",
      "last_edited_time": "2023-10-08T03:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=03249e8a2b3bd92df33791e229e17fb5299c6562783303add978cf405b6a9e1f&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.480Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-13",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch5",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第五章——《为自己的感受负责》读书笔记。",
        "title": "非暴力沟通—[Ch5 为自己的感受负责]",
        "status": "Published",
        "urlname": "9412fd8b-db15-44fa-be67-b984f43a69b3",
        "updated": "2023-10-08 03:24:00"
      },
      "url": "https://www.notion.so/Ch5-9412fd8bdb1544fabe67b984f43a69b3",
      "public_url": "https://eachenkuang.notion.site/Ch5-9412fd8bdb1544fabe67b984f43a69b3"
    },
    {
      "object": "page",
      "id": "f759e9e8-02ae-4647-8a24-e7710b267938",
      "created_time": "2023-08-22T11:48:00.000Z",
      "last_edited_time": "2023-10-08T03:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=03249e8a2b3bd92df33791e229e17fb5299c6562783303add978cf405b6a9e1f&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.480Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-10",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch4",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第四章——《体会与表达感受》读书笔记。",
        "title": "非暴力沟通—[Ch4 体会与表达感受]",
        "status": "Published",
        "urlname": "f759e9e8-02ae-4647-8a24-e7710b267938",
        "updated": "2023-10-08 03:24:00"
      },
      "url": "https://www.notion.so/Ch4-f759e9e802ae46478a24e7710b267938",
      "public_url": "https://eachenkuang.notion.site/Ch4-f759e9e802ae46478a24e7710b267938"
    },
    {
      "object": "page",
      "id": "e8f61215-261d-4313-94d2-e5c06f988819",
      "created_time": "2023-08-22T05:04:00.000Z",
      "last_edited_time": "2023-10-08T03:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=03249e8a2b3bd92df33791e229e17fb5299c6562783303add978cf405b6a9e1f&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.557Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-09",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch3",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第三章——《不带评论的观察》读书笔记。",
        "title": "非暴力沟通—[Ch3 不带评论的观察",
        "status": "Published",
        "urlname": "e8f61215-261d-4313-94d2-e5c06f988819",
        "updated": "2023-10-08 03:24:00"
      },
      "url": "https://www.notion.so/Ch3-e8f61215261d431394d2e5c06f988819",
      "public_url": "https://eachenkuang.notion.site/Ch3-e8f61215261d431394d2e5c06f988819"
    },
    {
      "object": "page",
      "id": "af29d756-d6a1-4a59-bd37-1bd51447b706",
      "created_time": "2023-08-22T04:59:00.000Z",
      "last_edited_time": "2023-10-08T03:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=03249e8a2b3bd92df33791e229e17fb5299c6562783303add978cf405b6a9e1f&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.557Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-08",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch2",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第二章——《疏离生命的语言》读书笔记。",
        "title": "非暴力沟通—[Ch2 疏离生命的语言]",
        "status": "Published",
        "urlname": "af29d756-d6a1-4a59-bd37-1bd51447b706",
        "updated": "2023-10-08 03:24:00"
      },
      "url": "https://www.notion.so/Ch2-af29d756d6a14a59bd371bd51447b706",
      "public_url": "https://eachenkuang.notion.site/Ch2-af29d756d6a14a59bd371bd51447b706"
    },
    {
      "object": "page",
      "id": "91842536-ed04-4266-916a-ac9c3d0ac2b1",
      "created_time": "2023-08-19T15:02:00.000Z",
      "last_edited_time": "2023-10-08T03:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/79ccecc8-67ff-4757-b236-a6ae88c27007/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_%E8%A3%81%E5%89%AA.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=03249e8a2b3bd92df33791e229e17fb5299c6562783303add978cf405b6a9e1f&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.557Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-07-07",
        "type": "Post",
        "category": "学习笔记",
        "slug": "nonviolent-communication-ch1",
        "tags": [
          "非暴力沟通",
          "随笔",
          "文字"
        ],
        "summary": "本文为《非暴力沟通》的第一章——《由衷的给予》读书笔记。",
        "title": "非暴力沟通—[Ch1 由衷的给予]",
        "status": "Published",
        "urlname": "91842536-ed04-4266-916a-ac9c3d0ac2b1",
        "updated": "2023-10-08 03:24:00"
      },
      "url": "https://www.notion.so/Ch1-91842536ed044266916aac9c3d0ac2b1",
      "public_url": "https://eachenkuang.notion.site/Ch1-91842536ed044266916aac9c3d0ac2b1"
    },
    {
      "object": "page",
      "id": "76048781-d532-4ea6-a0ac-00f84cfd56ca",
      "created_time": "2023-08-18T04:39:00.000Z",
      "last_edited_time": "2023-08-18T04:50:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1569396116180-210c182bedb8?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-10-25",
        "type": "Post",
        "category": "学习笔记",
        "slug": "redis-data-structure",
        "tags": [
          "Redis",
          "数据库",
          "工具"
        ],
        "summary": "Redis的数据结构分为顶层数据结构和底层数据结构，我们来根据《Redis设计与实现》尝试剖析下。",
        "title": "【笔记】Redis数据结构与对象《Redis设计与实现》",
        "status": "Published",
        "urlname": "76048781-d532-4ea6-a0ac-00f84cfd56ca",
        "updated": "2023-08-18 04:50:00"
      },
      "url": "https://www.notion.so/Redis-Redis-76048781d5324ea6a0ac00f84cfd56ca",
      "public_url": "https://eachenkuang.notion.site/Redis-Redis-76048781d5324ea6a0ac00f84cfd56ca"
    },
    {
      "object": "page",
      "id": "cbb2a371-f267-449e-b38a-74f963d71d45",
      "created_time": "2023-08-18T03:15:00.000Z",
      "last_edited_time": "2023-08-18T04:34:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/bfb30b48-50c3-459a-9cb3-a4c5cfb36c1e/mysql-like.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=e6ff9ccf79430e8173bf686affa4f5f56e55330d9a74f639fa8ac7d7148a3405&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.558Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-08-18",
        "type": "Post",
        "category": "技术分享",
        "slug": "mysql-like-regexp",
        "tags": [
          "MySQL",
          "SQL",
          "开发"
        ],
        "summary": "在MySQL中，我们可以使用LIKE和REGEXP函数来进行模式匹配操作。LIKE函数使用通配符进行模式匹配，而REGEXP函数使用正则表达式进行模式匹配。这两个函数都是常用的工具，但它们在匹配方式、匹配规则和性能方面存在一些区别。",
        "title": "MySQL匹配，LIKE or REGEXP?",
        "status": "Published",
        "urlname": "cbb2a371-f267-449e-b38a-74f963d71d45",
        "updated": "2023-08-18 04:34:00"
      },
      "url": "https://www.notion.so/MySQL-LIKE-or-REGEXP-cbb2a371f267449eb38a74f963d71d45",
      "public_url": "https://eachenkuang.notion.site/MySQL-LIKE-or-REGEXP-cbb2a371f267449eb38a74f963d71d45"
    },
    {
      "object": "page",
      "id": "208b2c31-cbca-4d1c-aa8d-b792dd4daf1d",
      "created_time": "2023-08-17T14:39:00.000Z",
      "last_edited_time": "2023-10-20T06:29:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://source.unsplash.com/random/720x480/?encryption"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-07-02",
        "type": "Post",
        "category": "心情随笔",
        "slug": "good-notion",
        "tags": [
          "随笔",
          "文字"
        ],
        "summary": "",
        "title": "我与Notion有个约",
        "status": "Invisible",
        "urlname": "208b2c31-cbca-4d1c-aa8d-b792dd4daf1d",
        "updated": "2023-10-20 06:29:00"
      },
      "url": "https://www.notion.so/Notion-208b2c31cbca4d1caa8db792dd4daf1d",
      "public_url": "https://eachenkuang.notion.site/Notion-208b2c31cbca4d1caa8db792dd4daf1d"
    },
    {
      "object": "page",
      "id": "4212a457-2728-4e14-bac7-95602e9848ba",
      "created_time": "2023-08-10T07:16:00.000Z",
      "last_edited_time": "2023-08-10T07:23:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1506918836024-2d1ded7ce188?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-10-02",
        "type": "Post",
        "category": "学习笔记",
        "slug": "quick-guide-to-ga-asm",
        "tags": [
          "Go",
          "开发"
        ],
        "summary": "快速学习Go汇编，本文翻译《A Quick Guide to Go's Assembler》 https://golang.org/doc/asm",
        "title": "【翻译】《A Quick Guide to Go's Assembler》",
        "status": "Published",
        "urlname": "4212a457-2728-4e14-bac7-95602e9848ba",
        "updated": "2023-08-10 07:23:00"
      },
      "url": "https://www.notion.so/A-Quick-Guide-to-Go-s-Assembler-4212a45727284e14bac795602e9848ba",
      "public_url": "https://eachenkuang.notion.site/A-Quick-Guide-to-Go-s-Assembler-4212a45727284e14bac795602e9848ba"
    },
    {
      "object": "page",
      "id": "cab96cc8-d3ee-4627-a63d-6c5ebe6b67db",
      "created_time": "2023-08-07T12:10:00.000Z",
      "last_edited_time": "2023-08-07T12:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1533709752211-118fcaf03312?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-03-30",
        "type": "Post",
        "category": "技术分享",
        "slug": "jmh",
        "tags": [
          "Java",
          "性能测试"
        ],
        "summary": "从 JDK 12开始，JDK 自带 JMH (Java Microbenchmark Harness) ，它是一个工具包，可以帮助我们正确地实现 Java 微基准测试。今天我和它正好有个约。",
        "title": "我和JMH有个约————Java微基准测试工具探究",
        "status": "Published",
        "urlname": "cab96cc8-d3ee-4627-a63d-6c5ebe6b67db",
        "updated": "2023-08-07 12:24:00"
      },
      "url": "https://www.notion.so/JMH-Java-cab96cc8d3ee4627a63d6c5ebe6b67db",
      "public_url": "https://eachenkuang.notion.site/JMH-Java-cab96cc8d3ee4627a63d6c5ebe6b67db"
    },
    {
      "object": "page",
      "id": "1a7db346-40d8-4c8e-9b61-7ef9ab008dc2",
      "created_time": "2023-08-06T08:25:00.000Z",
      "last_edited_time": "2023-09-26T07:51:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1662026911591-335639b11db6?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-01-06",
        "type": "Post",
        "category": "学习笔记",
        "slug": "mysql-crash-course",
        "tags": [
          "SQL",
          "MySQL",
          "数据库",
          "必看精选"
        ],
        "summary": "最近重读了一遍《MySQL必知必会》，然后对重要的部分摘抄了一些笔记，希望能够作重温下经典的基础上，巩固下自己对于MySQL的理解。篇幅可能有点长，可以通过目录快速查看。",
        "title": "【笔记】MySQL必知必会",
        "status": "Published",
        "urlname": "1a7db346-40d8-4c8e-9b61-7ef9ab008dc2",
        "updated": "2023-09-26 07:51:00"
      },
      "url": "https://www.notion.so/MySQL-1a7db34640d84c8e9b617ef9ab008dc2",
      "public_url": "https://eachenkuang.notion.site/MySQL-1a7db34640d84c8e9b617ef9ab008dc2"
    },
    {
      "object": "page",
      "id": "c487e880-5297-4731-874f-6100ab24c44a",
      "created_time": "2023-08-06T02:26:00.000Z",
      "last_edited_time": "2023-09-26T07:51:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1642367340318-96fdbc5d30f5?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-10-13",
        "type": "Post",
        "category": "技术分享",
        "slug": "go-reflect-laws",
        "tags": [
          "Go",
          "开发",
          "必看精选"
        ],
        "summary": "最近在研究Go语言的源码，看到反射部分，结合The Go Blog系列的《The Laws of Reflection》，以及Go 1.15 中 src/reflect 部分源码，记录下对于Go 反射的一些见解。",
        "title": "初探Go反射三大定律",
        "status": "Published",
        "urlname": "c487e880-5297-4731-874f-6100ab24c44a",
        "updated": "2023-09-26 07:51:00"
      },
      "url": "https://www.notion.so/Go-c487e88052974731874f6100ab24c44a",
      "public_url": "https://eachenkuang.notion.site/Go-c487e88052974731874f6100ab24c44a"
    },
    {
      "object": "page",
      "id": "8522b1ba-f2b4-4ac7-b791-482e0959ce27",
      "created_time": "2023-08-06T02:12:00.000Z",
      "last_edited_time": "2023-08-06T08:48:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-09-20",
        "type": "Post",
        "category": "技术分享",
        "slug": "redis-message-pub-sub",
        "tags": [
          "Redis",
          "开发"
        ],
        "summary": "在软件架构中，发布-订阅是一种消息传递模式，其中消息的发送者（称为发布者）不会将消息编程为直接发送给特定的接收者（称为订阅者），而是将已发布的消息分类到不知道哪些订阅者的情况下。 类似地，订阅者表示对一个或多个频道感兴趣并且只接收感兴趣的消息，而不知道有哪些发布者。本文讲述了Redis中的消息发布订阅",
        "title": "Redis中的消息发布订阅",
        "status": "Published",
        "urlname": "8522b1ba-f2b4-4ac7-b791-482e0959ce27",
        "updated": "2023-08-06 08:48:00"
      },
      "url": "https://www.notion.so/Redis-8522b1baf2b44ac7b791482e0959ce27",
      "public_url": "https://eachenkuang.notion.site/Redis-8522b1baf2b44ac7b791482e0959ce27"
    },
    {
      "object": "page",
      "id": "c3e54c4b-ad14-484c-aeac-de9296dc24e6",
      "created_time": "2023-08-06T01:54:00.000Z",
      "last_edited_time": "2023-08-06T08:48:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1605600659873-d808a13e4d2a?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-09-16",
        "type": "Post",
        "category": "技术分享",
        "slug": "redis-usding-pipeline-speed-up",
        "tags": [
          "Redis",
          "开发"
        ],
        "summary": "Redis是一种高性能的内存数据库，它可以快速地存储和检索数据。但是，当需要执行大量的Redis查询时，每个查询都需要与Redis服务器进行通信，这可能会导致性能瓶颈。为了解决这个问题，Redis提供了Pipeline机制，它可以将多个查询打包在一起，一次性发送给Redis服务器，从而提高查询速度。在本文中，我们将介绍如何使用Redis Pipeline机制来提高查询速度，并探讨Pipeline机制的工作原理和使用方法。",
        "title": "Redis使用Pipeline提高查询速度",
        "status": "Published",
        "urlname": "c3e54c4b-ad14-484c-aeac-de9296dc24e6",
        "updated": "2023-08-06 08:48:00"
      },
      "url": "https://www.notion.so/Redis-Pipeline-c3e54c4bad14484caeacde9296dc24e6",
      "public_url": "https://eachenkuang.notion.site/Redis-Pipeline-c3e54c4bad14484caeacde9296dc24e6"
    },
    {
      "object": "page",
      "id": "b1eecfd0-b513-46a9-a50b-5cffc35e6542",
      "created_time": "2023-08-05T09:10:00.000Z",
      "last_edited_time": "2023-08-07T12:29:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://prod-files-secure.s3.us-west-2.amazonaws.com/dea38628-64dc-40fd-8d17-2efa87e3d554/33d23e03-f43d-4c01-84ae-9b4733c2aad2/redis.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46637ZVGQH6%2F20250331%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250331T132556Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjED0aCXVzLXdlc3QtMiJHMEUCIQC7ibft0ZfwXWe6Uc7aW%2BiQUqZf5TtealNaDwRp4qpwVAIgSw4iS94Coy4zvQhwOHIH1yyQ%2FYnfhXiBNRlYKGeldlgqiAQIpv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAAGgw2Mzc0MjMxODM4MDUiDONexytCGToIY4M2lCrcA%2BuwjtkZSU1xZJ6dxOSnK1ENsQSH016TFU%2FyzEN2OGqxPqVAUtqBIl690KvYHCcW5w3Kqo7hrUpKITXzkeXfxweKM%2FTu4epvGSTLGy29%2F1CMoJsdPvszNpb19Xe0JMgFCaN0ge1Epr%2BOwX%2BFkfrRoJhkGm%2FJwY0r3RlqW1rHstFy6mTP5BP82eArY0Iu3RrLIwttmFZj7Ni32%2BgT1q3lDF9ubF2W0CwQx1%2F1qO7HA%2FEMvhcVi1rBT18QoFRPOvEI9nuk6CphOL24e8O%2FnNKxsLEAd3c9iQYxJfXVJ0S27%2Bfan5O8tAeG3p7vxknLCA2BTOaVMCpX77UWboHqcmbxaMZjktroRJpW6XP0M%2FsoFuyZMouUc9qPRoI%2FBk%2FA5XMNl27q8GFJHbd8j2WBgpiySqbBoDLqDjr41OFw%2FUWevVjCawRF3hilWpqZuFlgQinKuIhqUa2VWW%2FFedBggxkq7TV%2FhVfG3%2FRvVOEkl2vHYOpkpVzBrF0116ui61Dt%2BtNcBBgUqSb1DB%2FWXi4WayKkZfEHyDOJcYIXYt5Me1dk7vQrGDHSzLXcdl%2B3le3hXWfF4LmuDnufI4kw%2F0Q4Jm9I%2B%2Fy0KY3z0PTKshuQevy8qpOfuPbnjpL4hu7eA9gDMJKiqr8GOqUBwWqKPy7G4%2FOnDFw1Q7kIJLdeWt2fpkCoaH%2BGrnv%2FVCwjyUOBpzQ1F44Ro1mFsNy2yibWF5PxMnCk7Dk9hTEpyP5vPQ6XJqXunWu3hnADF4RdRLnDP5X60NIuGoKT1a703eimIh%2F%2B%2FfQlim%2BihRH%2B8f%2FIu3bd3fUoG9FK28QKnkI1tUGXCOyEI7v6xGLyYh4QhIZp0AuSDE8YdVDCTpjj%2FxMu9iXJ&X-Amz-Signature=68a3d05fce856949ec78d32867cb4dad7090339cddd2df56e999ad789ea5d4bd&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2025-03-31T14:25:56.558Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-09-14",
        "type": "Post",
        "category": "技术分享",
        "slug": "resp",
        "tags": [
          "Redis",
          "开发"
        ],
        "summary": "Redis客户端和服务器端通信使用名为 RESP (REdis Serialization Protocol) 的协议。",
        "title": "Redis 协议详细规范",
        "status": "Published",
        "urlname": "b1eecfd0-b513-46a9-a50b-5cffc35e6542",
        "updated": "2023-08-07 12:29:00"
      },
      "url": "https://www.notion.so/Redis-b1eecfd0b51346a9a50b5cffc35e6542",
      "public_url": "https://eachenkuang.notion.site/Redis-b1eecfd0b51346a9a50b5cffc35e6542"
    },
    {
      "object": "page",
      "id": "cba1c574-25fd-41e7-bbdf-ad3459124fbf",
      "created_time": "2023-08-05T09:01:00.000Z",
      "last_edited_time": "2023-08-06T08:12:00.000Z",
      "created_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "last_edited_by": {
        "object": "user",
        "id": "730822a3-a39d-4313-aff9-f18324e745dd"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://images.unsplash.com/photo-1608496601160-f86d19a44f9f?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "cd6c4967-e5fe-45d2-976d-5d46736ada90"
      },
      "archived": false,
      "in_trash": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-09-10",
        "type": "Post",
        "category": "心情随笔",
        "slug": "eachen-world-new-start",
        "tags": [
          "随笔",
          "文字"
        ],
        "summary": "9月10日是教师节，这一天，易浅的世界重新开放。",
        "title": "易浅的世界——新的开始",
        "status": "Published",
        "urlname": "cba1c574-25fd-41e7-bbdf-ad3459124fbf",
        "updated": "2023-08-06 08:12:00"
      },
      "url": "https://www.notion.so/cba1c57425fd41e7bbdfad3459124fbf",
      "public_url": "https://eachenkuang.notion.site/cba1c57425fd41e7bbdfad3459124fbf"
    }
  ]
}